'use strict';

let db;
const DB_NAME = 'CopilotDB';
const DB_VERSION = 11;
const CURRENT_SCHEMA_VERSION = "1.5";
let userPreferences = {
    theme: 'auto',
    showBlacklistUsageWarning: true
};

let categoryDisplayInfo = {
    'difficult-client': { title: '–†–∞–±–æ—Ç–∞ —Å —Ç—Ä—É–¥–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º', icon: 'fa-user-shield', color: 'red' },
    'tech-support': { title: '–û–±—â–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç', icon: 'fa-headset', color: 'blue' },
    'emergency': { title: '–ß—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏', icon: 'fa-exclamation-triangle', color: 'orange' }
};

const CATEGORY_INFO_KEY = 'reglamentCategoryInfo';
const SEDO_CONFIG_KEY = 'sedoTypesConfigGlobal';
const BLACKLIST_WARNING_ACCEPTED_KEY = 'blacklistWarningAccepted';
const USER_PREFERENCES_KEY = 'userGlobalPreferences';

const ARCHIVE_FOLDER_ID = "__archive__";
const ARCHIVE_FOLDER_NAME = "–ê—Ä—Ö–∏–≤";

const MAX_REFS_PER_WORD = 500;

const MAX_UPDATE_VISIBLE_TABS_RETRIES = 30;

const MIN_TOKEN_LEN_FOR_INDEX = 2;

const FAVORITES_STORE_NAME = 'favorites';

const CLIENT_NOTES_MIN_FONT_SIZE = 70;
const CLIENT_NOTES_MAX_FONT_SIZE = 200;
const CLIENT_NOTES_FONT_SIZE_STEP = 5;

const TELEFONY_DOC_ID = '1lDCKpFcBIB4gRCI7_Ppsepy140YWdFtziut67xr6GTw';
const SHABLONY_DOC_ID = '1YIAViw2kOVh4UzLw8VjNns0PHD29lHLr_QaQs3jCGX4';

const EXT_LINKS_MIGRATION_KEY = 'extLinksCategoryMigrationDone_v1';

const showFavoritesHeaderButton = document.getElementById('showFavoritesHeaderBtn');
if (showFavoritesHeaderButton && !showFavoritesHeaderButton.dataset.listenerAttached) {
    showFavoritesHeaderButton.addEventListener('click', () => setActiveTab('favorites'));
    showFavoritesHeaderButton.dataset.listenerAttached = 'true';
}

let originalUISettings = {};
let currentPreviewSettings = {};
let isUISettingsDirty = false;

let uiModalState = {};

let clientNotesInputHandler = null;
let clientNotesKeydownHandler = null;
let clientNotesSaveTimeout = null;

let isTabsOverflowCheckRunning = false;
let tabsOverflowCheckCount = 0;

let sedoFullscreenEscapeHandler = null;

let blacklistEntryModalInstance = null;
let currentBlacklistWarningOverlay = null;
let allBlacklistEntriesCache = [];
let currentBlacklistSearchQuery = '';

let isExportOperationInProgress = false;
let isExpectingExportFileDialog = false;
let exportDialogInteractionComplete = false;
let exportWatchdogTimerId = null;
let exportWindowFocusHandlerInstance = null;

let importDialogInteractionComplete = false;

let activeEditingUnitElement = null;
let timerElements = {};

let isExpectingFileDialog = false;
let windowFocusHandlerInstance = null;

let updateVisibleTabsRetryCount = 0;
let tabsResizeTimeout;

let initialBookmarkFormState = null;

let lastKnownInnCounts = new Map();
let activeToadNotifications = new Map();

let extLinkCategoryInfo = {};

let currentBlacklistSort = { criteria: 'level', direction: 'desc' };

let currentFavoritesCache = [];

let googleDocTimestamps = new Map();
let timestampUpdateInterval = null;

const FIELD_WEIGHTS = {
    algorithms: {
        title: 3.0,
        description: 1.5,
        steps: 1.0,
        sectionNameForAlgo: 1.2,
        sectionIdForAlgo: 0.8,
    },
    main: {
        title: 3.5,
        description: 1.8,
        steps: 1.2,
    },
    links: {
        title: 2.5,
        description: 1.0,
        link_path: 1.5
    },
    bookmarks: {
        title: 3.0,
        description: 1.5,
        url_original: 0.7,
        url_hostname: 1.8,
        url_path_0: 1.2,
        url_path_1: 1.0,
        url_path_2: 0.8,
        url_query_params: 0.5,
        url_fallback_text: 0.3,
        folderName: 2.0
    },
    reglaments: {
        title: 2.8,
        content: 1.0,
        categoryName: 1.5
    },
    extLinks: {
        title: 2.5,
        description: 1.0,
        url_full: 0.8,
        url_hostname: 1.5,
        categoryName: 1.2,
        url_fallback_text: 0.3
    },
    clientData: {
        notes: 1.0
    },
    bookmarkFolders: {
        name: 2.0
    },
    preferences: {
        mainSedoGlobalContent: 1.0,
        tableTitle: 2.2,
        staticListItem: 1.2,
        tableCell: 1.0,
        code: 3.0,
        type: 2.5,
        name: 2.0,
        description: 1.2,
        category_title: 1.0,
    },
    blacklistedClients: {
        organizationName: 2.5,
        inn: 2.0,
        phone: 1.5,
        notes: 1.0
    },
    default: {
        title: 2.0,
        name: 2.0,
        description: 1.0,
        content: 1.0,
        text: 1.0,
        url: 0.7,
        notes: 1.0
    },
    telefony: {
        header: 1.5,
        cell: 1.0
    },
    shablony: {
        h1: 3.0,
        h2: 2.5,
        h3: 2.0,
        content: 1.0
    }
};


const DEFAULT_WELCOME_CLIENT_NOTES_TEXT = `   –ò—Ç–∞–∫, –≤—ã –∑–¥–µ—Å—å. –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ 1–°-–û—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –∫–∞—Ä–º–∞–Ω–µ (–Ω–∞–¥–µ–µ–º—Å—è). –ê —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤–∞–º –≤—Ä—É—á–∞–µ—Ç—Å—è –∫–ª—é—á –æ—Ç –≤—Å–µ—Ö –¥–≤–µ—Ä–µ–π... –Ω—É, –ø–æ—á—Ç–∏ –æ—Ç –≤—Å–µ—Ö. –¢–æ—á–Ω–µ–µ, —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Copilot 1–°–û. –≠—Ç–∞ —à—Ç—É–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ç–≤–æ—Ä—è—Ç—å—Å—è –≤–∞—à–∏–º –≤–µ—Ä–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –∏ –ø—ã—Ç–∞—Ç—å—Å—è —Å—Ç–∞—Ç—å –≤–∞—à–∏–º –≤–µ—Ä–Ω—ã–º –¥—Ä—É–≥–æ–º. –ò–Ω–æ–≥–¥–∞ –¥–∞–∂–µ —É—Å–ø–µ—à–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±!


    ‚≠ê –û–°–ù–û–í–´

    –ì–ª–∞–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ): –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –¥–ª—è —Å–∞–º–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, —á—Ç–æ–±—ã –±—ã–ª –Ω–∞–≥–ª—è–¥–µ–Ω –ø—Ä–∏–Ω—Ü–∏–ø. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ (–∏ –¥–æ–ª–∂–Ω—ã!) —ç—Ç–æ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å–µ–±—è –∫–Ω–æ–ø–∫–æ–π ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª –Ω–∞–¥ –Ω–∏–º. –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ ‚Äî —Ç–∞–º –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ.

    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é (–ø–æ–ª–µ, –≥–¥–µ –≤—ã —Å–µ–π—á–∞—Å —á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç): –∑–¥–µ—Å—å –≤—ã —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç–µ –¥–µ—Ç–∞–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ ‚Äî –ò–ù–ù, —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, —á—Ç–æ –¥–µ–ª–∞–ª–∏ –∏ —Ç. –¥. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ ¬´–û—á–∏—Å—Ç–∏—Ç—å¬ª (–∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Ctrl + Shift + Backspace). Ctrl + Enter –≤—Å—Ç–∞–≤–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.

    –î—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏. –ò—Ö —Ç–æ–∂–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:

    ‚åØ "–ü—Ä–æ–≥—Ä–∞–º–º–∞ 1–°/–£–ü", "–°–ö–ó–ò", "1–°–û –õ–ö", "–í–µ–±-–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä": –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ —á–∞—Å—Ç—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏, –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.
    ‚åØ "–°—Å—ã–ª–∫–∏ 1–°": –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω—É–∂–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º –ø—Ä–æ–≥—Ä–∞–º–º—ã 1–° (–±—ã—Å—Ç—Ä–æ –∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤–ª—è–π—Ç–µ –≤ 1–° –ø–æ Shift + F11).
    ‚åØ "–í–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã": –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Ö –º–æ–∂–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    ‚åØ "–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã": –ù–∞—à–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    ‚åØ "–ó–∞–∫–ª–∞–¥–∫–∏": –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å—é–¥–∞ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî —Å—Å—ã–ª–∫–∏, —Ç–µ–∫—Å—Ç—ã, –∑–∞–º–µ—Ç–∫–∏. –ú–æ–∂–Ω–æ –∏ –Ω—É–∂–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–æ –ø–∞–ø–∫–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞.

    –°–∫—Ä—ã—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã: –ï—Å—Ç—å –µ—â–µ –¥–≤–µ –≤–∫–ª–∞–¥–∫–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–∏ —Å–∫—Ä—ã—Ç—ã. –ß—Ç–æ–±—ã –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏–∫–æ–Ω–∫–∞ —Å —à–µ—Å—Ç–µ—Ä–Ω–µ–π), –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏¬ª –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ:

    ‚åØ "–¢–∏–ø—ã –°–≠–î–û": –®–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –∫–æ–¥–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π –°–≠–î–û.
    ‚åØ "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–∞–±": –ù—É... –í—ã –ø–æ–Ω—è–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å —É–º–æ–º!


    üõ†Ô∏è –ü–û–õ–ï–ó–ù–´–ï –§–£–ù–ö–¶–ò–ò

    –¢–∞–π–º–µ—Ä (–≤ —à–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è): –£–¥–æ–±–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–æ—á–∏—Ö –Ω—É–∂–¥.

    –ò–∑–±—Ä–∞–Ω–Ω–æ–µ (–∏–∫–æ–Ω–∫–∞ —Å–æ –∑–≤–µ–∑–¥–æ–π –≤ —à–∞–ø–∫–µ): –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∑–∞–∫–ª–∞–¥–∫–∏ –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –í—Å–µ –æ–Ω–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–ª–∏–∫—É –Ω–∞ —ç—Ç—É –∏–∫–æ–Ω–∫—É.

    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (—Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É –∏–ª–∏ Alt + F): –ò—â–µ—Ç –ê–ë–°–û–õ–Æ–¢–ù–û –ü–û –í–°–ï–ú –¥–∞–Ω–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–∫–æ–Ω–∫–∞ —Å —à–µ—Å—Ç–µ—Ä–Ω–µ–π –∏–ª–∏ Alt + I):

    ‚åØ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É, –º–∞—Å—à—Ç–∞–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –æ—Ç—Å—Ç—É–ø—ã –∏ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤.
    ‚åØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É (—Å–≤–µ—Ç–ª–∞—è/—Ç–µ–º–Ω–∞—è/—Å–∏—Å—Ç–µ–º–Ω–∞—è) –∏–ª–∏ –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –µ–µ –∫–Ω–æ–ø–∫–æ–π –≤ —à–∞–ø–∫–µ.
    ‚åØ –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∫–ª–∞–¥–æ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ.
    ‚åØ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –¥–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

    –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∏–∫–æ–Ω–∫–∞ 'i' –∏–ª–∏ Ctrl + Shift + H): –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–æ –≤—Å–µ–º–∏ –±—ã—Å—Ç—Ä—ã–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ!

    –ò–º–ø–æ—Ä—Ç / –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö: –î–µ–ª–∏—Ç–µ—Å—å –±–∞–∑–æ–π —Å –∫–æ–ª–ª–µ–≥–∞–º–∏, –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å –∏–∑ –Ω–∏—Ö.

    –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ö–ª–∏–∫ –ø–æ –ª—é–±–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ (–∞–ª–≥–æ—Ä–∏—Ç–º–∞, –∑–∞–∫–ª–∞–¥–∫–∏ –∏ —Ç.–¥.) –æ—Ç–∫—Ä–æ–µ—Ç –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏. –í –Ω–µ–º –æ–±—ã—á–Ω–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª, ¬´–£–¥–∞–ª–∏—Ç—å¬ª, ¬´–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω¬ª.

    –°–∫—Ä–∏–Ω—à–æ—Ç—ã: –ö –º–Ω–æ–≥–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º (—à–∞–≥–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∑–∞–∫–ª–∞–¥–∫–∏) –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã. –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å/–î–æ–±–∞–≤–∏—Ç—å¬ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (Ctrl + V).


üß† –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

    –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–Ω–µ—Å—Ç–∏ Copilot –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç —É–¥–æ–±—Å—Ç–≤–æ:

    ‚åØ –î–ª—è Chrome/Edge: –ú–µ–Ω—é (—Ç—Ä–∏ —Ç–æ—á–∫–∏) ‚Üí –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Üí –°–æ–∑–¥–∞—Ç—å —è—Ä–ª—ã–∫...
    ‚åØ –î–ª—è –Ø–Ω–¥–µ–∫—Å –ë—Ä–∞—É–∑–µ—Ä–∞: –ú–µ–Ω—é (—Ç—Ä–∏ –ø–æ–ª–æ—Å–∫–∏) ‚Üí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Üí –î—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Üí –°–æ–∑–¥–∞—Ç—å —è—Ä–ª—ã–∫...

    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –∏ –≤—Å—è: –ü–æ—á—Ç–∏ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ Copilot –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å. –ù–µ –±–æ–π—Ç–µ—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –µ–≥–æ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã, —ç—Ç–æ –û–ß–ï–ù–¨ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ —Ä–∞–±–æ—Ç–µ.

    –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–ø–∫–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö/–≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.

    –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ–∫–æ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.

–¢–µ–ø–µ—Ä—å –í—ã –≥–æ—Ç–æ–≤—ã –ø–æ–∫–æ—Ä—è—Ç—å –≤–µ—Ä—à–∏–Ω—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏! –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –≤ Copilot. –ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ ‚Äî –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è.

–£–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ! –ò –ø–æ–º–Ω–∏—Ç–µ...
–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å –í–∞–º–∏ —Å–∏–ª–∞!`;



const NotificationService = {
    importantNotificationsContainer: null,
    activeImportantNotifications: new Map(),
    temporaryNotificationElement: null,
    temporaryNotificationHideTimeout: null,
    temporaryNotificationRemoveTimeout: null,
    defaultTemporaryDuration: 3000,
    FADE_DURATION_MS: 300,
    NOTIFICATION_WIDTH: '380px',
    TEMPORARY_NOTIFICATION_TOP: '20px',
    IMPORTANT_CONTAINER_TOP_WITH_TEMP: '90px',
    IMPORTANT_CONTAINER_TOP_NO_TEMP: '20px',
    isTemporaryNotificationVisible: false,

    init() {
        if (this.importantNotificationsContainer && document.body.contains(this.importantNotificationsContainer)) {
            console.log("NotificationService already initialized and container exists.");
            return;
        }

        let container = document.getElementById('important-notifications-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'important-notifications-container';
            document.body.appendChild(container);
        }
        this.importantNotificationsContainer = container;
        this._applyContainerStyles();
        this._updateImportantContainerPosition(false);
        console.log("NotificationService initialized.");
    },

    _applyContainerStyles() {
        if (!this.importantNotificationsContainer) return;
        const s = this.importantNotificationsContainer.style;
        s.position = 'fixed';
        s.right = '20px';
        s.width = this.NOTIFICATION_WIDTH;
        s.overflowY = 'auto';
        s.overflowX = 'hidden';
        s.zIndex = '199990';
        s.display = 'flex';
        s.flexDirection = 'column-reverse';
        s.gap = '10px';
        s.transition = 'top 0.3s ease-out, max-height 0.3s ease-out';
        this.importantNotificationsContainer.classList.add('custom-scrollbar');
    },

    _updateImportantContainerPosition(animate = true) {
        if (!this.importantNotificationsContainer) {
            console.warn("_updateImportantContainerPosition called but container is null.");
            return;
        }
        const newTop = this.isTemporaryNotificationVisible
            ? this.IMPORTANT_CONTAINER_TOP_WITH_TEMP
            : this.IMPORTANT_CONTAINER_TOP_NO_TEMP;

        this.importantNotificationsContainer.style.top = newTop;
        this.importantNotificationsContainer.style.maxHeight = `calc(100vh - ${parseFloat(newTop)}px - 20px)`;

        if (!animate) {
            this.importantNotificationsContainer.style.transition = 'none';
            requestAnimationFrame(() => {
                if (this.importantNotificationsContainer) {
                    this.importantNotificationsContainer.style.transition = 'top 0.3s ease-out, max-height 0.3s ease-out';
                }
            });
        }
        console.log(`Important container position updated. New top: ${newTop}, isTemporaryVisible: ${this.isTemporaryNotificationVisible}`);
    },

    add(message, type = 'info', options = {}) {
        const {
            duration = this.defaultTemporaryDuration,
            important = false,
            id = null,
            isDismissible = true,
            onClick = null,
            autoDismissDelay = null
        } = options;

        if (!this.importantNotificationsContainer && important) {
            this.init();
        }


        if (important) {
            this.showImportant(message, type, { id, isDismissible, onClick, autoDismissDelay });
        } else {
            this.showTemporary(message, type, duration, { onClick });
        }
    },

    showImportant(message, type, options = {}) {
        const { id, isDismissible = true, onClick, autoDismissDelay = null } = options;
        const notificationId = id || `important-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;

        if (id && this.activeImportantNotifications.has(id)) {
            const existing = this.activeImportantNotifications.get(id);
            const messageSpan = existing.element.querySelector('.notification-message-span');
            if (messageSpan && messageSpan.innerHTML !== (typeof linkify === 'function' ? linkify(message) : (typeof escapeHtml === 'function' ? escapeHtml(message) : message))) {
                messageSpan.innerHTML = typeof linkify === 'function' ? linkify(message) : (typeof escapeHtml === 'function' ? escapeHtml(message) : message);
            }
            if (existing.timeoutId) {
                clearTimeout(existing.timeoutId);
                existing.timeoutId = null;
            }
            if (autoDismissDelay && autoDismissDelay > 0 && isDismissible) {
                existing.timeoutId = setTimeout(() => this.dismissImportant(notificationId), autoDismissDelay);
                this.activeImportantNotifications.set(notificationId, { ...existing, timeoutId: existing.timeoutId });
            }
            existing.element.classList.add('notification-updated-shake');
            setTimeout(() => existing.element.classList.remove('notification-updated-shake'), 500);
            console.log(`Important notification with id ${id} updated.`);
            return;
        }

        if (!this.importantNotificationsContainer) this.init();

        const notificationElement = this._createNotificationElement(message, type, notificationId, true, isDismissible, onClick);
        this.importantNotificationsContainer.appendChild(notificationElement);

        requestAnimationFrame(() => {
            notificationElement.style.opacity = '1';
            notificationElement.style.transform = 'translateX(0)';
        });

        let timeoutIdForAutoDismiss = null;
        if (autoDismissDelay && autoDismissDelay > 0 && isDismissible) {
            timeoutIdForAutoDismiss = setTimeout(() => {
                this.dismissImportant(notificationId);
            }, autoDismissDelay);
        }

        this.activeImportantNotifications.set(notificationId, {
            element: notificationElement,
            data: { message, type, id: notificationId, isDismissible },
            timeoutId: timeoutIdForAutoDismiss
        });
    },

    dismissImportant(notificationId) {
        const notificationData = this.activeImportantNotifications.get(notificationId);
        if (notificationData && notificationData.element) {
            const el = notificationData.element;

            if (notificationData.timeoutId) {
                clearTimeout(notificationData.timeoutId);
            }

            el.style.opacity = '0';
            el.style.transform = 'translateX(100%)';
            el.style.maxHeight = `${el.offsetHeight}px`;
            requestAnimationFrame(() => {
                el.style.maxHeight = '0px';
                el.style.paddingTop = '0px';
                el.style.paddingBottom = '0px';
                el.style.marginTop = '0px';
                el.style.marginBottom = '0px';
                el.style.borderWidth = '0px';
                el.style.overflow = 'hidden';
            });


            setTimeout(() => {
                if (el.parentElement) {
                    el.remove();
                }
                this.activeImportantNotifications.delete(notificationId);
            }, this.FADE_DURATION_MS + 50);
        }
    },

    showTemporary(message, type, duration, options = {}) {
        const { onClick } = options;

        if (this.temporaryNotificationElement && document.body.contains(this.temporaryNotificationElement)) {
            console.log("Dismissing previous temporary notification before showing new one.");
            clearTimeout(this.temporaryNotificationHideTimeout);
            clearTimeout(this.temporaryNotificationRemoveTimeout);
            this._dismissTemporary(this.temporaryNotificationElement, this.temporaryNotificationElement.dataset.id, false);
            this.temporaryNotificationElement = null;
        } else {
            this.isTemporaryNotificationVisible = false;
        }


        const tempNotificationId = `temp-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
        const notificationElement = this._createNotificationElement(message, type, tempNotificationId, false, true, onClick);

        notificationElement.style.position = 'fixed';
        notificationElement.style.top = this.TEMPORARY_NOTIFICATION_TOP;
        notificationElement.style.right = '20px';
        notificationElement.style.zIndex = '200000';
        notificationElement.style.width = this.NOTIFICATION_WIDTH;
        notificationElement.style.willChange = 'transform, opacity';

        document.body.appendChild(notificationElement);
        this.temporaryNotificationElement = notificationElement;

        if (!this.isTemporaryNotificationVisible) {
            this.isTemporaryNotificationVisible = true;
            this._updateImportantContainerPosition();
        }


        requestAnimationFrame(() => {
            notificationElement.style.transform = 'translateX(0)';
            notificationElement.style.opacity = '1';
        });

        if (duration > 0) {
            this.temporaryNotificationHideTimeout = setTimeout(() => {
                this._dismissTemporary(notificationElement, tempNotificationId, true);
            }, duration);
        }
    },

    _dismissTemporary(element, id, updatePositionAfterDismiss) {
        if (!element || !document.body.contains(element)) {
            if (this.temporaryNotificationElement && this.temporaryNotificationElement.dataset.id === id) {
                this.isTemporaryNotificationVisible = false;
                this.temporaryNotificationElement = null;
                if (updatePositionAfterDismiss) this._updateImportantContainerPosition();
            }
            return;
        }

        element.style.transform = 'translateX(100%)';
        element.style.opacity = '0';

        clearTimeout(this.temporaryNotificationRemoveTimeout);
        this.temporaryNotificationRemoveTimeout = setTimeout(() => {
            if (document.body.contains(element)) element.remove();
            if (this.temporaryNotificationElement && this.temporaryNotificationElement.dataset.id === id) {
                this.temporaryNotificationElement = null;
                this.isTemporaryNotificationVisible = false;
                if (updatePositionAfterDismiss) {
                    this._updateImportantContainerPosition();
                }
            }
        }, this.FADE_DURATION_MS);
    },

    _createNotificationElement(message, type, notificationId, isImportant, isDismissible, onClickCallback) {
        const notificationElement = document.createElement('div');
        notificationElement.dataset.id = notificationId;

        let baseClasses = ['notification-item', `notification-type-${type}`];
        if (isImportant) baseClasses.push('important-notification');
        else baseClasses.push('temporary-notification');

        let bgColorClassesArr, iconClass, textColorClassesArr, borderColorClass;

        switch (type) {
            case "hyper-alert":
                bgColorClassesArr = ['bg-red-100', 'dark:bg-red-900/95'];
                textColorClassesArr = ['text-red-900', 'dark:text-yellow-200'];
                borderColorClass = 'border-yellow-400 dark:border-yellow-300';
                iconClass = 'fa-biohazard text-yellow-400 dark:text-yellow-300';
                baseClasses.push('notification-hyper-alert', 'border-4');
                break;
            case "error":
                bgColorClassesArr = ['bg-red-100', 'dark:bg-red-700/90'];
                textColorClassesArr = ['text-red-700', 'dark:text-red-100'];
                borderColorClass = 'border-red-500';
                iconClass = 'fa-times-circle text-red-500 dark:text-red-400';
                break;
            case "warning":
                bgColorClassesArr = ['bg-yellow-100', 'dark:bg-yellow-600/90'];
                textColorClassesArr = ['text-yellow-700', 'dark:text-yellow-50'];
                borderColorClass = 'border-yellow-500';
                iconClass = 'fa-exclamation-triangle text-yellow-500 dark:text-yellow-300';
                break;
            case "info":
                bgColorClassesArr = ['bg-blue-100', 'dark:bg-blue-700/90'];
                textColorClassesArr = ['text-blue-700', 'dark:text-blue-100'];
                borderColorClass = 'border-blue-500';
                iconClass = 'fa-info-circle text-blue-500 dark:text-blue-400';
                break;
            case "success":
            default:
                bgColorClassesArr = ['bg-green-100', 'dark:bg-green-700/90'];
                textColorClassesArr = ['text-green-700', 'dark:text-green-100'];
                borderColorClass = 'border-green-500';
                iconClass = 'fa-check-circle text-green-500 dark:text-green-400';
                break;
        }

        notificationElement.classList.add(
            'p-4', 'rounded-md', 'shadow-lg', 'flex', 'items-center',
            'justify-between', 'gap-3', 'border-l-4', 'box-border',
            ...baseClasses
        );
        if (borderColorClass) borderColorClass.split(' ').filter(cls => cls.trim()).forEach(cls => notificationElement.classList.add(cls));
        if (bgColorClassesArr && Array.isArray(bgColorClassesArr)) {
            bgColorClassesArr.forEach(cls => {
                cls.split(' ').filter(c => c.trim()).forEach(subCls => notificationElement.classList.add(subCls));
            });
        }
        if (textColorClassesArr && Array.isArray(textColorClassesArr)) {
            textColorClassesArr.forEach(cls => {
                cls.split(' ').filter(c => c.trim()).forEach(subCls => notificationElement.classList.add(subCls));
            });
        }

        notificationElement.style.transition = 'transform 0.3s ease-out, opacity 0.3s ease-out, margin-top 0.3s ease-out, margin-bottom 0.3s ease-out, padding-top 0.3s ease-out, padding-bottom 0.3s ease-out, border-width 0.3s ease-out, max-height 0.3s ease-out';
        notificationElement.style.opacity = '0';
        notificationElement.style.transform = 'translateX(100%)';

        if (isImportant) {
            notificationElement.style.width = '100%';
        }

        const contentWrapper = document.createElement('div');
        contentWrapper.className = 'flex items-center flex-grow min-w-0';

        const iconElement = document.createElement('i');
        const [mainIconClass, ...colorIconClasses] = iconClass.split(' ');
        iconElement.className = `fas ${mainIconClass} mr-3 text-xl flex-shrink-0`;
        colorIconClasses.forEach(cls => iconElement.classList.add(cls));

        contentWrapper.appendChild(iconElement);

        const messageSpan = document.createElement('span');
        messageSpan.className = 'notification-message-span flex-1 text-sm break-words';
        messageSpan.innerHTML = typeof linkify === 'function' ? linkify(message) : (typeof escapeHtml === 'function' ? escapeHtml(message) : message);
        contentWrapper.appendChild(messageSpan);

        notificationElement.appendChild(contentWrapper);

        if (isDismissible) {
            const closeButton = document.createElement('button');
            closeButton.setAttribute('type', 'button');
            closeButton.setAttribute('aria-label', '–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
            closeButton.className = 'ml-3 p-1 flex-shrink-0 rounded-full hover:bg-black/10 dark:hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-current self-center';
            closeButton.innerHTML = `<i class="fas fa-times fa-fw text-base"></i>`;

            closeButton.addEventListener('click', (e) => {
                e.stopPropagation();
                if (isImportant) {
                    this.dismissImportant(notificationId);
                } else {
                    this._dismissTemporary(notificationElement, notificationId, true);
                }
            });
            notificationElement.appendChild(closeButton);
        }

        if (typeof onClickCallback === 'function') {
            notificationElement.style.cursor = 'pointer';
            notificationElement.addEventListener('click', (e) => {
                if (e.target.closest('button')) return;
                onClickCallback();
            });
        }
        return notificationElement;
    }
};


const ExportService = {
    isExporting: false,
    styleElement: null,

    init() {
        if (this.styleElement) return;

        this.styleElement = document.createElement('style');
        this.styleElement.id = 'export-pdf-styles';
        this.styleElement.textContent = `
        @media print {
            .export-to-pdf-content, .export-to-pdf-content * {
                -webkit-print-color-adjust: exact !important;
                color-adjust: exact !important;
            }
        }
        body > .export-pdf-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 210mm;
            background-color: #ffffff;
            opacity: 0;
            pointer-events: none;
            z-index: -1;
        }
        .export-to-pdf-content {
            color: #111827;
            background-color: #ffffff;
            font-family: 'Times New Roman', serif;
            padding: 0;
            box-sizing: border-box;
        }
        .export-to-pdf-content .dark, .export-to-pdf-content .dark\\:bg-gray-800 {
             background-color: #ffffff;
        }
        .export-to-pdf-content h1, .export-to-pdf-content h2, .export-to-pdf-content h3, .export-to-pdf-content h4 {
            color: #000000 !important;
            page-break-after: avoid;
        }
        .export-to-pdf-content p, .export-to-pdf-content li, .export-to-pdf-content span, .export-to-pdf-content div {
             color: #111827 !important;
        }
        .export-to-pdf-content a {
            color: #5858da !important;
            text-decoration: underline !important;
        }
        .export-to-pdf-content .algorithm-step, .export-to-pdf-content .reglament-item {
            page-break-inside: avoid;
            border: 1px solid #e5e7eb;
            box-shadow: none;
            background-color: #f9fafb;
        }
        .export-to-pdf-content code, .export-to-pdf-content pre {
             background-color: #f3f4f6 !important;
             border: 1px solid #d1d5db !important;
             color: #1f2937 !important;
        }
        .export-to-pdf-content button,
        .export-to-pdf-content .fav-btn-placeholder-modal-reglament,
        .export-to-pdf-content .toggle-favorite-btn,
        .export-to-pdf-content .view-screenshot-btn,
        .export-to-pdf-content #noInnLink_main_1,
        .export-to-pdf-content .copyable-step-active {
            display: none !important;
        }
        .export-pdf-image-container {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px dashed #d1d5db;
            page-break-inside: avoid;
        }
        .export-pdf-image-container img {
            max-width: 100%;
            height: auto;
            display: block;
            margin-top: 0.5rem;
            border: 1px solid #d1d5db;
        }
    `;
        document.head.appendChild(this.styleElement);
        console.log("ExportService initialized with print styles (FIXED).");
    },

    async exportElementToPdf(element, filename = 'document', context = {}) {
        if (this.isExporting) {
            NotificationService.add("–≠–∫—Å–ø–æ—Ä—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.", "warning");
            return;
        }
        if (!element) {
            NotificationService.add("–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error");
            console.error("exportElementToPdf: 'element' is null or undefined.");
            return;
        }
        if (typeof html2pdf === 'undefined') {
            NotificationService.add("–û—à–∏–±–∫–∞: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.", "error", { important: true });
            console.error("html2pdf library is not available.");
            return;
        }

        this.isExporting = true;
        loadingOverlayManager.createAndShow();
        loadingOverlayManager.updateProgress(10, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É...");

        const cleanFilename = filename.replace(/[^a-z–∞-—è0-9\s-_]/gi, '').trim() || 'export';
        const finalFilename = `${cleanFilename}.pdf`;

        const container = document.createElement('div');
        container.className = 'export-pdf-container';

        const clone = element.cloneNode(true);
        clone.classList.add('export-to-pdf-content');

        clone.style.maxHeight = 'none';
        clone.style.height = 'auto';
        clone.style.overflow = 'visible';

        try {
            await new Promise(resolve => setTimeout(resolve, 50));
            loadingOverlayManager.updateProgress(20, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...");

            if (context.type === 'algorithm' && context.data && Array.isArray(context.data.steps)) {
                const algorithmData = context.data;
                const stepsInClone = clone.querySelectorAll('.algorithm-step');

                const allImageLoadPromises = [];

                const blobToBase64 = (blob) => new Promise((resolve, reject) => {
                    if (!blob || !(blob instanceof Blob)) {
                        return reject(new Error('Input is not a valid Blob object.'));
                    }
                    const reader = new FileReader();
                    reader.onload = () => resolve(reader.result);
                    reader.onerror = () => reject(new Error('FileReader failed to read the blob.'));
                    reader.readAsDataURL(blob);
                });

                for (let i = 0; i < algorithmData.steps.length; i++) {
                    const stepData = algorithmData.steps[i];
                    const stepElementInClone = stepsInClone[i];

                    if (stepElementInClone && Array.isArray(stepData.screenshotIds) && stepData.screenshotIds.length > 0) {
                        const screenshotPromises = stepData.screenshotIds.map(id => getFromIndexedDB('screenshots', id));
                        const screenshots = (await Promise.all(screenshotPromises)).filter(Boolean);

                        if (screenshots.length > 0) {
                            const imageContainer = document.createElement('div');
                            imageContainer.className = 'export-pdf-image-container';

                            for (const screenshot of screenshots) {
                                if (screenshot.blob instanceof Blob) {
                                    const imageLoadPromise = new Promise(async (resolve, reject) => {
                                        try {
                                            const base64Data = await blobToBase64(screenshot.blob);
                                            const img = document.createElement('img');
                                            img.alt = `–°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —à–∞–≥–∞ ${i + 1}`;

                                            img.onload = () => {
                                                console.log(`[PDF Export] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–∞ ${i} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ DOM.`);
                                                resolve();
                                            };
                                            img.onerror = () => {
                                                console.error(`[PDF Export] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —à–∞–≥–∞ ${i}.`);
                                                reject(new Error(`Image loading failed for step ${i}`));
                                            };

                                            img.src = base64Data;
                                            imageContainer.appendChild(img);
                                        } catch (error) {
                                            console.error(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Blob –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ${screenshot.id}:`, error);
                                            reject(error);
                                        }
                                    });
                                    allImageLoadPromises.push(imageLoadPromise);
                                }
                            }
                            stepElementInClone.appendChild(imageContainer);
                        }
                    }
                }

                if (allImageLoadPromises.length > 0) {
                    console.log(`[PDF Export] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ ${allImageLoadPromises.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);
                    await Promise.all(allImageLoadPromises);
                    console.log(`[PDF Export] –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.`);
                }
            }

            loadingOverlayManager.updateProgress(50, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF...");
            document.body.appendChild(container);
            container.appendChild(clone);

            await new Promise(resolve => requestAnimationFrame(() => requestAnimationFrame(resolve)));
            console.log("[PDF Export] Render frame has passed, proceeding to generate PDF.");

            const opt = {
                margin: [10, 7, 10, 7],
                filename: finalFilename,
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: {
                    scale: 2,
                    useCORS: true,
                    logging: false,
                    scrollY: 0,
                    backgroundColor: '#ffffff'
                },
                jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
                pagebreak: { mode: ['css', 'avoid-all'], before: '.page-break-before' }
            };

            await html2pdf().from(clone).set(opt).save();

            loadingOverlayManager.updateProgress(90, "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.");
            NotificationService.add("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PDF.", "success");

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ PDF:", error);
            NotificationService.add(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ PDF: ${error.message}`, "error", { important: true });
        } finally {
            if (document.body.contains(container)) {
                document.body.removeChild(container);
            }
            loadingOverlayManager.updateProgress(100);
            await loadingOverlayManager.hideAndDestroy();
            this.isExporting = false;
        }
    }
};

ExportService.init();


const UNIFIED_FULLSCREEN_MODAL_CLASSES = {
    modal: ['p-0'],
    innerContainer: ['w-screen', 'h-screen', 'max-w-none', 'max-h-none', 'rounded-none', 'shadow-none'],
    contentArea: ['h-full', 'max-h-full', 'p-6']
};


const algorithmDetailModalConfig = {
    modalId: 'algorithmModal',
    buttonId: 'toggleFullscreenViewBtn',
    classToggleConfig: {
        normal: { modal: ['p-4', 'sm:p-6', 'md:p-8'], innerContainer: ['max-w-7xl', 'rounded-lg', 'shadow-xl'], contentArea: ['max-h-[calc(90vh-150px)]', 'p-content'] },
        fullscreen: {
            modal: UNIFIED_FULLSCREEN_MODAL_CLASSES.modal,
            innerContainer: UNIFIED_FULLSCREEN_MODAL_CLASSES.innerContainer,
            contentArea: UNIFIED_FULLSCREEN_MODAL_CLASSES.contentArea
        }
    },
    innerContainerSelector: '.bg-white.dark\\:bg-gray-800',
    contentAreaSelector: '#algorithmSteps'
};


const bookmarkModalConfigGlobal = {
    modalId: 'bookmarkModal',
    buttonId: 'toggleFullscreenBookmarkBtn',
    classToggleConfig: {
        normal: {
            modal: ['p-4'],
            innerContainer: ['max-w-2xl', 'max-h-[90vh]', 'rounded-lg', 'shadow-xl'],
            contentArea: ['p-content', 'overflow-y-auto', 'flex-1', 'min-h-0']
        },
        fullscreen: {
            modal: UNIFIED_FULLSCREEN_MODAL_CLASSES.modal,
            innerContainer: UNIFIED_FULLSCREEN_MODAL_CLASSES.innerContainer,
            contentArea: [...UNIFIED_FULLSCREEN_MODAL_CLASSES.contentArea, 'flex', 'flex-col']
        }
    },
    innerContainerSelector: '.modal-inner-container',
    contentAreaSelector: '.modal-content-area'
};


const editAlgorithmModalConfig = {
    modalId: 'editModal',
    buttonId: 'toggleFullscreenEditBtn',
    classToggleConfig: {
        normal: { modal: ['p-4'], innerContainer: ['max-w-5xl', 'max-h-[95vh]', 'rounded-lg', 'shadow-xl'], contentArea: ['p-content'] },
        fullscreen: {
            modal: UNIFIED_FULLSCREEN_MODAL_CLASSES.modal,
            innerContainer: UNIFIED_FULLSCREEN_MODAL_CLASSES.innerContainer,
            contentArea: [...UNIFIED_FULLSCREEN_MODAL_CLASSES.contentArea, 'flex', 'flex-col']
        }
    },
    innerContainerSelector: '.bg-white.dark\\:bg-gray-800',
    contentAreaSelector: '.p-content.overflow-y-auto.flex-1'
};


const addAlgorithmModalConfig = {
    modalId: 'addModal',
    buttonId: 'toggleFullscreenAddBtn',
    classToggleConfig: {
        normal: { modal: ['p-4'], innerContainer: ['max-w-4xl', 'max-h-[90vh]', 'rounded-lg', 'shadow-xl'], contentArea: ['p-content', 'bg-gray-100', 'dark:bg-gray-700'] },
        fullscreen: {
            modal: UNIFIED_FULLSCREEN_MODAL_CLASSES.modal,
            innerContainer: UNIFIED_FULLSCREEN_MODAL_CLASSES.innerContainer,
            contentArea: [...UNIFIED_FULLSCREEN_MODAL_CLASSES.contentArea, 'flex', 'flex-col', 'bg-gray-100', 'dark:bg-gray-700']
        }
    },
    innerContainerSelector: '.bg-white.dark\\:bg-gray-800',
    contentAreaSelector: '.p-content.overflow-y-auto.flex-1'
};



const reglamentDetailModalConfig = {
    modalId: 'reglamentDetailModal',
    buttonId: 'toggleFullscreenReglamentDetailBtn',
    classToggleConfig: {
        normal: {
            modal: ['p-4'],
            innerContainer: ['w-[95%]', 'max-w-4xl', 'max-h-[90vh]', 'rounded-lg', 'shadow-xl'],
            contentArea: ['p-6']
        },
        fullscreen: UNIFIED_FULLSCREEN_MODAL_CLASSES
    },
    innerContainerSelector: '.bg-white.dark\\:bg-gray-800',
    contentAreaSelector: '#reglamentDetailContent'
};



const reglamentModalConfigGlobal = {
    modalId: 'reglamentModal',
    buttonId: 'toggleFullscreenReglamentBtn',
    classToggleConfig: {
        normal: { modal: ['p-4'], innerContainer: ['w-[95%]', 'max-w-5xl', 'h-[90vh]', 'rounded-lg', 'shadow-xl'], contentArea: ['p-6'] },
        fullscreen: {
            modal: UNIFIED_FULLSCREEN_MODAL_CLASSES.modal,
            innerContainer: UNIFIED_FULLSCREEN_MODAL_CLASSES.innerContainer,
            contentArea: [...UNIFIED_FULLSCREEN_MODAL_CLASSES.contentArea, 'flex', 'flex-col']
        }
    },
    innerContainerSelector: '.modal-inner-container',
    contentAreaSelector: '.modal-content-area'
};


const bookmarkDetailModalConfigGlobal = {
    modalId: 'bookmarkDetailModal',
    buttonId: 'toggleFullscreenBookmarkDetailBtn',
    classToggleConfig: {
        normal: {
            modal: ['p-4'],
            innerContainer: ['max-w-3xl', 'max-h-[90vh]', 'rounded-lg', 'shadow-xl'],
            contentArea: ['p-6']
        },
        fullscreen: {
            modal: UNIFIED_FULLSCREEN_MODAL_CLASSES.modal,
            innerContainer: UNIFIED_FULLSCREEN_MODAL_CLASSES.innerContainer,
            contentArea: UNIFIED_FULLSCREEN_MODAL_CLASSES.contentArea
        }
    },
    innerContainerSelector: '.bg-white.dark\\:bg-gray-800',
    contentAreaSelector: '#bookmarkDetailOuterContent'
};


const hotkeysModalConfig = {
    modalId: 'hotkeysModal',
    buttonId: 'toggleFullscreenHotkeysBtn',
    classToggleConfig: {
        normal: { modal: ['p-4'], innerContainer: ['max-w-3xl', 'max-h-[90vh]', 'rounded-lg', 'shadow-xl'], contentArea: ['p-6'] },
        fullscreen: {
            modal: UNIFIED_FULLSCREEN_MODAL_CLASSES.modal,
            innerContainer: UNIFIED_FULLSCREEN_MODAL_CLASSES.innerContainer,
            contentArea: UNIFIED_FULLSCREEN_MODAL_CLASSES.contentArea
        }
    },
    innerContainerSelector: '.bg-white.dark\\:bg-gray-800',
    contentAreaSelector: '.p-6.overflow-y-auto.flex-1'
};


const getVisibleModals = () =>
    [...document.querySelectorAll('div.fixed.inset-0.bg-black.bg-opacity-50:not(.hidden)')];

const getTopmostModal = (modals) => {
    if (!modals || modals.length === 0) return null;
    return modals.reduce((top, current) => {
        if (!top) return current;
        const topZ = parseInt(window.getComputedStyle(top).zIndex, 10) || 0;
        const currentZ = parseInt(window.getComputedStyle(current).zIndex, 10) || 0;
        return currentZ >= topZ ? current : top;
    }, modals[0]);
};



const storeConfigs = [
    {
        name: 'algorithms',
        options: { keyPath: 'section' }
    },
    {
        name: 'links',
        options: { keyPath: 'id', autoIncrement: true },
        indexes: [{ name: 'category', keyPath: 'category', options: { unique: false } }]
    },
    {
        name: 'bookmarks',
        options: { keyPath: 'id', autoIncrement: true },
        indexes: [{ name: 'folder', keyPath: 'folder', options: { unique: false } }]
    },
    {
        name: 'reglaments',
        options: { keyPath: 'id', autoIncrement: true },
        indexes: [{ name: 'category', keyPath: 'category', options: { unique: false } }]
    },
    {
        name: 'clientData',
        options: { keyPath: 'id' }
    },
    {
        name: 'preferences',
        options: { keyPath: 'id' }
    },
    {
        name: 'bookmarkFolders',
        options: { keyPath: 'id', autoIncrement: true }
    },
    {
        name: 'extLinks',
        options: { keyPath: 'id', autoIncrement: true },
        indexes: [{ name: 'category', keyPath: 'category', options: { unique: false } }]
    },
    {
        name: 'extLinkCategories',
        options: { keyPath: 'id', autoIncrement: true },
        indexes: [{ name: 'name', keyPath: 'name', options: { unique: true } }]
    },
    {
        name: 'searchIndex',
        options: { keyPath: 'word' }
    },
    {
        name: 'screenshots',
        options: { keyPath: 'id', autoIncrement: true },
        indexes: [
            { name: 'parentId', keyPath: 'parentId', options: { unique: false } },
            { name: 'parentType', keyPath: 'parentType', options: { unique: false } }
        ]
    },
    {
        name: 'blacklistedClients',
        options: { keyPath: 'id', autoIncrement: true },
        indexes: [
            { name: 'inn', keyPath: 'inn', options: { unique: false } },
            { name: 'phone', keyPath: 'phone', options: { unique: false } },
            { name: 'organizationName', keyPath: 'organizationNameLc', options: { unique: false } },
            { name: 'level', keyPath: 'level', options: { unique: false } },
            { name: 'dateAdded', keyPath: 'dateAdded', options: { unique: false } }
        ]
    },
    {
        name: 'favorites',
        options: { keyPath: 'id', autoIncrement: true },
        indexes: [
            { name: 'unique_favorite', keyPath: ['itemType', 'originalItemId'], options: { unique: true } },
            { name: 'itemType', keyPath: 'itemType', options: { unique: false } },
            { name: 'dateAdded', keyPath: 'dateAdded', options: { unique: false } }
        ]
    }
];


let algorithms = {
    main: {
        id: 'main',
        title: "–ì–ª–∞–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã (–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã)",
        steps: [
            {
                title: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                description: "–û–±–æ–∑–Ω–∞—á—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É, –∫—É–¥–∞ –æ–Ω –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞.",
                example: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ 1–°-–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, –º–µ–Ω—è –∑–æ–≤—É—Ç –°–∏—Ä–µ–Ω–µ–≤—ã–π_–¢—É—Ä–±–æ–±—É–ª—å–±—É–ª—å–∫–∏–≤–∞—Ç–µ–ª—å. –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!",
                isCopyable: true,
                additionalInfoText: '',
                additionalInfoShowTop: false,
                additionalInfoShowBottom: false
            },
            {
                title: "–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ò–ù–ù",
                description: "–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.",
                example: "–ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.",
                type: 'inn_step',
                isCopyable: false,
                additionalInfoText: '',
                additionalInfoShowTop: false,
                additionalInfoShowBottom: false
            },
            {
                title: "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã",
                description: "–í—ã—è—Å–Ω–∏—Ç–µ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∑–∞–¥–∞–≤–∞—è —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –í–∞–∂–Ω–æ –≤—ã—è—Å–Ω–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã.",
                example: {
                    type: 'list',
                    intro: '–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:',
                    items: [
                        "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏.",
                        "–ü—Ä–∏ –∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞?"
                    ]
                },
                isCopyable: false,
                additionalInfoText: '',
                additionalInfoShowTop: false,
                additionalInfoShowBottom: false
            },
            {
                title: "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
                description: "–ß–µ—Ç–∫–æ –¥–ª—è —Å–µ–±—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ) –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ä–∞–∑–¥–µ–ª—É –≤ –ø–æ–º–æ—â–Ω–∏–∫–µ (–ª–∏–±–æ —Å—Ç–∞—Ç—å–µ –Ω–∞ track.astral.ru) —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é.",
                isCopyable: false,
                additionalInfoText: '',
                additionalInfoShowTop: false,
                additionalInfoShowBottom: false
            }
        ]
    },
    program: [],
    skzi: [],
    lk1c: [],
    webReg: []
};


const loadingOverlayManager = {
    overlayElement: null,
    styleElement: null,
    animationRunner: null,
    isSpawning: false,
    spawnProgress: 0,
    spawnDuration: 1500,
    spawnStartTime: 0,
    fadeOutDuration: 500,
    currentProgressValue: 0,

    createAndShow() {
        if (this.overlayElement && document.body.contains(this.overlayElement)) {
            console.log("Custom loading overlay already exists. Resetting progress and text.");
            this.updateProgress(0, "–ó–∞–≥—Ä—É–∑–∫–∞");
            this.overlayElement.style.opacity = '1';
            this.overlayElement.style.display = 'flex';
            if (this.animationRunner && !this.animationRunner.isRunning) {
                this.animationRunner.start();
            }
            return;
        }

        if (this.overlayElement && document.body.contains(this.overlayElement)) {
            this.overlayElement.remove();
        }
        if (this.styleElement && document.head.contains(this.styleElement)) {
            this.styleElement.remove();
        }

        const overlayHTML = `
        <canvas id="loadingCanvas"></canvas>
        <div class="loading-text" id="loadingText">–ó–∞–≥—Ä—É–∑–∫–∞<span id="animated-dots"></span></div>
        <div class="progress-indicator-container">
            <div class="progress-bar-line-track">
                <div class="progress-bar-line" id="progressBarLine"></div>
            </div>
            <div class="progress-percentage-text" id="progressPercentageText">0%</div>
        </div>
    `;

        const overlayCSS = `
        #custom-loading-overlay {
            margin: 0;
            overflow: hidden;
            height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            position: relative;
        }

        #loadingCanvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1; 
        }

        .loading-text {
            position: absolute;
            bottom: 12%;
            left: 50%;
            transform: translateX(-50%);
            max-width: 90%;
            padding: 0 20px;
            box-sizing: border-box;
            font-size: 20px;
            letter-spacing: 1px;
            line-height: 1.4;
            font-weight: 600;
            z-index: 10;
            background: linear-gradient(120deg, #8A2BE2, #4B0082, rgb(80, 0, 186), #4B0082, #8A2BE2);
            background-size: 250% 100%;
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            text-fill-color: transparent;
            animation: gradient-text-flow-smooth 4s linear infinite;
            text-align: center;
        }

        #animated-dots {
            display: inline-block;
            min-width: 25px;
            text-align: left;
        }
        
        #animated-dots::before {
            content: ".";
            animation: ellipsis-content-for-span 1.5s infinite steps(1, end);
        }

        .progress-indicator-container {
            position: absolute;
            bottom: 5%;
            left: 50%;
            transform: translateX(-50%);
            width: 280px; 
            display: flex;
            flex-direction: column;
            align-items: center;
            z-index: 10;
        }

        .progress-bar-line-track {
            width: 100%;
            height: 6px; 
            background-color: rgba(138, 43, 226, 0.15); 
            border-radius: 3px;
            margin-bottom: 8px; 
            overflow: hidden;
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
        }

        .progress-bar-line {
            width: 0%; 
            height: 100%;
            background: linear-gradient(90deg, #8A2BE2, #A020F0, #4B0082, #A020F0, #8A2BE2); 
            background-size: 300% 100%; 
            border-radius: 3px;
            transition: width 0.15s linear;
            animation: progress-gradient-flow 2s linear infinite;
        }
        
        @keyframes progress-gradient-flow {
            0% { background-position: 0% center; }
            100% { background-position: -300% center; } 
        }

        .progress-percentage-text {
            font-size: 14px; 
            font-weight: 600; 
            letter-spacing: 0.5px;
            background: linear-gradient(120deg, #9333ea, #c084fc, #9333ea);
            background-size: 200% 100%;
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            text-fill-color: transparent;
            animation: gradient-text-flow-smooth 3s linear infinite;
        }

        @keyframes gradient-text-flow-smooth {
            0% { background-position: 0% center; }
            100% { background-position: -250% center; }
        }

        @keyframes ellipsis-content-for-span {
            0% { content: "."; }
            33% { content: ".."; }
            66% { content: "..."; }
            100% { content: "."; }
        }
    `;

        this.overlayElement = document.createElement('div');
        this.overlayElement.id = 'custom-loading-overlay';
        this.overlayElement.innerHTML = overlayHTML;

        this.overlayElement.style.position = 'fixed';
        this.overlayElement.style.top = '0';
        this.overlayElement.style.left = '0';
        this.overlayElement.style.width = '100%';
        this.overlayElement.style.height = '100%';
        this.overlayElement.style.zIndex = '99999';
        this.overlayElement.style.backgroundColor = '#0a0a1a';
        this.overlayElement.style.display = 'flex';
        this.overlayElement.style.justifyContent = 'center';
        this.overlayElement.style.alignItems = 'center';


        this.styleElement = document.createElement('style');
        this.styleElement.id = 'custom-loading-overlay-styles';
        this.styleElement.textContent = overlayCSS;

        document.head.appendChild(this.styleElement);
        document.body.appendChild(this.overlayElement);

        this.isSpawning = true;
        this.spawnStartTime = performance.now();
        this.spawnProgress = 0;

        const canvas = this.overlayElement.querySelector('#loadingCanvas');
        if (canvas) {
            const { startAnimation, stopAnimation, resizeHandler } = this._encapsulateAnimationScript(canvas, this);
            this.animationRunner = { start: startAnimation, stop: stopAnimation, resize: resizeHandler, isRunning: false };
            this.animationRunner.start();
            this.animationRunner.isRunning = true;
            window.addEventListener('resize', this.animationRunner.resize);
        } else {
            console.error("Canvas —ç–ª–µ–º–µ–Ω—Ç #loadingCanvas –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –æ–≤–µ—Ä–ª–µ–µ!");
        }

        this.updateProgress(0, "–ó–∞–≥—Ä—É–∑–∫–∞");
        console.log("Custom loading overlay with progress bar (re-positioned loading text) created and shown.");
    },

    async hideAndDestroy() {
        console.log("[loadingOverlayManager.hideAndDestroy ASYNC V3] –ù–∞—á–∞–ª–æ —Å–∫—Ä—ã—Ç–∏—è –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è.");
        if (this.animationRunner) {
            if (typeof this.animationRunner.stop === 'function') {
                this.animationRunner.stop();
            }
            if (typeof this.animationRunner.resize === 'function') {
                window.removeEventListener('resize', this.animationRunner.resize);
            }
            this.animationRunner.isRunning = false;
            console.log("[loadingOverlayManager.hideAndDestroy ASYNC V3] –ê–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Å–ª—É—à–∞—Ç–µ–ª—å resize —É–¥–∞–ª–µ–Ω.");
        }

        const overlayPromise = new Promise(resolve => {
            if (this.overlayElement && document.body.contains(this.overlayElement)) {
                this.overlayElement.style.opacity = '0';
                console.log("[loadingOverlayManager.hideAndDestroy ASYNC V3] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å 0, –æ–∂–∏–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏.");

                const currentOverlayElement = this.overlayElement;

                setTimeout(() => {
                    if (document.body.contains(currentOverlayElement)) {
                        currentOverlayElement.remove();
                        console.log("[loadingOverlayManager.hideAndDestroy ASYNC V3] –≠–ª–µ–º–µ–Ω—Ç –æ–≤–µ—Ä–ª–µ—è —É–¥–∞–ª–µ–Ω –∏–∑ DOM.");
                    }
                    if (this.overlayElement === currentOverlayElement) {
                        this.overlayElement = null;
                    }
                    resolve();
                }, this.fadeOutDuration);
            } else {
                console.log("[loadingOverlayManager.hideAndDestroy ASYNC V3] –û–≤–µ—Ä–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –≤ DOM, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–º–∏—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.");
                if (this.overlayElement) this.overlayElement = null;
                resolve();
            }
        });

        if (this.styleElement && document.head.contains(this.styleElement)) {
            this.styleElement.remove();
            this.styleElement = null;
            console.log("[loadingOverlayManager.hideAndDestroy ASYNC V3] –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∏–ª–µ–π —É–¥–∞–ª–µ–Ω.");
        }

        this.animationRunner = null;
        this.isSpawning = false;
        this.spawnProgress = 0;
        this.currentProgressValue = 0;

        await overlayPromise;
        console.log("[loadingOverlayManager.hideAndDestroy ASYNC V3] –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω.");
    },

    updateProgress(percentage, message = null) {
        if (!this.overlayElement) {
            return;
        }

        const progressBarLine = this.overlayElement.querySelector('#progressBarLine');
        const progressPercentageText = this.overlayElement.querySelector('#progressPercentageText');
        const loadingTextElement = this.overlayElement.querySelector('#loadingText');

        const p = Math.max(0, Math.min(100, parseFloat(percentage) || 0));
        this.currentProgressValue = p;

        if (progressBarLine) {
            progressBarLine.style.width = `${p}%`;
        }
        if (progressPercentageText) {
            progressPercentageText.textContent = `${Math.round(p)}%`;
        }

        if (message && loadingTextElement) {
            const animatedDotsSpan = loadingTextElement.querySelector('#animated-dots');
            if (loadingTextElement.firstChild && loadingTextElement.firstChild.nodeType === Node.TEXT_NODE) {
                loadingTextElement.firstChild.nodeValue = message;
            } else {
                const textNode = document.createTextNode(message);
                if (animatedDotsSpan) {
                    loadingTextElement.insertBefore(textNode, animatedDotsSpan);
                } else {
                    loadingTextElement.textContent = '';
                    loadingTextElement.appendChild(textNode);
                }
            }
            if (animatedDotsSpan && !loadingTextElement.contains(animatedDotsSpan)) {
                loadingTextElement.appendChild(animatedDotsSpan);
            }
        }
    },

    _encapsulateAnimationScript(canvasElement, manager) {
        let localAnimationFrameId = null;
        const ctx = canvasElement.getContext('2d');
        let width_anim, height_anim, centerX_anim, centerY_anim;
        let particles_anim = [];
        let globalTime_anim = 0;
        let rotationX_anim = 0;
        let rotationY_anim = 0;

        const easeOutCubic = t => 1 - Math.pow(1 - t, 3);

        const config_anim = {
            particleCount: 2000,
            sphereBaseRadius: 4,
            focalLength: 250,
            rotationSpeedX: 0.0003,
            rotationSpeedY: 0.0020,
            breathAmplitude: 0.09,
            breathSpeed: 0.01,
            petalCount: 15,
            petalStrength: 0.20,
            baseParticleMinSize: 0.5,
            baseParticleMaxSize: 1,
            colorPalette: [
                [140, 70, 200, 1], [170, 90, 220, 0.9], [110, 50, 180, 0.9],
                [190, 100, 230, 0.95], [100, 100, 230, 1], [70, 70, 190, 0.95],
                [220, 150, 240, 0.85]
            ],
            backgroundColor: 'rgba(0, 0, 0, 0)',
            spawnIndigoColor: [75, 0, 130],
            spawnGlowBaseIntensity: 0.8,
            spawnGlowRadiusFactorBase: 2.0,
            spawnGlowRadiusFactorExtra: 3.0
        };

        class Particle_anim {
            constructor() {
                const u = Math.random(); const v = Math.random();
                const theta = 2 * Math.PI * u; const phi = Math.acos(2 * v - 1);
                this.baseR_factor = 0.75 + Math.random() * 0.25;
                const petalModulation = 1 + config_anim.petalStrength * Math.sin(phi) * Math.cos(config_anim.petalCount * theta + Math.PI / (Math.random() > 0.5 ? 2 : 1));
                const effectiveR_factor = this.baseR_factor * petalModulation;
                this.x0 = effectiveR_factor * Math.sin(phi) * Math.cos(theta);
                this.y0 = effectiveR_factor * Math.sin(phi) * Math.sin(theta);
                this.z0 = effectiveR_factor * Math.cos(phi);
                const colorData = config_anim.colorPalette[Math.floor(Math.random() * config_anim.colorPalette.length)];
                this.color_r = colorData[0]; this.color_g = colorData[1]; this.color_b = colorData[2]; this.baseAlphaMultiplier = colorData[3];
                this.baseSize = config_anim.baseParticleMinSize + Math.random() * (config_anim.baseParticleMaxSize - config_anim.baseParticleMinSize);
                this.noiseAmp = 0.03 + Math.random() * 0.04; this.noiseFreq = 0.005 + Math.random() * 0.01;
                this.noisePhaseX = Math.random() * Math.PI * 2; this.noisePhaseY = Math.random() * Math.PI * 2; this.noisePhaseZ = Math.random() * Math.PI * 2;
                this.screenX = 0; this.screenY = 0; this.projectedSize = 0; this.alphaFactor = 0; this.depth = 0;
                this.currentDisplaySize = 0;
            }

            projectAndTransform(currentSphereRadius, breathPulse, spawnProgress) {
                const timeBasedNoisePhase = globalTime_anim * this.noiseFreq;
                const dX = Math.sin(this.noisePhaseX + timeBasedNoisePhase) * this.noiseAmp;
                const dY = Math.cos(this.noisePhaseY + timeBasedNoisePhase) * this.noiseAmp;
                const dZ = Math.sin(this.noisePhaseZ + timeBasedNoisePhase) * this.noiseAmp;
                let x = this.x0 + dX; let y = this.y0 + dY; let z = this.z0 + dZ;
                let tempX_rotY = x * Math.cos(rotationY_anim) - z * Math.sin(rotationY_anim);
                let tempZ_rotY = x * Math.sin(rotationY_anim) + z * Math.cos(rotationY_anim);
                x = tempX_rotY; z = tempZ_rotY;
                let tempY_rotX = y * Math.cos(rotationX_anim) - z * Math.sin(rotationX_anim);
                let tempZ_rotX = y * Math.sin(rotationX_anim) + z * Math.cos(rotationX_anim);
                y = tempY_rotX; z = tempZ_rotX;
                const dynamicSphereRadius = currentSphereRadius * (1 + breathPulse * config_anim.breathAmplitude);
                const perspectiveFactor = config_anim.focalLength / (config_anim.focalLength - z * dynamicSphereRadius * 0.8);
                this.screenX = centerX_anim + x * dynamicSphereRadius * perspectiveFactor;
                this.screenY = centerY_anim + y * dynamicSphereRadius * perspectiveFactor;
                const normalizedDepth = z;
                this.projectedSize = Math.max(0.1, this.baseSize * perspectiveFactor * ((normalizedDepth + 1.2) / 2.2));
                this.alphaFactor = Math.max(0.1, Math.min(1, ((normalizedDepth + 1.5) / 2.5) * this.baseAlphaMultiplier));
                this.depth = z;
                const easedSpawnProgress = easeOutCubic(spawnProgress);
                this.currentDisplaySize = this.projectedSize * easedSpawnProgress;
            }

            draw(spawnProgress) {
                const easedSpawnProgress = easeOutCubic(spawnProgress);
                if (this.currentDisplaySize <= 0.15) return;
                const mainAlpha = this.alphaFactor * easedSpawnProgress;
                if (mainAlpha <= 0.02) return;
                const mainSize = this.currentDisplaySize;

                const haloLayers = [
                    { sizeFactor: 3.5, alphaFactor: 0.15, innerStop: 0.1, outerStop: 0.75 },
                    { sizeFactor: 2.2, alphaFactor: 0.25, innerStop: 0.15, outerStop: 0.85 }
                ];
                for (const layer of haloLayers) {
                    const haloSize = mainSize * layer.sizeFactor;
                    const haloAlpha = mainAlpha * layer.alphaFactor;
                    if (haloAlpha <= 0.01 || haloSize <= 0.2) continue;
                    const gradient = ctx.createRadialGradient(this.screenX, this.screenY, haloSize * layer.innerStop, this.screenX, this.screenY, haloSize);
                    gradient.addColorStop(0, `rgba(${this.color_r}, ${this.color_g}, ${this.color_b}, ${haloAlpha})`);
                    gradient.addColorStop(layer.outerStop, `rgba(${this.color_r}, ${this.color_g}, ${this.color_b}, ${haloAlpha * 0.5})`);
                    gradient.addColorStop(1, `rgba(${this.color_r}, ${this.color_g}, ${this.color_b}, 0)`);
                    ctx.fillStyle = gradient; ctx.beginPath(); ctx.arc(this.screenX, this.screenY, haloSize, 0, Math.PI * 2); ctx.fill();
                }

                if (spawnProgress < 1.0) {
                    const indigoGlowIntensity = (1 - easedSpawnProgress) * config_anim.spawnGlowBaseIntensity;
                    if (indigoGlowIntensity > 0.01) {
                        const indigoGlowRadius = mainSize * (config_anim.spawnGlowRadiusFactorBase + (1 - easedSpawnProgress) * config_anim.spawnGlowRadiusFactorExtra);
                        const [ir, ig, ib] = config_anim.spawnIndigoColor;
                        const indigoGradient = ctx.createRadialGradient(this.screenX, this.screenY, indigoGlowRadius * 0.1, this.screenX, this.screenY, indigoGlowRadius);
                        indigoGradient.addColorStop(0, `rgba(${ir}, ${ig}, ${ib}, ${indigoGlowIntensity})`);
                        indigoGradient.addColorStop(0.6, `rgba(${ir}, ${ig}, ${ib}, ${indigoGlowIntensity * 0.3})`);
                        indigoGradient.addColorStop(1, `rgba(${ir}, ${ig}, ${ib}, 0)`);
                        ctx.fillStyle = indigoGradient;
                        ctx.beginPath();
                        ctx.arc(this.screenX, this.screenY, indigoGlowRadius, 0, Math.PI * 2);
                        ctx.fill();
                    }
                }

                ctx.fillStyle = `rgba(${this.color_r}, ${this.color_g}, ${this.color_b}, ${mainAlpha})`;
                ctx.beginPath(); ctx.arc(this.screenX, this.screenY, mainSize, 0, Math.PI * 2); ctx.fill();
            }
        }

        const setupCanvas_anim = () => {
            const dpr = window.devicePixelRatio || 1;
            width_anim = window.innerWidth; height_anim = window.innerHeight;
            canvasElement.width = width_anim * dpr; canvasElement.height = height_anim * dpr;
            ctx.resetTransform();
            ctx.scale(dpr, dpr);
            centerX_anim = width_anim / 2; centerY_anim = height_anim / 2;
            config_anim.sphereBaseRadius = Math.min(width_anim, height_anim) * 0.22;
        };

        const init_anim = () => {
            setupCanvas_anim();
            particles_anim = [];
            for (let i = 0; i < config_anim.particleCount; i++) {
                particles_anim.push(new Particle_anim());
            }
        };

        const animate_anim = () => {
            globalTime_anim++;
            rotationX_anim += config_anim.rotationSpeedX;
            rotationY_anim += config_anim.rotationSpeedY;
            ctx.fillStyle = config_anim.backgroundColor;
            ctx.clearRect(0, 0, width_anim, height_anim);

            if (manager.isSpawning && manager.spawnProgress < 1) {
                const elapsedTime = performance.now() - manager.spawnStartTime;
                manager.spawnProgress = Math.min(1, elapsedTime / manager.spawnDuration);
            } else if (manager.spawnProgress >= 1 && manager.isSpawning) {
                manager.isSpawning = false;
            }
            const currentEffectiveSpawnProgress = manager.isSpawning ? manager.spawnProgress : 1.0;

            const breathPulse = Math.sin(globalTime_anim * config_anim.breathSpeed);
            particles_anim.forEach(particle => { particle.projectAndTransform(config_anim.sphereBaseRadius, breathPulse, currentEffectiveSpawnProgress); });

            particles_anim.forEach(particle => { particle.draw(currentEffectiveSpawnProgress); });
            localAnimationFrameId = requestAnimationFrame(animate_anim);
        };

        const resizeHandler_anim = () => {
            if (localAnimationFrameId) {
                cancelAnimationFrame(localAnimationFrameId);
                localAnimationFrameId = null;
            }
            init_anim();
            if (!localAnimationFrameId && manager.animationRunner && manager.animationRunner.isRunning) {
                localAnimationFrameId = requestAnimationFrame(animate_anim);
            }
        };

        return {
            startAnimation: () => {
                init_anim();
                if (!localAnimationFrameId) {
                    localAnimationFrameId = requestAnimationFrame(animate_anim);
                }
            },
            stopAnimation: () => {
                if (localAnimationFrameId) {
                    cancelAnimationFrame(localAnimationFrameId);
                    localAnimationFrameId = null;
                }
            },
            resizeHandler: resizeHandler_anim
        };
    }
};


function showOverlayForFixedDuration(duration = 2000) {
    if (loadingOverlayManager.overlayElement) {
        loadingOverlayManager.hideAndDestroy();
    }
    loadingOverlayManager.createAndShow();

    setTimeout(() => {
        if (loadingOverlayManager.overlayElement) {
            loadingOverlayManager.hideAndDestroy();
        }
    }, duration);
}


(function earlyAppSetup() {
    const isReloadingAfterClear = localStorage.getItem('copilotIsReloadingAfterClear') === 'true';
    const appContentEarly = document.getElementById('appContent');

    if (appContentEarly) {
        appContentEarly.classList.add('hidden');
    } else {
        const tempStyle = document.createElement('style');
        tempStyle.id = 'temp-hide-appcontent-style';
        tempStyle.textContent = '#appContent { display: none !important; }';
        document.head.appendChild(tempStyle);
    }

    if (isReloadingAfterClear) {
        console.log("[EarlySetup] Reloading after data clear. Showing overlay and removing flag.");
        if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.createAndShow) {
            loadingOverlayManager.createAndShow();
            loadingOverlayManager.updateProgress(1, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏...");
        } else {
            console.error("[EarlySetup] loadingOverlayManager or createAndShow is not available! Overlay for post-clear not shown.");
        }
        try {
            localStorage.removeItem('copilotIsReloadingAfterClear');
            console.log("[EarlySetup] Flag 'copilotIsReloadingAfterClear' removed.");
        } catch (e) {
            console.error("[EarlySetup] Failed to remove 'copilotIsReloadingAfterClear' flag:", e);
        }
    } else {
        console.log("[EarlySetup] Standard load. Attempting to show overlay...");
        if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.createAndShow) {
            loadingOverlayManager.createAndShow();
        } else {
            console.error("[EarlySetup] loadingOverlayManager or createAndShow is not available!");
        }
    }
})();


async function appInit(context = 'normal') {
    console.log(`[appInit V5 - Context-Aware: '${context}'] –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...`);

    let currentAppInitProgress = 0;

    const updateTotalAppInitProgress = (stageWeightCompleted, stageName) => {
        currentAppInitProgress += stageWeightCompleted;
        const displayProgress = Math.min(currentAppInitProgress, 99);
        loadingOverlayManager.updateProgress(displayProgress);
        console.log(`[appInit Progress] ${stageName}: ${displayProgress.toFixed(1)}% (–¥–æ–±–∞–≤–ª–µ–Ω–æ ${stageWeightCompleted.toFixed(1)}%, –≤—Å–µ–≥–æ ${currentAppInitProgress.toFixed(1)}%)`);
    };

    const updateFineGrainedProgress = (baseProgress, stageWeight, current, total) => {
        if (total === 0) {
            const displayProgress = Math.min(baseProgress, 99);
            loadingOverlayManager.updateProgress(displayProgress);
            console.log(`[appInit FineGrainedProgress] –°—Ç–∞–¥–∏—è —Å 0 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (${current}/${total}). –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${baseProgress.toFixed(1)}%, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π: ${displayProgress.toFixed(1)}%`);
            return;
        }
        const stageProgressFraction = current / total;
        const currentStageProgressContribution = stageProgressFraction * stageWeight;
        const newOverallProgressForDisplay = baseProgress + currentStageProgressContribution;
        const displayProgress = Math.min(newOverallProgressForDisplay, 99);

        loadingOverlayManager.updateProgress(displayProgress);
        console.log(`[appInit FineGrainedProgress] ${current}/${total} (–≤–∫–ª–∞–¥ —Å—Ç–∞–¥–∏–∏: +${currentStageProgressContribution.toFixed(1)}% –∫ –±–∞–∑–µ ${baseProgress.toFixed(1)}%). –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${displayProgress.toFixed(1)}%`);
    };

    const STAGE_WEIGHTS_APP_INIT = {
        NOTIFICATION_SERVICE: 2,
        DB_INIT: 15,
        USER_PREFS: 8,
        DATA_LOAD: 25,
        INDEX_BUILD: 25,
        UI_SYSTEMS: 20,
        FINAL_UI: 5,
    };

    if (typeof NotificationService !== 'undefined' && typeof NotificationService.init === 'function') {
        try {
            NotificationService.init();
        } catch (e) { console.error("Failed to initialize NotificationService:", e); }
    } else { console.error("NotificationService is not defined or init method is missing!"); }
    updateTotalAppInitProgress(STAGE_WEIGHTS_APP_INIT.NOTIFICATION_SERVICE, "NotificationService");

    let dbInitialized = false;

    return new Promise(async (resolve, reject) => {
        try {
            if (typeof initDB === 'function') {
                await initDB();
                dbInitialized = true;
                console.log("[appInit V3] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
            } else {
                console.error("[appInit V3] –§—É–Ω–∫—Ü–∏—è initDB –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                throw new Error("initDB function not found");
            }
            updateTotalAppInitProgress(STAGE_WEIGHTS_APP_INIT.DB_INIT, "DBInit");

            if (dbInitialized && typeof loadInitialFavoritesCache === 'function') {
                await loadInitialFavoritesCache();
                console.log("[appInit - Favorites] loadInitialFavoritesCache –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
            } else if (!dbInitialized) {
                console.warn("[appInit - Favorites] DB not initialized, skipping favorites cache load.");
            } else {
                console.warn("[appInit - Favorites] loadInitialFavoritesCache function not found.");
            }

            if (typeof handleFavoriteActionClick === 'function') {
                if (document.body._favoriteActionClickHandlerAttached) {
                    document.removeEventListener('click', handleFavoriteActionClick, false);
                    delete document.body._favoriteActionClickHandlerAttached;
                    console.log("[appInit - Favorites] –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handleFavoriteActionClick (BUBBLING), –µ—Å–ª–∏ –±—ã–ª, —É–¥–∞–ª–µ–Ω.");
                }
                if (document.body._favoriteActionClickHandlerAttachedCapture) {
                    document.removeEventListener('click', handleFavoriteActionClick, true);
                    delete document.body._favoriteActionClickHandlerAttachedCapture;
                    console.log("[appInit - Favorites] –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handleFavoriteActionClick (CAPTURING) —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
                }

                document.addEventListener('click', handleFavoriteActionClick, true);
                document.body._favoriteActionClickHandlerAttachedCapture = true;
                console.log("[appInit - Favorites] –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handleFavoriteActionClick (CAPTURING) –¥–æ–±–∞–≤–ª–µ–Ω/–ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");

            } else {
                console.error("[appInit - Favorites] –§—É–Ω–∫—Ü–∏—è handleFavoriteActionClick –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
            }

            const showFavoritesHeaderButton = document.getElementById('showFavoritesHeaderBtn');
            if (showFavoritesHeaderButton) {
                if (showFavoritesHeaderButton._clickHandlerInstance) {
                    showFavoritesHeaderButton.removeEventListener('click', showFavoritesHeaderButton._clickHandlerInstance);
                }
                showFavoritesHeaderButton._clickHandlerInstance = () => setActiveTab('favorites');
                showFavoritesHeaderButton.addEventListener('click', showFavoritesHeaderButton._clickHandlerInstance);
                console.log("[appInit - Favorites] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' –≤ —à–∞–ø–∫–µ (#showFavoritesHeaderBtn) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.");
            } else {
                console.warn("[appInit - Favorites] –ö–Ω–æ–ø–∫–∞ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' –≤ —à–∞–ø–∫–µ (#showFavoritesHeaderBtn) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            }

            if (typeof loadUserPreferences === 'function') {
                await loadUserPreferences();
            } else { console.warn("[appInit V3] –§—É–Ω–∫—Ü–∏—è loadUserPreferences –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }
            updateTotalAppInitProgress(STAGE_WEIGHTS_APP_INIT.USER_PREFS, "UserPrefs");

            const dataLoadPromises = [];
            if (dbInitialized) {
                if (typeof loadCategoryInfo === 'function') dataLoadPromises.push(loadCategoryInfo().catch(err => { console.error("[appInit V3] –û—à–∏–±–∫–∞ loadCategoryInfo:", err); return null; }));
                if (typeof loadFromIndexedDB === 'function') dataLoadPromises.push(loadFromIndexedDB().catch(err => { console.error("[appInit V3] –û—à–∏–±–∫–∞ loadFromIndexedDB:", err); return null; }));
                else { console.warn("[appInit V3] –§—É–Ω–∫—Ü–∏—è loadFromIndexedDB –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }
            } else { console.warn("[appInit V3] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º dataLoadPromises."); }

            const dataResults = await Promise.allSettled(dataLoadPromises);
            console.log("[appInit V3] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", dataResults.map(r => r.status));
            updateTotalAppInitProgress(STAGE_WEIGHTS_APP_INIT.DATA_LOAD, "DataLoad");

            const baseProgressForIndex = currentAppInitProgress;
            if (dbInitialized && typeof ensureSearchIndexIsBuilt === 'function') {
                try {
                    console.log("[appInit V3] –ù–∞—á–∞–ª–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...");
                    const indexProgressCallback = (processed, total, error) => {
                        if (error) {
                            console.warn("[appInit V3 - IndexProgress] –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∫–æ–ª–ª–±—ç–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:", error);
                            return;
                        }
                        if (total > 0) {
                            const indexStageProgress = (processed / total) * STAGE_WEIGHTS_APP_INIT.INDEX_BUILD;
                            const displayProgress = Math.min(baseProgressForIndex + indexStageProgress, baseProgressForIndex + STAGE_WEIGHTS_APP_INIT.INDEX_BUILD, 99);
                            loadingOverlayManager.updateProgress(displayProgress);
                        } else if (processed === 0 && total === 0) {
                            loadingOverlayManager.updateProgress(Math.min(baseProgressForIndex + STAGE_WEIGHTS_APP_INIT.INDEX_BUILD, 99));
                        }
                    };

                    if (typeof checkAndBuildIndex === 'function') {
                        await checkAndBuildIndex(false, indexProgressCallback, context);
                    } else {
                        console.warn("[appInit V3] –§—É–Ω–∫—Ü–∏—è checkAndBuildIndex –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º ensureSearchIndexIsBuilt.");
                        await ensureSearchIndexIsBuilt();
                        loadingOverlayManager.updateProgress(Math.min(baseProgressForIndex + STAGE_WEIGHTS_APP_INIT.INDEX_BUILD, 99));
                    }
                    console.log("[appInit V3] –ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
                } catch (indexError) {
                    console.error("[appInit V3] –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞:", indexError);
                }
            } else {
                if (!dbInitialized) console.warn("[appInit V3] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ.");
                else console.warn("[appInit V3] –§—É–Ω–∫—Ü–∏—è ensureSearchIndexIsBuilt –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ.");
            }
            currentAppInitProgress = baseProgressForIndex + STAGE_WEIGHTS_APP_INIT.INDEX_BUILD;
            loadingOverlayManager.updateProgress(Math.min(currentAppInitProgress, 99));


            console.log("[appInit V3] –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥—Å–∏—Å—Ç–µ–º UI...");
            const initSystems = [
                { name: 'initSearchSystem', func: typeof initSearchSystem === 'function' ? initSearchSystem : () => console.warn('initSearchSystem not defined'), critical: true },
                { name: 'initBookmarkSystem', func: typeof initBookmarkSystem === 'function' ? initBookmarkSystem : () => console.warn('initBookmarkSystem not defined'), critical: false },
                { name: 'initCibLinkSystem', func: typeof initCibLinkSystem === 'function' ? initCibLinkSystem : () => console.warn('initCibLinkSystem not defined'), critical: false },
                { name: 'initViewToggles', func: typeof initViewToggles === 'function' ? initViewToggles : () => console.warn('initViewToggles not defined'), critical: false },
                { name: 'initReglamentsSystem', func: typeof initReglamentsSystem === 'function' ? initReglamentsSystem : () => console.warn('initReglamentsSystem not defined'), critical: false },
                { name: 'initClientDataSystem', func: typeof initClientDataSystem === 'function' ? initClientDataSystem : () => console.warn('initClientDataSystem not defined'), critical: false },
                { name: 'initExternalLinksSystem', func: typeof initExternalLinksSystem === 'function' ? initExternalLinksSystem : () => console.warn('initExternalLinksSystem not defined'), critical: false },
                { name: 'initTimerSystem', func: typeof initTimerSystem === 'function' ? initTimerSystem : () => console.warn('initTimerSystem not defined'), critical: false },
                { name: 'initSedoTypesSystem', func: typeof initSedoTypesSystem === 'function' ? initSedoTypesSystem : () => console.warn('initSedoTypesSystem not defined'), critical: false },
                { name: 'initBlacklistSystem', func: typeof initBlacklistSystem === 'function' ? initBlacklistSystem : () => console.warn('initBlacklistSystem not defined'), critical: false },
                { name: 'initReloadButton', func: typeof initReloadButton === 'function' ? initReloadButton : () => console.warn('initReloadButton not defined'), critical: false },
                { name: 'initClearDataFunctionality', func: typeof initClearDataFunctionality === 'function' ? initClearDataFunctionality : () => console.warn('initClearDataFunctionality not defined'), critical: false },
                { name: 'initUICustomization', func: typeof initUICustomization === 'function' ? initUICustomization : () => console.warn('initUICustomization not defined'), critical: false },
                { name: 'initHotkeysModal', func: typeof initHotkeysModal === 'function' ? initHotkeysModal : () => console.warn('initHotkeysModal not defined'), critical: false },
                { name: 'setupHotkeys', func: typeof setupHotkeys === 'function' ? setupHotkeys : () => console.warn('setupHotkeys not defined'), critical: false },
                { name: 'initFullscreenToggles', func: typeof initFullscreenToggles === 'function' ? initFullscreenToggles : () => console.warn('initFullscreenToggles not defined'), critical: false }
            ];
            let successCount = 0; let errorCount = 0;
            const baseProgressForUISystems = currentAppInitProgress;
            let processedUISystems = 0;

            for (const system of initSystems) {
                try {
                    if (typeof system.func === 'function') {
                        await Promise.resolve(system.func());
                        console.log(`[appInit V3] ‚úì ${system.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`);
                        successCount++;
                    } else {
                        console.warn(`[appInit V3] ‚ö† ${system.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ, —Ç.–∫. –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥–ª—É—à–∫–∞).`);
                        if (system.critical) throw new Error(`Critical system ${system.name} not found`);
                    }
                } catch (error) {
                    console.error(`[appInit V3] ‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${system.name}:`, error);
                    errorCount++;
                    if (system.critical) throw new Error(`Critical system ${system.name} failed: ${error.message}`);
                }
                processedUISystems++;
                updateFineGrainedProgress(baseProgressForUISystems, STAGE_WEIGHTS_APP_INIT.UI_SYSTEMS, processedUISystems, initSystems.length);
            }
            currentAppInitProgress = baseProgressForUISystems + STAGE_WEIGHTS_APP_INIT.UI_SYSTEMS;
            loadingOverlayManager.updateProgress(Math.min(currentAppInitProgress, 99));
            console.log(`[appInit V3] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥—Å–∏—Å—Ç–µ–º UI –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} —Å –æ—à–∏–±–∫–∞–º–∏.`);

            try {
                if (typeof applyInitialUISettings === 'function') { await applyInitialUISettings(); }
                else { console.warn("[appInit V3] –§—É–Ω–∫—Ü–∏—è applyInitialUISettings –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }
            } catch (uiSettingsError) { console.error("[appInit V3] ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è UI –Ω–∞—Å—Ç—Ä–æ–µ–∫:", uiSettingsError); }

            try {
                if (typeof initUI === 'function') { await Promise.resolve(initUI()); }
                else { console.warn("[appInit V3] ‚ö† –§—É–Ω–∫—Ü–∏—è initUI –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }
            } catch (finalUIError) { console.error("[appInit V3] ‚úó –û—à–∏–±–∫–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI:", finalUIError); }
            updateTotalAppInitProgress(STAGE_WEIGHTS_APP_INIT.FINAL_UI, "FinalUI");

            console.log("[appInit V3] –í—Å–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤—ã–∑–æ–≤—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ DOM –±—Ä–∞—É–∑–µ—Ä–æ–º...");
            await new Promise(r => requestAnimationFrame(() => requestAnimationFrame(r)));
            console.log("[appInit V3] –û—Ç—Ä–∏—Å–æ–≤–∫–∞ DOM –±—Ä–∞—É–∑–µ—Ä–æ–º –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏.");

            loadingOverlayManager.updateProgress(100);
            console.log("[appInit V3] ‚úì –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");
            resolve(dbInitialized);

        } catch (criticalError) {
            console.error("[appInit V3] ‚úó –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", criticalError);
            loadingOverlayManager.updateProgress(100);
            if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                NotificationService.add(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${criticalError.message}. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`, "error", { important: true, duration: 0 });
            } else {
                alert(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${criticalError.message}. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`);
            }
            reject(criticalError);
        }
    });
}


window.onload = async () => {
    console.log("window.onload: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞.");
    const appContent = document.getElementById('appContent');

    const tempHideStyle = document.getElementById('temp-hide-appcontent-style');
    if (tempHideStyle) {
        tempHideStyle.remove();
        console.log("[window.onload] Removed temporary appContent hiding style.");
    }

    if (typeof NotificationService !== 'undefined' && NotificationService.init) {
        NotificationService.init();
    } else {
        console.error("NotificationService –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ window.onload!");
    }

    if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.createAndShow) {
        if (!loadingOverlayManager.overlayElement) {
            console.log("[window.onload] Overlay not shown by earlyAppSetup, creating it now.");
            loadingOverlayManager.createAndShow();
        } else {
            console.log("[window.onload] Overlay already exists (presumably shown by earlyAppSetup).");
        }
    } else {
        console.error("[window.onload] loadingOverlayManager or createAndShow is not available!");
    }

    const minDisplayTime = 5000;
    const minDisplayTimePromise = new Promise(resolve => setTimeout(resolve, minDisplayTime));
    let appInitSuccessfully = false;

    const appLoadPromise = appInit()
        .then((dbReady) => {
            appInitSuccessfully = dbReady;
            console.log(`[window.onload] appInit –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î: ${dbReady}`);
        })
        .catch(err => {
            console.error("appInit rejected in window.onload wrapper:", err);
            appInitSuccessfully = false;
        });

    Promise.all([minDisplayTimePromise, appLoadPromise])
        .then(async () => {
            console.log("[window.onload Promise.all.then] appInit –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.");

            if (loadingOverlayManager && typeof loadingOverlayManager.updateProgress === 'function' && loadingOverlayManager.overlayElement) {
                if (loadingOverlayManager.currentProgressValue < 100) {
                    loadingOverlayManager.updateProgress(100);
                }
            }
            await new Promise(r => setTimeout(r, 200));

            if (loadingOverlayManager && typeof loadingOverlayManager.hideAndDestroy === 'function') {
                await loadingOverlayManager.hideAndDestroy();
                console.log("[window.onload Promise.all.then] –û–≤–µ—Ä–ª–µ–π —Å–∫—Ä—ã—Ç.");
            }

            if (appInitSuccessfully) {
                if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                    NotificationService.add("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "success", { duration: 5000 });
                }
                if (typeof checkAndSetWelcomeText === 'function') {
                    await checkAndSetWelcomeText();
                }
            } else {
                console.warn("[window.onload Promise.all.then] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ (appInitSuccessfully is false).");
            }

            if (appContent) {
                appContent.classList.remove('hidden');
                appContent.classList.add('content-fading-in');
                console.log("[window.onload Promise.all.then] appContent –ø–æ–∫–∞–∑–∞–Ω —Å fade-in —ç—Ñ—Ñ–µ–∫—Ç–æ–º.");

                await new Promise(resolve => requestAnimationFrame(resolve));

                if (appInitSuccessfully) {
                    if (typeof initGoogleDocSections === 'function') {
                        initGoogleDocSections();
                    } else {
                        console.error("–§—É–Ω–∫—Ü–∏—è initGoogleDocSections –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ window.onload!");
                    }
                }

                requestAnimationFrame(() => {
                    if (typeof setupTabsOverflow === 'function') {
                        console.log("window.onload (FIXED): –í—ã–∑–æ–≤ setupTabsOverflow –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.");
                        setupTabsOverflow();
                    } else {
                        console.warn("window.onload (FIXED): –§—É–Ω–∫—Ü–∏—è setupTabsOverflow –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    }

                    if (typeof updateVisibleTabs === 'function') {
                        console.log("window.onload (FIXED): –í—ã–∑–æ–≤ updateVisibleTabs –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.");
                        updateVisibleTabs();
                    } else {
                        console.warn("window.onload (FIXED): –§—É–Ω–∫—Ü–∏—è updateVisibleTabs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    }
                });

            } else {
                console.warn("[window.onload Promise.all.then] appContent –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ appInit. UI –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–º–∞–Ω.");
            }
        })
        .catch(async error => {
            console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Promise.all (window.onload):", error);
            if (loadingOverlayManager && typeof loadingOverlayManager.hideAndDestroy === 'function') {
                await loadingOverlayManager.hideAndDestroy();
            }
            if (appContent) {
                appContent.classList.remove('hidden');
            }
            const errorMessageText = error instanceof Error ? error.message : String(error);
            if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                NotificationService.add(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${errorMessageText}.`, "error", { important: true, duration: 10000 });
            }
        });
};


async function loadUserPreferences() {
    const defaultPreferences = {
        theme: DEFAULT_UI_SETTINGS.themeMode,
        showBlacklistUsageWarning: true,
        disableForcedBackupOnImport: false,
        welcomeTextShownInitially: false,
        clientNotesFontSize: 100,
        employeeExtension: ''
    };

    if (!db) {
        console.warn("[loadUserPreferences] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ userPreferences.");
        userPreferences = { ...defaultPreferences };
        return;
    }

    let migrationNeeded = false;
    try {
        const savedPrefsContainer = await getFromIndexedDB('preferences', USER_PREFERENCES_KEY);
        if (savedPrefsContainer && typeof savedPrefsContainer.data === 'object') {
            userPreferences = { ...defaultPreferences, ...savedPrefsContainer.data };
            console.log("[loadUserPreferences] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ IndexedDB:", userPreferences);
        } else {
            console.log("[loadUserPreferences] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ IndexedDB. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ.");
            userPreferences = { ...defaultPreferences };
            migrationNeeded = true;
        }

        if (!userPreferences.employeeExtension) {
            const legacyExtensionPref = await getFromIndexedDB('preferences', 'employeeExtension');
            if (legacyExtensionPref && typeof legacyExtensionPref.value === 'string') {
                console.log(`[loadUserPreferences] –ù–∞–π–¥–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–æ—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ ('${legacyExtensionPref.value}'). –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è.`);
                userPreferences.employeeExtension = legacyExtensionPref.value;
                migrationNeeded = true;
                await deleteFromIndexedDB('preferences', 'employeeExtension');
                console.log("[loadUserPreferences] –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–æ—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞.");
            }
        }

        if (migrationNeeded) {
            await saveUserPreferences();
            console.log("[loadUserPreferences] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å –≤–æ–∑–º–æ–∂–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–µ–π) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ IndexedDB.");
        }

    } catch (error) {
        console.error("[loadUserPreferences] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ IndexedDB:", error);
        userPreferences = { ...defaultPreferences };
    }

    if (typeof userPreferences.theme !== 'string' || !['auto', 'light', 'dark'].includes(userPreferences.theme)) {
        userPreferences.theme = defaultPreferences.theme;
    }
    if (typeof userPreferences.showBlacklistUsageWarning !== 'boolean') {
        userPreferences.showBlacklistUsageWarning = defaultPreferences.showBlacklistUsageWarning;
    }
    if (typeof userPreferences.disableForcedBackupOnImport !== 'boolean') {
        userPreferences.disableForcedBackupOnImport = defaultPreferences.disableForcedBackupOnImport;
    }
    if (typeof userPreferences.welcomeTextShownInitially !== 'boolean') {
        userPreferences.welcomeTextShownInitially = defaultPreferences.welcomeTextShownInitially;
    }
    if (typeof userPreferences.clientNotesFontSize !== 'number' || userPreferences.clientNotesFontSize < CLIENT_NOTES_MIN_FONT_SIZE || userPreferences.clientNotesFontSize > CLIENT_NOTES_MAX_FONT_SIZE) {
        userPreferences.clientNotesFontSize = defaultPreferences.clientNotesFontSize;
    }
    if (typeof userPreferences.employeeExtension !== 'string') {
        userPreferences.employeeExtension = defaultPreferences.employeeExtension;
    }
    console.log("[loadUserPreferences] –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ–≤—ã–µ userPreferences:", userPreferences);
}


async function saveUserPreferences() {
    if (!db) {
        console.error("[saveUserPreferences] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
        if (typeof showNotification === 'function') {
            showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞).", "error");
        }
        return false;
    }
    try {
        if (typeof userPreferences.employeeExtension === 'undefined') {
            console.warn("[saveUserPreferences] –ü–æ–ª–µ employeeExtension –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ userPreferences. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.");
            userPreferences.employeeExtension = '';
        }

        const dataToSave = {
            id: USER_PREFERENCES_KEY,
            data: userPreferences
        };
        await saveToIndexedDB('preferences', dataToSave);
        console.log("[saveUserPreferences] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ IndexedDB:", dataToSave);
        return true;
    } catch (error) {
        console.error("[saveUserPreferences] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ IndexedDB:", error);
        if (typeof showNotification === 'function') {
            showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.", "error");
        }
        return false;
    }
}


function initDB() {
    if (typeof db !== 'undefined' && db && typeof db.close === 'function') {
        try {
            console.log(`[initDB] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î (—Å—Ç–∞—Ç—É—Å: ${db.connections ? '–µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö' : '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}). –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å...`);
            db.close();
            console.log("[initDB] –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º.");
            db = null;
        } catch (e) {
            console.warn("[initDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:", e);

        }
    }

    return new Promise((resolve, reject) => {
        console.log(`[initDB] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${DB_NAME} –≤–µ—Ä—Å–∏–∏ ${DB_VERSION}`);
        const request = indexedDB.open(DB_NAME, DB_VERSION);

        request.onblocked = e => {
            console.error(`[initDB] –û—Ç–∫—Ä—ã—Ç–∏–µ IndexedDB –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û. Old version: ${e.oldVersion}, New version: ${e.newVersion}. Event:`, e);
            const errorMessage = `–û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${DB_NAME} (v${DB_VERSION}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –≠—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –≤ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–µ –æ—Ç–∫—Ä—ã—Ç–∞ –±–æ–ª–µ–µ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ —Å —ç—Ç–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É.`;
            if (typeof showNotification === 'function') {
                showNotification(errorMessage, "error", 30000);
            }

            reject(new Error(errorMessage));
        };

        request.onerror = e => {
            console.error("[initDB] –û—à–∏–±–∫–∞ IndexedDB –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏:", e.target.error, "Event:", e);
            reject(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: ${e.target.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.`);
        };

        request.onsuccess = e => {
            const dbInstance = e.target.result;

            db = dbInstance;
            console.log("[initDB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è 'db' –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");

            db.onerror = ev => {
                console.error("[initDB] –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (db.onerror):", ev.target.error, "Event:", ev);
            };

            db.onversionchange = (event) => {
                console.warn(`[DB onversionchange] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ë–î (old: ${event.oldVersion}, new: ${event.newVersion}). –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...`);
                if (db) {
                    db.close();
                    db = null;
                    console.warn("[DB onversionchange] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.");
                    if (typeof showNotification === 'function') {
                        showNotification("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –≤ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–µ. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.", "warning", 10000);
                    }
                } else {
                    console.warn("[DB onversionchange] –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ 'db' —É–∂–µ null. –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.");
                }
            };

            console.log("[initDB] –ü—Ä–æ—Ü–µ—Å—Å initDB –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.");
            resolve(dbInstance);
        };

        request.onupgradeneeded = e => {
            const currentDb = e.target.result;
            const transaction = e.target.transaction;
            console.log(`[initDB - onupgradeneeded] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ—Ä—Å–∏–∏ ${e.oldVersion} –¥–æ ${e.newVersion}`);

            try {
                sessionStorage.setItem('dbJustUpgraded', 'true');
                console.log("[initDB - onupgradeneeded] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ 'dbJustUpgraded' –≤ sessionStorage.");
            } catch (storageError) {
                console.error("[initDB - onupgradeneeded] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –≤ sessionStorage:", storageError);
            }

            if (!transaction) {
                console.error("[initDB - onupgradeneeded] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (e.target.transaction) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!");


                if (typeof reject === 'function') {
                    reject(new Error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."));
                }
                return;
            }

            transaction.oncomplete = () => {
                console.log(`[initDB - onupgradeneeded] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${e.newVersion} —É—Å–ø–µ—à–Ω–æ –ó–ê–í–ï–†–®–ï–ù–ê.`);
            };


            transaction.onerror = event => {
                console.error("[initDB - onupgradeneeded] –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", event.target.error, "Event:", event);

            };
            transaction.onabort = event => {
                console.warn("[initDB - onupgradeneeded] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω–∞:", event.target.error, "Event:", event);

            };

            storeConfigs.forEach(config => {
                if (!currentDb.objectStoreNames.contains(config.name)) {
                    console.log(`[onupgradeneeded] –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ–±—ä–µ–∫—Ç–æ–≤: ${config.name}`);
                    try {
                        const store = currentDb.createObjectStore(config.name, config.options);
                        config.indexes?.forEach(index => {
                            console.log(`[onupgradeneeded] –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ '${index.name}' –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ '${config.name}'`);
                            store.createIndex(index.name, index.keyPath, index.options || {});
                        });
                    } catch (createStoreError) {
                        console.error(`[onupgradeneeded] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ${config.name} –∏–ª–∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤:`, createStoreError);

                    }
                } else {
                    console.log(`[onupgradeneeded] –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—ä–µ–∫—Ç–æ–≤ '${config.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã...`);


                    const store = transaction.objectStore(config.name);
                    if (config.indexes) {
                        config.indexes.forEach(index => {
                            if (!store.indexNames.contains(index.name)) {
                                console.log(`[onupgradeneeded] –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ '${index.name}' –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ '${config.name}'`);
                                try {
                                    store.createIndex(index.name, index.keyPath, index.options || {});
                                } catch (createIndexError) {
                                    console.error(`[onupgradeneeded] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å '${index.name}' –≤ '${config.name}':`, createIndexError);
                                }
                            }
                        });
                    }

                    if (config.name === 'screenshots' && e.oldVersion < 4) {
                        console.log(`[onupgradeneeded] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ 'screenshots' —Å v${e.oldVersion} –¥–æ v${DB_VERSION}.`);
                        const screenshotsStore = transaction.objectStore('screenshots');
                        if (screenshotsStore.indexNames.contains('algorithmId')) {
                            console.log(`[onupgradeneeded] –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ 'algorithmId' –∏–∑ 'screenshots'.`);
                            try { screenshotsStore.deleteIndex('algorithmId'); } catch (deleteIndexError) {
                                console.warn("[onupgradeneeded] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å 'algorithmId' (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω):", deleteIndexError);
                            }
                        }
                        if (!screenshotsStore.indexNames.contains('parentId')) {
                            console.log(`[onupgradeneeded] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ 'parentId' –≤ 'screenshots'.`);
                            try { screenshotsStore.createIndex('parentId', 'parentId', { unique: false }); } catch (createParentIdIndexError) {
                                console.error("[onupgradeneeded] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å 'parentId' –≤ 'screenshots':", createParentIdIndexError);
                            }
                        }
                        if (!screenshotsStore.indexNames.contains('parentType')) {
                            console.log(`[onupgradeneeded] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ 'parentType' –≤ 'screenshots'.`);
                            try { screenshotsStore.createIndex('parentType', 'parentType', { unique: false }); } catch (createParentTypeIndexError) {
                                console.error("[onupgradeneeded] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å 'parentType' –≤ 'screenshots':", createParentTypeIndexError);
                            }
                        }
                    }
                }
            });

            if (e.oldVersion < 5) {
                if (currentDb.objectStoreNames.contains('searchIndex')) {
                    console.log(`[onupgradeneeded] –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ 'searchIndex' –¥–ª—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ (oldVersion: ${e.oldVersion}, newVersion: ${e.newVersion}).`);
                    try {
                        currentDb.deleteObjectStore('searchIndex');
                        console.log("[onupgradeneeded] –•—Ä–∞–Ω–∏–ª–∏—â–µ 'searchIndex' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.");
                        const searchIndexConfig = storeConfigs.find(sc => sc.name === 'searchIndex');
                        if (searchIndexConfig && !currentDb.objectStoreNames.contains('searchIndex')) {
                            console.log(`[onupgradeneeded] –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ 'searchIndex' –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è.`);
                            const store = currentDb.createObjectStore(searchIndexConfig.name, searchIndexConfig.options);
                            searchIndexConfig.indexes?.forEach(index => {
                                store.createIndex(index.name, index.keyPath, index.options || {});
                            });
                        }
                    } catch (deleteSearchIndexError) {
                        console.error("[onupgradeneeded] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ 'searchIndex':", deleteSearchIndexError);
                    }
                } else {
                    console.log("[onupgradeneeded] –•—Ä–∞–Ω–∏–ª–∏—â–µ 'searchIndex' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ).");
                }
            }
            console.log("[initDB - onupgradeneeded] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (onupgradeneeded) –∑–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ.");


        };
    });
}


async function ensureSearchIndexIsBuilt() {
    console.log("–í—ã–∑–æ–≤ ensureSearchIndexIsBuilt –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞.");
    if (!db) {
        console.warn("ensureSearchIndexIsBuilt: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
        return;
    }
    try {
        await checkAndBuildIndex();
        console.log("ensureSearchIndexIsBuilt: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã (–∏–ª–∏ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∏—Å—å).");
    } catch (error) {
        console.error("ensureSearchIndexIsBuilt: –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏/–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞:", error);

    }
}


async function loadCategoryInfo() {
    if (!db) {
        console.warn("DB not ready, using default categories.");
        return;
    }
    try {
        const savedInfo = await getFromIndexedDB('preferences', CATEGORY_INFO_KEY);
        if (savedInfo && typeof savedInfo.data === 'object') {
            categoryDisplayInfo = { ...categoryDisplayInfo, ...savedInfo.data };
        }
    } catch (error) {
        console.error("Error loading reglament category info:", error);
    }
}


async function saveCategoryInfo() {
    if (!db) {
        console.error("Cannot save category info: DB not ready.");
        showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "error");
        return false;
    }
    try {
        await saveToIndexedDB('preferences', { id: CATEGORY_INFO_KEY, data: categoryDisplayInfo });
        populateReglamentCategoryDropdowns();
        console.log("Reglament category info saved successfully.");

        showNotification("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", "success");

        return true;
    } catch (error) {
        console.error("Error saving reglament category info:", error);
        showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", "error");
        return false;
    }
}


function populateReglamentCategoryDropdowns() {
    const selects = document.querySelectorAll('#reglamentCategory, #editReglamentCategory');
    selects.forEach(select => {
        if (!select) return;

        const currentValue = select.value;
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>';

        const fragment = document.createDocumentFragment();
        const sortedCategories = Object.entries(categoryDisplayInfo).sort(([, a], [, b]) => a.title.localeCompare(b.title));

        sortedCategories.forEach(([id, info]) => {
            const option = document.createElement('option');
            option.value = id;
            option.textContent = info.title;
            fragment.appendChild(option);
        });
        select.appendChild(fragment);

        if (currentValue) {
            select.value = currentValue;
        }
    });
}


function getAllFromIndexedDB(storeName) {
    console.log(`[getAllFromIndexedDB V3] –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${storeName}`);
    return performDBOperation(storeName, "readonly", store => store.getAll())
        .then(results => {
            console.log(`[getAllFromIndexedDB V3] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${results?.length ?? 0} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${storeName}.`);
            if (results && results.length > 0) {

                const firstItemPreview = { ...results[0] };
                if (firstItemPreview.content) firstItemPreview.content = (firstItemPreview.content.substring(0, 50) + '...');
                if (firstItemPreview.steps && Array.isArray(firstItemPreview.steps)) firstItemPreview.steps = `[${firstItemPreview.steps.length} steps]`;
                if (firstItemPreview.notes) firstItemPreview.notes = (firstItemPreview.notes.substring(0, 50) + '...');
                console.log(`[getAllFromIndexedDB V3 DEBUG] –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ ${storeName}:`, JSON.parse(JSON.stringify(firstItemPreview)));
            }
            return results || [];
        })
        .catch(error => {
            console.error(`[getAllFromIndexedDB V3] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${storeName}:`, error);
            throw error;
        });
}


function performDBOperation(storeName, mode, operation) {
    return new Promise((resolve, reject) => {
        if (!db) {
            console.error(`performDBOperation: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (db) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! Store: ${storeName}, Mode: ${mode}`);
            return reject(new Error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"));
        }
        try {
            if (!db.objectStoreNames.contains(storeName)) {
                const errorMsg = `–•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—ä–µ–∫—Ç–æ–≤ '${storeName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${Array.from(db.objectStoreNames).join(', ')}`;
                console.error(`performDBOperation: ${errorMsg}`);
                return reject(new Error(errorMsg));
            }

            const transaction = db.transaction(storeName, mode);

            transaction.oncomplete = () => {




            };
            transaction.onerror = e => {
                const error = e.target.error;
                const errorDetails = error ? `${error.name}: ${error.message}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏';
                console.error(`performDBOperation: –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è '${storeName}' (mode: ${mode}). –î–µ—Ç–∞–ª–∏: ${errorDetails}`, error);


                reject(error || new Error(`–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${storeName}: ${errorDetails}`));
            };
            transaction.onabort = e => {
                const error = e.target.error;
                const errorDetails = error ? `${error.name}: ${error.message}` : '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –±–µ–∑ —è–≤–Ω–æ–π –æ—à–∏–±–∫–∏';
                console.warn(`performDBOperation: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è '${storeName}' (mode: ${mode}) –ü–†–ï–†–í–ê–ù–ê. –î–µ—Ç–∞–ª–∏: ${errorDetails}`, error);
                reject(error || new Error(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è ${storeName} –ø—Ä–µ—Ä–≤–∞–Ω–∞: ${errorDetails}`));
            };

            const store = transaction.objectStore(storeName);
            const request = operation(store);

            if (!(request instanceof IDBRequest)) {
                console.error(`performDBOperation: –ö–æ–ª–±—ç–∫ 'operation' –Ω–µ –≤–µ—Ä–Ω—É–ª IDBRequest –¥–ª—è ${storeName}. –í–µ—Ä–Ω—É–ª:`, request);
                return reject(new Error(`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è ${storeName} –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∑–∞–ø—Ä–æ—Å.`));
            }

            request.onsuccess = e => {

                resolve(e.target.result);
            };
            request.onerror = e => {
                const error = e.target.error;
                const errorDetails = error ? `${error.name}: ${error.message}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞';
                console.error(`performDBOperation: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É '${storeName}' (mode: ${mode}). –î–µ—Ç–∞–ª–∏: ${errorDetails}`, error);
                reject(error || new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${storeName}: ${errorDetails}`));
            };

        } catch (error) {
            console.error(`performDBOperation: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è '${storeName}' (mode: ${mode}).`, error);
            reject(error);
        }
    });
}


function saveToIndexedDB(storeName, data, key = null) {
    return performDBOperation(storeName, "readwrite", store => store.put(data, ...(key !== null ? [key] : [])));
}


function getFromIndexedDB(storeName, key) {
    const storeConfig = storeConfigs.find(sc => sc.name === storeName);
    let keyToUse = key;

    if (storeConfig && storeConfig.options && storeConfig.options.autoIncrement) {


        if (typeof key === 'string') {
            const parsedKey = parseInt(key, 10);

            if (!isNaN(parsedKey) && String(parsedKey) === key) {
                keyToUse = parsedKey;

            }
        }
    }
    return performDBOperation(storeName, "readonly", store => store.get(keyToUse));
}


async function addToFavoritesDB(favoriteItem) {
    if (!db) {
        console.error("DB not initialized. Cannot add to favorites.");
        return null;
    }
    const { id, ...itemData } = favoriteItem;
    return await saveToIndexedDB(FAVORITES_STORE_NAME, itemData);
}

async function removeFromFavoritesDB(itemType, originalItemId) {
    if (!db) {
        console.error("DB not initialized. Cannot remove from favorites.");
        return false;
    }
    const transaction = db.transaction(FAVORITES_STORE_NAME, 'readwrite');
    const store = transaction.objectStore(FAVORITES_STORE_NAME);
    const index = store.index('unique_favorite');
    const request = index.getKey([itemType, String(originalItemId)]);

    return new Promise((resolve, reject) => {
        request.onsuccess = () => {
            const favoriteKey = request.result;
            if (favoriteKey !== undefined) {
                const deleteRequest = store.delete(favoriteKey);
                deleteRequest.onsuccess = () => resolve(true);
                deleteRequest.onerror = (e) => reject(e.target.error);
            } else {
                console.warn(`Item not found in favorites to remove: type=${itemType}, id=${originalItemId}`);
                resolve(false);
            }
        };
        request.onerror = (e) => {
            console.error("Error finding favorite key to remove:", e.target.error);
            reject(e.target.error);
        };
    });
}

async function isFavoriteDB(itemType, originalItemId) {
    if (!db) {
        console.error("DB not initialized. Cannot check favorite status.");
        return false;
    }
    const transaction = db.transaction(FAVORITES_STORE_NAME, 'readonly');
    const store = transaction.objectStore(FAVORITES_STORE_NAME);
    const index = store.index('unique_favorite');
    const request = index.getKey([itemType, String(originalItemId)]);

    return new Promise((resolve, reject) => {
        request.onsuccess = () => {
            resolve(request.result !== undefined);
        };
        request.onerror = (e) => {
            console.error("Error checking favorite status in DB:", e.target.error);
            resolve(false);
        };
    });
}

async function getAllFavoritesDB() {
    if (!db) {
        console.error("DB not initialized. Cannot get all favorites.");
        return [];
    }
    return await getAllFromIndexedDB(FAVORITES_STORE_NAME);
}

async function clearAllFavoritesDB() {
    if (!db) {
        console.error("DB not initialized. Cannot clear favorites.");
        return false;
    }
    try {
        await clearIndexedDBStore(FAVORITES_STORE_NAME);
        currentFavoritesCache = [];
        console.log("Favorites store cleared and cache reset.");
        return true;
    } catch (error) {
        console.error("Error clearing favorites from DB:", error);
        return false;
    }
}


async function loadInitialFavoritesCache() {
    try {
        currentFavoritesCache = await getAllFavoritesDB();
        console.log(`Initial favorites cache loaded with ${currentFavoritesCache.length} items.`);
    } catch (e) {
        console.error("Failed to load initial favorites cache:", e);
        currentFavoritesCache = [];
    }
}


function deleteFromIndexedDB(storeName, key) {
    return performDBOperation(storeName, "readwrite", store => store.delete(key));
}


function clearIndexedDBStore(storeName) {
    return performDBOperation(storeName, "readwrite", store => store.clear());
}


function setTheme(mode) {
    const isDark = mode === 'dark' || (mode === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches);
    document.documentElement.classList.toggle('dark', isDark);
    userPreferences.theme = mode;
}


function renderAllAlgorithms() {
    renderMainAlgorithm();
    renderAlgorithmCards('program');
    renderAlgorithmCards('skzi');
    renderAlgorithmCards('webReg');
    renderAlgorithmCards('lk1c');
}


async function loadFromIndexedDB() {
    console.log("–ó–∞–ø—É—Å–∫ loadFromIndexedDB (v2, –±–µ–∑ clientData –ª–æ–≥–∏–∫–∏)...");

    const mainTitleElement = document.querySelector('#mainContent h2');
    if (mainTitleElement) {
        mainTitleElement.textContent = DEFAULT_MAIN_ALGORITHM.title;
    } else {
        console.warn("[loadFromIndexedDB] –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç #mainContent h2 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞.");
    }

    if (!db) {
        console.warn("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.");
        algorithms.main = JSON.parse(JSON.stringify(DEFAULT_MAIN_ALGORITHM));
        Object.keys(DEFAULT_OTHER_SECTIONS).forEach(section => {
            algorithms[section] = JSON.parse(JSON.stringify(DEFAULT_OTHER_SECTIONS[section] || []));
        });
        if (mainTitleElement) {
            mainTitleElement.textContent = algorithms.main.title;
        }
        if (typeof renderAllAlgorithms === 'function') renderAllAlgorithms();
        return false;
    }

    let loadedDataUsed = false;
    try {
        const savedAlgorithmsContainer = await getFromIndexedDB('algorithms', 'all');
        let loadedAlgoData = null;
        if (savedAlgorithmsContainer?.data && typeof savedAlgorithmsContainer.data === 'object') {
            loadedAlgoData = savedAlgorithmsContainer.data;
            loadedDataUsed = true;
            console.log("[loadFromIndexedDB] –î–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î.");
        } else {
            console.log("[loadFromIndexedDB] –î–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–∞–º–∏.");
            algorithms.main = JSON.parse(JSON.stringify(DEFAULT_MAIN_ALGORITHM));
            Object.keys(DEFAULT_OTHER_SECTIONS).forEach(section => {
                algorithms[section] = JSON.parse(JSON.stringify(DEFAULT_OTHER_SECTIONS[section] || []));
            });
            loadedAlgoData = JSON.parse(JSON.stringify(algorithms));
            loadedDataUsed = false;
        }

        if (loadedAlgoData && typeof loadedAlgoData.main === 'object' && loadedAlgoData.main !== null) {
            const mainHasContent = loadedAlgoData.main.title || (loadedAlgoData.main.steps && loadedAlgoData.main.steps.length > 0);
            if (mainHasContent || loadedDataUsed) {
                algorithms.main = loadedAlgoData.main;
                if (!algorithms.main.id) algorithms.main.id = 'main';
                if (Array.isArray(algorithms.main.steps)) {
                    algorithms.main.steps = algorithms.main.steps.map(step => {
                        if (!step || typeof step !== 'object') {
                            console.warn("[loadFromIndexedDB] –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —à–∞–≥ –≤ main.steps:", step);
                            return { title: "–û—à–∏–±–∫–∞: —à–∞–≥ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω", description: "", isCopyable: false, additionalInfoText: '', additionalInfoShowTop: false, additionalInfoShowBottom: false };
                        }
                        const newStep = {
                            additionalInfoText: step.additionalInfoText || '',
                            additionalInfoShowTop: typeof step.additionalInfoShowTop === 'boolean' ? step.additionalInfoShowTop : false,
                            additionalInfoShowBottom: typeof step.additionalInfoShowBottom === 'boolean' ? step.additionalInfoShowBottom : false,
                            isCopyable: typeof step.isCopyable === 'boolean' ? step.isCopyable : false,
                            showNoInnHelp: typeof step.showNoInnHelp === 'boolean' ? step.showNoInnHelp : false,
                            ...step
                        };
                        if (step.type === 'inn_step') {
                            newStep.showNoInnHelp = true;
                            delete newStep.type;
                        }
                        return newStep;
                    });
                } else {
                    algorithms.main.steps = [];
                }
            } else {
                console.warn("[loadFromIndexedDB] 'main' –∏–∑ –ë–î –ø—É—Å—Ç –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (—Ç.–∫. loadedDataUsed=false). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DEFAULT_MAIN_ALGORITHM.");
                algorithms.main = JSON.parse(JSON.stringify(DEFAULT_MAIN_ALGORITHM));
            }
        } else {
            console.warn("[loadFromIndexedDB] loadedAlgoData.main –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DEFAULT_MAIN_ALGORITHM.");
            algorithms.main = JSON.parse(JSON.stringify(DEFAULT_MAIN_ALGORITHM));
        }

        if (mainTitleElement) {
            mainTitleElement.textContent = algorithms.main.title || DEFAULT_MAIN_ALGORITHM.title;
        }

        Object.keys(DEFAULT_OTHER_SECTIONS).forEach(section => {
            if (loadedAlgoData && loadedAlgoData.hasOwnProperty(section) && Array.isArray(loadedAlgoData[section])) {
                algorithms[section] = loadedAlgoData[section].map(item => {
                    if (item && typeof item === 'object') {
                        if (typeof item.id === 'undefined' && item.title) {
                            item.id = `${section}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
                        }
                        if (item.steps && Array.isArray(item.steps)) {
                            item.steps = item.steps.map(step => {
                                if (!step || typeof step !== 'object') {
                                    console.warn(`[loadFromIndexedDB] –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —à–∞–≥ –≤ ${section}/${item.id}:`, step);
                                    return { title: "–û—à–∏–±–∫–∞: —à–∞–≥ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω", description: "" };
                                }
                                return {
                                    additionalInfoText: step.additionalInfoText || '',
                                    additionalInfoShowTop: typeof step.additionalInfoShowTop === 'boolean' ? step.additionalInfoShowTop : false,
                                    additionalInfoShowBottom: typeof step.additionalInfoShowBottom === 'boolean' ? step.additionalInfoShowBottom : false,
                                    ...step
                                };
                            });
                        } else if (item.steps === undefined) {
                            item.steps = [];
                        }
                        return item;
                    }
                    console.warn(`[loadFromIndexedDB] –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ–∫—Ü–∏–∏ ${section}:`, item);
                    return null;
                }).filter(item => item && typeof item.id !== 'undefined');
            } else {
                algorithms[section] = JSON.parse(JSON.stringify(DEFAULT_OTHER_SECTIONS[section] || []));
                if (!Array.isArray(algorithms[section])) algorithms[section] = [];
            }
        });

        if (!loadedDataUsed) {
            console.log("[loadFromIndexedDB] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ IndexedDB (—Ç.–∫. loadedDataUsed=false)...");
            try {
                await saveToIndexedDB('algorithms', { section: 'all', data: JSON.parse(JSON.stringify(algorithms)) });
            } catch (saveError) {
                console.error("[loadFromIndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:", saveError);
            }
        }

        if (typeof renderAllAlgorithms === 'function') renderAllAlgorithms();

        const results = await Promise.allSettled([
            typeof loadBookmarks === 'function' ? loadBookmarks() : Promise.resolve(),
            typeof loadReglaments === 'function' ? loadReglaments() : Promise.resolve(),
            typeof loadCibLinks === 'function' ? loadCibLinks() : Promise.resolve(),
            typeof loadExtLinks === 'function' ? loadExtLinks() : Promise.resolve()
        ]);
        const functionNames = ['bookmarks', 'reglaments', 'links', 'extLinks'];
        results.forEach((result, index) => {
            if (result.status === 'rejected') {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${functionNames[index]}:`, result.reason);
            }
        });

        if (!algorithms.main || !algorithms.main.title || !Array.isArray(algorithms.main.steps) || (algorithms.main.steps.length === 0 && !loadedDataUsed)) {
            console.warn("[loadFromIndexedDB - Final Check] algorithms.main –≤—Å–µ –µ—â–µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ DEFAULT_MAIN_ALGORITHM.");
            algorithms.main = JSON.parse(JSON.stringify(DEFAULT_MAIN_ALGORITHM));
            if (mainTitleElement) mainTitleElement.textContent = algorithms.main.title;
            if (typeof renderMainAlgorithm === 'function') renderMainAlgorithm();
        }

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ IndexedDB (loadFromIndexedDB) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ).");
        return true;

    } catch (error) {
        console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ loadFromIndexedDB:", error);
        algorithms.main = JSON.parse(JSON.stringify(DEFAULT_MAIN_ALGORITHM));
        Object.keys(DEFAULT_OTHER_SECTIONS).forEach(section => {
            algorithms[section] = JSON.parse(JSON.stringify(DEFAULT_OTHER_SECTIONS[section] || []));
        });
        if (mainTitleElement) mainTitleElement.textContent = algorithms.main.title;
        if (typeof renderAllAlgorithms === 'function') renderAllAlgorithms();
        return false;
    }
}


async function saveDataToIndexedDB() {
    if (!db) {
        console.error("Cannot save data: Database not initialized.");
        showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "error");
        return false;
    }

    try {
        const clientDataToSave = getClientData();
        const algorithmsToSave = { section: 'all', data: algorithms };

        return await new Promise((resolve, reject) => {
            const transaction = db.transaction(['algorithms', 'clientData'], 'readwrite');
            const algoStore = transaction.objectStore('algorithms');
            const clientStore = transaction.objectStore('clientData');
            let opsCompleted = 0;
            const totalOps = 2;

            const checkCompletion = () => {
                opsCompleted++;
                if (opsCompleted === totalOps) {
                }
            };

            const req1 = algoStore.put(algorithmsToSave);
            req1.onsuccess = checkCompletion;
            req1.onerror = (e) => {
                console.error("Error saving algorithms:", e.target.error);
            };

            const req2 = clientStore.put(clientDataToSave);
            req2.onsuccess = checkCompletion;
            req2.onerror = (e) => {
                console.error("Error saving clientData:", e.target.error);
            };

            transaction.oncomplete = () => {
                console.log("Algorithms and clientData saved successfully in one transaction.");
                resolve(true);
            };

            transaction.onerror = (e) => {
                console.error("Error during save transaction for algorithms/clientData:", e.target.error);
                reject(e.target.error);
            };

            transaction.onabort = (e) => {
                console.warn("Save transaction for algorithms/clientData aborted:", e.target.error);
                if (!e.target.error) {
                    reject(new Error("Save transaction aborted"));
                }
            };
        });

    } catch (error) {
        console.error("Failed to execute save transaction:", error);
        showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", "error");
        return false;
    }
}


const tabsConfig = [
    { id: 'main', name: '–ì–ª–∞–≤–Ω–∞—è', icon: 'fa-home' },
    { id: 'program', name: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ 1–°', icon: 'fa-desktop' },
    { id: 'links', name: '–°—Å—ã–ª–∫–∏ 1–°', icon: 'fa-link' },
    { id: 'extLinks', name: '–í–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã', icon: 'fa-globe' },
    { id: 'skzi', name: '–°–ö–ó–ò', icon: 'fa-key' },
    { id: 'lk1c', name: '1–°–û –õ–ö', icon: 'fa-user-circle' },
    { id: 'webReg', name: '–í–µ–±-–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä', icon: 'fa-plug' },
    { id: 'reglaments', name: '–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã', icon: 'fa-clipboard-list' },
    { id: 'bookmarks', name: '–ó–∞–∫–ª–∞–¥–∫–∏', icon: 'fa-bookmark' },
    { id: 'telefony', name: '–¢–µ–ª–µ—Ñ–æ–Ω—ã', icon: 'fa-phone-alt' },
    { id: 'shablony', name: '–®–∞–±–ª–æ–Ω—ã', icon: 'fa-file-invoice' },
    { id: 'sedoTypes', name: '–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –°–≠–î–û', icon: 'fa-comments' },
    { id: 'blacklistedClients', name: '–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–∞–±', icon: 'fa-user-secret', isSpecial: true }
];

const allPanelIdsForDefault = tabsConfig.map(t => t.id);
const defaultPanelOrder = tabsConfig.map(t => t.id);


async function loadUISettings() {
    console.log("Loading UI settings for modal (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π)...");
    let loadedSettings = {};
    let loadedUserPrefsSpecificFlags = {};

    if (db) {
        try {
            const settingsFromDB = await getFromIndexedDB('preferences', 'uiSettings');
            if (settingsFromDB && typeof settingsFromDB === 'object') {
                loadedSettings = { ...settingsFromDB };
                delete loadedSettings.themeMode;
                delete loadedSettings.showBlacklistUsageWarning;
                delete loadedSettings.disableForcedBackupOnImport;
                console.log("[loadUISettings] UI-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ 'uiSettings'.");
            } else {
                console.log("[loadUISettings] No UI settings (key: 'uiSettings') found in DB or format is incorrect, using defaults for UI-specific parts.");
                const { themeMode, showBlacklistUsageWarning, disableForcedBackupOnImport, ...defaultUiSpecific } = DEFAULT_UI_SETTINGS;
                loadedSettings = { ...defaultUiSpecific, id: 'uiSettings' };
            }
        } catch (error) {
            console.error("[loadUISettings] Error loading UI settings (key: 'uiSettings'):", error);
            const { themeMode, showBlacklistUsageWarning, disableForcedBackupOnImport, ...defaultUiSpecific } = DEFAULT_UI_SETTINGS;
            loadedSettings = { ...defaultUiSpecific, id: 'uiSettings' };
        }
    } else {
        const { themeMode, showBlacklistUsageWarning, disableForcedBackupOnImport, ...defaultUiSpecific } = DEFAULT_UI_SETTINGS;
        loadedSettings = { ...defaultUiSpecific, id: 'uiSettings' };
        console.warn("[loadUISettings] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ UI-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
    }

    if (db) {
        try {
            const userPrefsContainer = await getFromIndexedDB('preferences', USER_PREFERENCES_KEY);
            if (userPrefsContainer && typeof userPrefsContainer.data === 'object') {
                if (typeof userPrefsContainer.data.showBlacklistUsageWarning === 'boolean') {
                    loadedUserPrefsSpecificFlags.showBlacklistUsageWarning = userPrefsContainer.data.showBlacklistUsageWarning;
                }
                if (typeof userPrefsContainer.data.disableForcedBackupOnImport === 'boolean') {
                    loadedUserPrefsSpecificFlags.disableForcedBackupOnImport = userPrefsContainer.data.disableForcedBackupOnImport;
                }
                console.log(`[loadUISettings] –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–ª–∞–≥–∏ –∏–∑ userPrefsContainer.data:`, JSON.parse(JSON.stringify(loadedUserPrefsSpecificFlags)));
            } else {
                console.log(`[loadUISettings] No user preferences (key: '${USER_PREFERENCES_KEY}') found in DB, defaults for flags will be used.`);
            }
        } catch (error) {
            console.error(`[loadUISettings] Error loading user preferences (key: '${USER_PREFERENCES_KEY}') for flags:`, error);
        }
    }

    const currentActiveTheme = (userPreferences && userPreferences.theme && ['auto', 'light', 'dark'].includes(userPreferences.theme))
        ? userPreferences.theme
        : DEFAULT_UI_SETTINGS.themeMode;

    let settingsForModal = {
        ...DEFAULT_UI_SETTINGS,
        ...loadedSettings,
        themeMode: currentActiveTheme,
        showBlacklistUsageWarning: loadedUserPrefsSpecificFlags.showBlacklistUsageWarning ?? DEFAULT_UI_SETTINGS.showBlacklistUsageWarning ?? true,
        disableForcedBackupOnImport: loadedUserPrefsSpecificFlags.disableForcedBackupOnImport ?? DEFAULT_UI_SETTINGS.disableForcedBackupOnImport ?? false,
        id: 'uiSettings'
    };

    const currentPanelIds = tabsConfig.map(t => t.id);
    const knownPanelIds = new Set(currentPanelIds);

    const actualDefaultPanelOrder = (typeof defaultPanelOrder !== 'undefined' && Array.isArray(defaultPanelOrder) && defaultPanelOrder.length > 0)
        ? defaultPanelOrder
        : currentPanelIds;
    const actualDefaultPanelVisibility = (typeof defaultPanelVisibility !== 'undefined' && Array.isArray(defaultPanelVisibility) && defaultPanelVisibility.length === actualDefaultPanelOrder.length)
        ? defaultPanelVisibility
        : currentPanelIds.map(id => !(id === 'sedoTypes' || id === 'blacklistedClients'));

    let savedOrder = settingsForModal.panelOrder;
    let savedVisibility = settingsForModal.panelVisibility;

    if (!Array.isArray(savedOrder) || savedOrder.length === 0 || !savedOrder.every(id => typeof id === 'string')) {
        console.warn("[loadUISettings] panelOrder –≤ settingsForModal –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è defaultPanelOrder.");
        savedOrder = [...actualDefaultPanelOrder];
    }

    if (!Array.isArray(savedVisibility) || savedVisibility.length === 0 || savedVisibility.length !== savedOrder.length || !savedVisibility.every(v => typeof v === 'boolean')) {
        console.warn("[loadUISettings] panelVisibility –≤ settingsForModal –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç panelOrder. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ defaultPanelVisibility –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ savedOrder.");
        savedVisibility = savedOrder.map(id => {
            const defaultIndex = actualDefaultPanelOrder.indexOf(id);
            return defaultIndex !== -1 ? actualDefaultPanelVisibility[defaultIndex] : (!(id === 'sedoTypes' || id === 'blacklistedClients'));
        });
    }

    let effectiveOrder = [];
    let effectiveVisibility = [];
    const processedIds = new Set();

    savedOrder.forEach((panelId, index) => {
        if (knownPanelIds.has(panelId)) {
            effectiveOrder.push(panelId);
            effectiveVisibility.push(savedVisibility[index]);
            processedIds.add(panelId);
        } else {
            console.warn(`[loadUISettings - Sync] –ü–∞–Ω–µ–ª—å —Å ID "${panelId}" –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ tabsConfig. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.`);
        }
    });

    currentPanelIds.forEach(panelId => {
        if (!processedIds.has(panelId)) {
            effectiveOrder.push(panelId);
            const defaultIndex = actualDefaultPanelOrder.indexOf(panelId);
            effectiveVisibility.push(
                defaultIndex !== -1 ? actualDefaultPanelVisibility[defaultIndex] : (!(id === 'sedoTypes' || id === 'blacklistedClients'))
            );
            console.log(`[loadUISettings - Sync] –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è/–Ω–µ–¥–æ—Å—Ç–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å "${panelId}" —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é.`);
        }
    });

    settingsForModal.panelOrder = effectiveOrder;
    settingsForModal.panelVisibility = effectiveVisibility;

    console.log("[loadUISettings] –§–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏):", JSON.parse(JSON.stringify(settingsForModal)));

    originalUISettings = JSON.parse(JSON.stringify(settingsForModal));
    currentPreviewSettings = JSON.parse(JSON.stringify(settingsForModal));

    if (typeof applyPreviewSettings === 'function') {
        await applyPreviewSettings(currentPreviewSettings);
    } else {
        console.warn("[loadUISettings] –§—É–Ω–∫—Ü–∏—è applyPreviewSettings –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω.");
    }

    console.log("UI settings for modal populated, synchronized, and preview potentially applied:", currentPreviewSettings);
    return currentPreviewSettings;
}


async function saveUISettings() {
    console.log("Saving UI settings (Corrected Logic V2)...");

    const settingsToSaveForUI = { ...currentPreviewSettings };

    delete settingsToSaveForUI.themeMode;
    delete settingsToSaveForUI.showBlacklistUsageWarning;
    delete settingsToSaveForUI.disableForcedBackupOnImport;

    if (!settingsToSaveForUI.id) {
        settingsToSaveForUI.id = 'uiSettings';
    }
    console.log("UI-specific settings object being saved (to 'uiSettings' key):", JSON.parse(JSON.stringify(settingsToSaveForUI)));

    try {
        await saveToIndexedDB('preferences', settingsToSaveForUI);
        console.log("UI settings (colors, layout, etc.) save successful to DB ('uiSettings' key).");

        userPreferences.theme = currentPreviewSettings.themeMode;
        userPreferences.showBlacklistUsageWarning = currentPreviewSettings.showBlacklistUsageWarning;
        userPreferences.disableForcedBackupOnImport = currentPreviewSettings.disableForcedBackupOnImport;

        if (typeof saveUserPreferences === 'function') {
            await saveUserPreferences();
            console.log("User preferences (theme, flags) saved separately via saveUserPreferences().");
        } else {
            console.error("saveUserPreferences function not found. User preferences (like theme, flags) might not be saved.");
            showNotification("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", "error");
            return false;
        }

        originalUISettings = JSON.parse(JSON.stringify(currentPreviewSettings));
        isUISettingsDirty = false;

        if (typeof applyPreviewSettings === 'function') {
            await applyPreviewSettings(currentPreviewSettings);
            console.log("UI settings applied immediately after saving.");
        } else {
            console.error("applyPreviewSettings function not found! UI might not update after save.");
            showNotification("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", "error");
        }

        showNotification("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", "success");
        return true;
    } catch (error) {
        console.error("Error saving UI settings or user preferences:", error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.", "error");
        return false;
    }
}


async function highlightAndScrollSedoItem(tableIndex, rowIndex, fieldToHighlight, highlightTerm) {
    const MAX_RETRIES = 25;
    const RETRY_DELAY = 150;

    console.log(`[highlightAndScrollSedoItem V2] –ù–∞—á–∞–ª–æ. tableIndex: ${tableIndex}, rowIndex: ${rowIndex}, field: ${fieldToHighlight}, term: ${highlightTerm}`);

    for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {

        if (!currentSedoData || !currentSedoData.tables || !currentSedoData.tables[tableIndex]) {
            console.warn(`[highlightAndScrollSedoItem V2 - –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${MAX_RETRIES}] currentSedoData –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ ${tableIndex} –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã.`);
            if (attempt === MAX_RETRIES - 1) {
                if (typeof showNotification === 'function') showNotification("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –°–≠–î–û –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", "error");
                return;
            }
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
            continue;
        }

        const tableConfig = currentSedoData.tables[tableIndex];

        const container = document.getElementById('sedoTypesInfoContainer');
        if (!container) {
            console.error(`[highlightAndScrollSedoItem V2 - –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${MAX_RETRIES}] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #sedoTypesInfoContainer –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            if (attempt === MAX_RETRIES - 1) {
                if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –°–≠–î–û.", "error");
                return;
            }
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
            continue;
        }

        const tableElement = container.querySelector(`.sedo-table[data-table-index="${tableIndex}"]`);
        if (!tableElement) {
            console.warn(`[highlightAndScrollSedoItem V2 - –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${MAX_RETRIES}] –¢–∞–±–ª–∏—Ü–∞ –°–≠–î–û —Å data-table-index="${tableIndex}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM.`);
            if (attempt === MAX_RETRIES - 1) {
                if (typeof showNotification === 'function') showNotification(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –°–≠–î–û –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ (–∏–Ω–¥–µ–∫—Å ${tableIndex}).`, "warning");
                return;
            }
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
            continue;
        }

        let elementToHighlight;

        if (fieldToHighlight === 'tableTitle') {
            let currentElement = tableElement.previousElementSibling;
            while (currentElement) {
                if (currentElement.tagName === 'H3' && currentElement.textContent === tableConfig?.title) {
                    elementToHighlight = currentElement;
                    break;
                }
                currentElement = currentElement.previousElementSibling;
            }
            if (!elementToHighlight) {
                console.warn(`[highlightAndScrollSedoItem V2 - –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã ${tableIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                elementToHighlight = tableElement;
            }
        } else if (fieldToHighlight === 'staticListItem' && tableConfig?.isStaticList) {
            const listItems = tableElement.querySelectorAll('ul li');
            if (listItems && typeof rowIndex === 'number' && listItems[rowIndex]) {
                elementToHighlight = listItems[rowIndex];
            } else {
                console.warn(`[highlightAndScrollSedoItem V2 - –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${rowIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ ${tableIndex}.`);
                elementToHighlight = tableElement;
            }
        } else {

            const numericRowIndex = (typeof rowIndex === 'string' && !isNaN(parseInt(rowIndex, 10))) ? parseInt(rowIndex, 10) : rowIndex;

            if (typeof numericRowIndex !== 'number') {
                console.warn(`[highlightAndScrollSedoItem V2 - –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ (rowIndex: ${rowIndex}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã ${tableIndex}. –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü–µ.`);
                elementToHighlight = tableElement;
            } else {
                const rowElement = tableElement.querySelector(`tbody tr:nth-child(${numericRowIndex + 1})`);
                if (!rowElement) {
                    console.warn(`[highlightAndScrollSedoItem V2 - –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${numericRowIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ ${tableIndex}.`);
                    elementToHighlight = tableElement;
                } else {
                    const cells = Array.from(rowElement.querySelectorAll('td'));
                    let targetCellFound = false;

                    if (tableConfig && tableConfig.items && tableConfig.items[numericRowIndex]) {
                        const rowData = tableConfig.items[numericRowIndex];
                        const rowKeys = Object.keys(rowData);
                        const columnIndexByKey = rowKeys.indexOf(String(fieldToHighlight));

                        if (columnIndexByKey !== -1 && cells[columnIndexByKey]) {
                            elementToHighlight = cells[columnIndexByKey];
                            targetCellFound = true;
                        } else {

                            for (let i = 0; i < cells.length; i++) {
                                if (cells[i].dataset.colKey === String(fieldToHighlight)) {
                                    elementToHighlight = cells[i];
                                    targetCellFound = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!targetCellFound) {
                        elementToHighlight = rowElement;
                        console.warn(`[highlightAndScrollSedoItem V2 - –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –Ø—á–µ–π–∫–∞ –¥–ª—è –ø–æ–ª—è "${fieldToHighlight}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${numericRowIndex}, —Ç–∞–±–ª–∏—Ü–µ ${tableIndex}. –í—ã–¥–µ–ª—è–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É.`);
                    }
                }
            }
        }

        if (!elementToHighlight) {
            console.warn(`[highlightAndScrollSedoItem V2 - –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ ${tableIndex}.`);
            if (attempt === MAX_RETRIES - 1) {
                if (typeof showNotification === 'function') showNotification("–ù–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –°–≠–î–û –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏.", "warning");
                return;
            }
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
            continue;
        }


        if (elementToHighlight.offsetParent !== null) {
            elementToHighlight.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'nearest' });
            if (typeof highlightElement === 'function') {
                highlightElement(elementToHighlight, highlightTerm);
            } else {
                console.error("highlightAndScrollSedoItem V2: —Ñ—É–Ω–∫—Ü–∏—è highlightElement –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }
            console.log(`[highlightAndScrollSedoItem V2] –≠–ª–µ–º–µ–Ω—Ç –°–≠–î–û (—Ç–∞–±–ª–∏—Ü–∞: ${tableIndex}, –ø–æ–ª–µ: ${fieldToHighlight}) –ø–æ–¥—Å–≤–µ—á–µ–Ω –∏ –ø—Ä–æ—Å–∫—Ä–æ–ª–ª–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}`);
            return;
        } else {
            console.warn(`[highlightAndScrollSedoItem V2 - –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}] –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –≤–∏–¥–∏–º (offsetParent is null).`);
            if (attempt === MAX_RETRIES - 1) {

                if (typeof highlightElement === 'function') {
                    highlightElement(elementToHighlight, highlightTerm);
                }
                if (typeof showNotification === 'function') showNotification("–¶–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –°–≠–î–û –Ω–∞–π–¥–µ–Ω, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é.", "info");
                return;
            }
            await new Promise(resolve => requestAnimationFrame(() => setTimeout(resolve, RETRY_DELAY)));
        }
    }

    console.error(`[highlightAndScrollSedoItem V2] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –°–≠–î–û –ø–æ—Å–ª–µ ${MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫.`);
    if (typeof showNotification === 'function') showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç—É –°–≠–î–û. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", "error");
}


const DEFAULT_SEDO_DATA = {
    id: SEDO_CONFIG_KEY,
    articleLinks: ["https://track.astral.ru/support/pages/viewpage.action?pageId=11404156"],
    tables: [
        {
            title: "–í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–≠–î–û: –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –ø–æ—Å–æ–±–∏–π –∏ –ø—Ä—è–º—ã–º –≤—ã–ø–ª–∞—Ç–∞–º",
            columns: ["–ö–æ–¥", "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –°–≠–î–û (–∫–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ)", "–ì–¥–µ —É–≤–∏–¥–µ—Ç—å –≤ 1–°"],
            codeField: "code",
            items: [
                { code: "10", name: "–ò–∑–≤–µ—â–µ–Ω–∏–µ –ü–í–°–û", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –ò–∑–≤–µ—â–µ–Ω–∏–µ –°–≠–î–û –°–§–† (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è ‚Äì –ò–∑–≤–µ—â–µ–Ω–∏—è –°–≠–î–û –°–§–†)" },
                { code: "11", name: "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è", in1C: "–†–µ–≥–∏—Å—Ç—Ä –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–≠–î–û –°–§–† (–±—ã–≤—à. –§–°–°)" },
                { code: "87", name: "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–≤–µ–¥–µ–Ω–∏–π –æ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–º –ª–∏—Ü–µ", in1C: "–†–µ–≥–∏—Å—Ç—Ä –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–≠–î–û –°–§–† (–±—ã–≤—à. –§–°–°)" },
                { code: "88", name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–≤–µ–¥–µ–Ω–∏–π –æ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–º –ª–∏—Ü–µ", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–≤–µ–¥–µ–Ω–∏–π –æ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–º –ª–∏—Ü–µ (–°–≠–î–û –°–§–†) (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è ‚Äì –ó–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞ (–°–≠–î–û) ‚Äì –°–º. —Ç–∞–∫–∂–µ: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è)" },
                { code: "100", name: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Å–≤–µ–¥–µ–Ω–∏–π –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –°–§–† –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Å–æ–±–∏—è (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è ‚Äì –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –°–§–† –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Å–æ–±–∏–π)" },
                { code: "105", name: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–≤–µ–¥–µ–Ω–∏–π –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è", in1C: "–ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏–µ–º–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –°–§–† –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Å–æ–±–∏—è (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è ‚Äì –û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –°–§–† –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Å–æ–±–∏–π)" },
                { code: "106", name: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –æ—Ç–ø—É—Å–∫–∞", in1C: "–ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏–µ–º–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –æ—Ç–ø—É—Å–∫–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–µ–±–µ–Ω–∫–æ–º (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è ‚Äì –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –æ—Ç–ø—É—Å–∫–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–µ–±–µ–Ω–∫–æ–º)" },
                { code: "107", name: "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤—É", in1C: "–†–µ–≥–∏—Å—Ç—Ä –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–≠–î–û –°–§–† (–±—ã–≤—à. –§–°–°)" },
                { code: "110", name: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ—Å–æ–±–∏—è", in1C: "–†–µ–≥–∏—Å—Ç—Ä –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–≠–î–û –°–§–† (–±—ã–≤—à. –§–°–°)" },
                { code: "111", name: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≠–õ–ù", in1C: "–†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –°–æ–æ–±—â–µ–Ω–∏—è –§–°–° –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≠–õ–ù (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è)" },
                { code: "112", name: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö", in1C: "–†–µ–≥–∏—Å—Ç—Ä –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–≠–î–û –°–§–† (–±—ã–≤—à. –§–°–°)" },
                { code: "321", name: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç –§–æ–Ω–¥–∞ —Å–≤–µ–¥–µ–Ω–∏–π –æ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –°—Ä–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–æ –¥–∞–Ω–Ω—ã–º –°–§–† (–°–≠–î–û) (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è)" }
            ]
        },
        {
            title: "–í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–≠–î–û: –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö –∏ —Å–≤–µ—Ä–∫–µ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å –°–§–†",
            columns: ["–ö–æ–¥", "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –°–≠–î–û (–∫–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ)", "–ì–¥–µ —É–≤–∏–¥–µ—Ç—å –≤ 1–°"],
            codeField: "code",
            items: [
                { code: "300", name: "–ê–∫—Ç –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "301", name: "–†–µ—à–µ–Ω–∏–µ –æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "302", name: "–†–µ—à–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "303", name: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "304", name: "–†–µ—à–µ–Ω–∏–µ –æ –≤–æ–∑–º–µ—â–µ–Ω–∏–∏ –∏–∑–ª–∏—à–Ω–µ –ø–æ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "305", name: "–ê–∫—Ç –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "306", name: "–†–µ—à–µ–Ω–∏–µ –æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "307", name: "–†–µ—à–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "308", name: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "309", name: "–†–µ—à–µ–Ω–∏–µ –æ –≤–æ–∑–º–µ—â–µ–Ω–∏–∏ –∏–∑–ª–∏—à–Ω–µ –ø–æ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "310", name: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ–± —É–ø–ª–∞—Ç–µ –Ω–µ–¥–æ–∏–º–∫–∏ –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤—ã–º –≤–∑–Ω–æ—Å–∞–º, –ø–µ–Ω–µ–π –∏ —à—Ç—Ä–∞—Ñ–æ–≤", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "311", name: "–†–µ—à–µ–Ω–∏–µ –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "312", name: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ –≤–æ–∑–º–µ—â–µ–Ω–∏–∏ –∏–∑–ª–∏—à–Ω–µ –ø–æ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á—Ç–µ–Ω–æ—Å—Ç—å ‚Äì –í—Ö–æ–¥—è—â–∏–µ ‚Äì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { code: "315", name: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ (–æ—Ç–∫–∞–∑–µ –≤ –ø—Ä–∏–µ–º–µ) —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–º –æ—Ä–≥–∞–Ω–æ–º –§–æ–Ω–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å ‚Äì –ü–∏—Å—å–º–∞" },
                { code: "316", name: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ (–æ—Ç–∫–∞–∑–µ –≤ –ø—Ä–∏–µ–º–µ) —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–º –æ—Ä–≥–∞–Ω–æ–º –§–æ–Ω–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ", in1C: "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å ‚Äì –ü–∏—Å—å–º–∞" },
                { code: "318", name: "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö", in1C: "–°—Å—ã–ª–∫–∞ –≠—Ç–∞–ø—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–µ—Ä–∫—É: –°–ø—Ä–∞–≤–∫–∞ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö (–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å ‚Äì –°–≤–µ—Ä–∫–∏)" },
                { code: "319", name: "–°–ø—Ä–∞–≤–∫–∞ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö", in1C: "–°—Å—ã–ª–∫–∞ –°–ø—Ä–∞–≤–∫–∞ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–µ—Ä–∫—É: –°–ø—Ä–∞–≤–∫–∞ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö (–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å ‚Äì –°–≤–µ—Ä–∫–∏)" }
            ]
        },
        {
            title: "–ò—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–≠–î–û: –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –ø–æ—Å–æ–±–∏–π –∏ –ø—Ä—è–º—ã–º –≤—ã–ø–ª–∞—Ç–∞–º",
            columns: ["–ö–æ–¥", "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –°–≠–î–û", "–ì–¥–µ —É–≤–∏–¥–µ—Ç—å –≤ 1–°"],
            codeField: "code",
            items: [
                { code: "86", name: "–°–≤–µ–¥–µ–Ω–∏—è –æ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–º –ª–∏—Ü–µ", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –°–≤–µ–¥–µ–Ω–∏—è –æ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–º –ª–∏—Ü–µ (–°–≠–î–û) (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è ‚Äì –ó–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞ (–°–≠–î–û))" },
                { code: "101", name: "–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–≤–µ–¥–µ–Ω–∏–π –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –°–§–† –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Å–æ–±–∏—è (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è ‚Äì –û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –°–§–† –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Å–æ–±–∏–π)" },
                { code: "104", name: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –æ—Ç–ø—É—Å–∫–∞", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –æ—Ç–ø—É—Å–∫–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–µ–±–µ–Ω–∫–æ–º (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è ‚Äì –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –æ—Ç–ø—É—Å–∫–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–µ–±–µ–Ω–∫–æ–º)" },
                { code: "109", name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–º —Å–ª—É—á–∞–µ –°–§–† (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è ‚Äì –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö —Å–ª—É—á–∞—è—Ö –°–§–†)" },
                { code: "320", name: "–ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç –§–æ–Ω–¥–∞ —Å–≤–µ–¥–µ–Ω–∏–π –æ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –°–§–† –æ —Å—Ä–µ–¥–Ω–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–µ (–ö–∞–¥—Ä—ã ‚Äì –ü–æ—Å–æ–±–∏—è ‚Äì –ó–∞–ø—Ä–æ—Å—ã –¥–∞–Ω–Ω—ã—Ö –°–§–† –æ —Å—Ä–µ–¥–Ω–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–µ)" }
            ]
        },
        {
            title: "–ò—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–≠–î–û: –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö –∏ —Å–≤–µ—Ä–∫–µ –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤",
            columns: ["–ö–æ–¥", "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –°–≠–î–û", "–ì–¥–µ —É–≤–∏–¥–µ—Ç—å –≤ 1–°"],
            codeField: "code",
            items: [
                { code: "313", name: "–û—Ç–≤–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –û—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –°–§–† (–±—ã–≤—à. –§–°–°) (–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å ‚Äì –ü–∏—Å—å–º–∞)" },
                { code: "314", name: "–û—Ç–≤–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –û—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –°–§–† (–±—ã–≤—à. –§–°–°) (–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å ‚Äì –ü–∏—Å—å–º–∞)" },
                { code: "317", name: "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö", in1C: "–î–æ–∫—É–º–µ–Ω—Ç –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–µ—Ä–∫—É: –°–ø—Ä–∞–≤–∫–∞ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö (–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞–≤–∫–∏ ‚Äì 1–°-–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å ‚Äì –°–≤–µ—Ä–∫–∏)" }
            ]
        },
        {
            title: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –°–≠–î–û (–û–±—â–µ–µ)",
            columns: ["–¢–∏–ø", "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "–û–ø–∏—Å–∞–Ω–∏–µ"],
            editableCells: [false, false, true],
            codeField: "type",
            items: [
                { type: "1000009", sender: "–û–ø–µ—Ä–∞—Ç–æ—Ä", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –≤–æ–∑–Ω–∏–∫—à–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏" },
                { type: "1000011", sender: "–û–ø–µ—Ä–∞—Ç–æ—Ä", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏" },
                { type: "1000014", sender: "–û–ø–µ—Ä–∞—Ç–æ—Ä", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ" },
                { type: "1", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" },
                { type: "5", sender: "–§–æ–Ω–¥", description: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞ –≠–õ–ù –≤ –ú–û" },
                { type: "6", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è" },
                { type: "10", sender: "–§–æ–Ω–¥", description: "–ò–∑–≤–µ—â–µ–Ω–∏–µ –ü–í–°–û" },
                { type: "11", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è" },
                { type: "14", sender: "–§–æ–Ω–¥", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ" },
                { type: "15", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ü–û–í–≠–î" },
                { type: "16", sender: "–§–æ–Ω–¥", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ü–û–í–≠–î" },
                { type: "27", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ—á–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –°–≠–î–û" },
                { type: "28", sender: "–§–æ–Ω–¥", description: "–ü–µ—Ä–µ—á–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –°–≠–î–û" },
                { type: "31", sender: "–§–æ–Ω–¥", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—Ä–µ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤–∑–Ω–æ—Å–æ–≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞" },
                { type: "42", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–†–µ–µ—Å—Ç—Ä —Å–≤–µ–¥–µ–Ω–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π, —è–≤–ª—è—é—â–∏—Ö—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç" },
                { type: "43", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞ —Å–≤–µ–¥–µ–Ω–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π, —è–≤–ª—è—é—â–∏—Ö—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç" },
                { type: "84", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã –ø–æ—Å–æ–±–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤—É" },
                { type: "85", sender: "–§–æ–Ω–¥", description: "–°—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç—ã –ø–æ—Å–æ–±–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤—É" },
                { type: "86", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–°–≤–µ–¥–µ–Ω–∏—è –æ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–º –ª–∏—Ü–µ" },
                { type: "87", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–≤–µ–¥–µ–Ω–∏–π –æ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–º –ª–∏—Ü–µ" },
                { type: "88", sender: "–§–æ–Ω–¥", description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–≤–µ–¥–µ–Ω–∏–π –æ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–º –ª–∏—Ü–µ" },
                { type: "94", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–°–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞ (—Å–≤–µ—Ä—Ö –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ –æ–ø–ª–∞—á–∏–≤–∞–µ–º–æ–≥–æ –æ—Ç–ø—É—Å–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏) –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –ª–µ—á–µ–Ω–∏—è –∏ –ø—Ä–æ–µ–∑–¥–∞ –∫ –º–µ—Å—Ç—É –ª–µ—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞—Ç–Ω–æ" },
                { type: "95", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ–¥–µ–Ω–∏–π –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞ (—Å–≤–µ—Ä—Ö –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ –æ–ø–ª–∞—á–∏–≤–∞–µ–º–æ–≥–æ –æ—Ç–ø—É—Å–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏) –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –ª–µ—á–µ–Ω–∏—è –∏ –ø—Ä–æ–µ–∑–¥–∞ –∫ –º–µ—Å—Ç—É –ª–µ—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞—Ç–Ω–æ" },
                { type: "100", sender: "–§–æ–Ω–¥", description: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Å–≤–µ–¥–µ–Ω–∏–π –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è" },
                { type: "101", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã" },
                { type: "104", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –æ—Ç–ø—É—Å–∫–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–µ–±–µ–Ω–∫–æ–º –¥–æ –ø–æ–ª—É—Ç–æ—Ä–∞ –ª–µ—Ç" },
                { type: "105", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å" },
                { type: "106", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
                { type: "107", sender: "–§–æ–Ω–¥", description: "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤—É" },
                { type: "109", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö" },
                { type: "110", sender: "–§–æ–Ω–¥", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ—Å–æ–±–∏—è" },
                { type: "111", sender: "–§–æ–Ω–¥", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≠–õ–ù" },
                { type: "112", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö" },
                { type: "120", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –≤–æ–∑–º–µ—â–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö" },
                { type: "121", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è –æ –≤–æ–∑–º–µ—â–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –¥–µ—Ç—å–º–∏-–∏–Ω–≤–∞–ª–∏–¥–∞–º–∏" },
                { type: "122", sender: "–§–æ–Ω–¥", description: "–†–µ—à–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –≤–æ–∑–º–µ—â–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –¥–µ—Ç—å–º–∏-–∏–Ω–≤–∞–ª–∏–¥–∞–º–∏" },
                { type: "124", sender: "–§–æ–Ω–¥", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –æ —Ç–æ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ–¥–µ–Ω–∏–π –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è (101 —Å–æ–æ–±—â–µ–Ω–∏–µ) –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª –≤ —Å—Ä–æ–∫–∏, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ü–ü –†–§ ‚Ññ 2010 –æ—Ç 23 –Ω–æ—è–±—Ä—è 2021 –≥." },
                { type: "200", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏" },
                { type: "201", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–û—Ç–∑—ã–≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏" },
                { type: "202", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π" },
                { type: "203", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ó–∞–ø—Ä–æ—Å –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏" },
                { type: "205", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ó–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ø–æ–ª–Ω–æ–º–æ—á–∏–π" },
                { type: "206", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏" },
                { type: "207", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∑—ã–≤–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏" },
                { type: "208", sender: "–§–æ–Ω–¥", description: "–°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π" },
                { type: "209", sender: "–§–æ–Ω–¥", description: "–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏" },
                { type: "211", sender: "–§–æ–Ω–¥", description: "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–ª–Ω–æ–º–æ—á–∏–π" },
                { type: "300", sender: "–§–æ–Ω–¥", description: "–ê–∫—Ç –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏" },
                { type: "301", sender: "–§–æ–Ω–¥", description: "–†–µ—à–µ–Ω–∏–µ –æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏" },
                { type: "302", sender: "–§–æ–Ω–¥", description: "–†–µ—à–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏" },
                { type: "303", sender: "–§–æ–Ω–¥", description: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ" },
                { type: "304", sender: "–§–æ–Ω–¥", description: "–†–µ—à–µ–Ω–∏–µ –æ –≤–æ–∑–º–µ—â–µ–Ω–∏–∏ –∏–∑–ª–∏—à–Ω–µ –ø–æ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏" },
                { type: "305", sender: "–§–æ–Ω–¥", description: "–ê–∫—Ç –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏" },
                { type: "306", sender: "–§–æ–Ω–¥", description: "–†–µ—à–µ–Ω–∏–µ –æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏" },
                { type: "307", sender: "–§–æ–Ω–¥", description: "–†–µ—à–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏" },
                { type: "308", sender: "–§–æ–Ω–¥", description: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ" },
                { type: "309", sender: "–§–æ–Ω–¥", description: "–†–µ—à–µ–Ω–∏–µ –æ –≤–æ–∑–º–µ—â–µ–Ω–∏–∏ –∏–∑–ª–∏—à–Ω–µ –ø–æ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏" },
                { type: "310", sender: "–§–æ–Ω–¥", description: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ–± —É–ø–ª–∞—Ç–µ –Ω–µ–¥–æ–∏–º–∫–∏ –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤—ã–º –≤–∑–Ω–æ—Å–∞–º, –ø–µ–Ω–µ–π –∏ —à—Ç—Ä–∞—Ñ–æ–≤" },
                { type: "311", sender: "–§–æ–Ω–¥", description: "–†–µ—à–µ–Ω–∏–µ –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏" },
                { type: "312", sender: "–§–æ–Ω–¥", description: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ –≤–æ–∑–º–µ—â–µ–Ω–∏–∏ –∏–∑–ª–∏—à–Ω–µ –ø–æ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤" },
                { type: "313", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–û—Ç–≤–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞–º–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ" },
                { type: "314", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–û—Ç–≤–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –≤—ã–µ–∑–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ" },
                { type: "315", sender: "–§–æ–Ω–¥", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ (–æ—Ç–∫–∞–∑–µ –≤ –ø—Ä–∏–µ–º–µ)" },
                { type: "316", sender: "–§–æ–Ω–¥", description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ (–æ—Ç–∫–∞–∑–µ –≤ –ø—Ä–∏–µ–º–µ)" },
                { type: "317", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö" },
                { type: "318", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö" },
                { type: "319", sender: "–§–æ–Ω–¥", description: "–°–ø—Ä–∞–≤–∫–∞ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö" },
                { type: "320", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç –§–æ–Ω–¥–∞ —Å–≤–µ–¥–µ–Ω–∏–π –æ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞" },
                { type: "321", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç –§–æ–Ω–¥–∞ —Å–≤–µ–¥–µ–Ω–∏–π –æ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞" },
                { type: "330", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö" },
                { type: "331", sender: "–û–ø–µ—Ä–∞—Ç–æ—Ä", description: "–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö" },
                { type: "332", sender: "–§–æ–Ω–¥", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö" },
                { type: "1000", sender: "–°—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—å", description: "–û—Ç–≤–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –°–§–†" },
                { type: "1001", sender: "–§–æ–Ω–¥", description: "–û–±—Ä–∞—â–µ–Ω–∏–µ –°–§–† –∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—é" }
            ]
        },
        {
            title: "–¢–∏–ø—ã –ø–æ—Å–æ–±–∏–π –°–≠–î–û",
            columns: ["–ö–æ–¥", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å–æ–±–∏—è"],
            editableCells: [false, true],
            codeField: "code",
            items: [
                { code: "1", name: "–ü–æ—Å–æ–±–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏" },
                { code: "2", name: "–ü–æ—Å–æ–±–∏–µ –ø–æ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–æ–¥–∞–º" },
                { code: "4", name: "–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ—Å–æ–±–∏–µ –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞" },
                { code: "5", name: "–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø–æ—Å–æ–±–∏–µ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–µ–±–µ–Ω–∫–æ–º" },
                { code: "6", name: "–ü–æ—Å–æ–±–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å–≤—è–∑–∏ —Å –Ω–µ—Å—á–∞—Å—Ç–Ω—ã–º —Å–ª—É—á–∞–µ–º –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ–º" }
            ]
        }
    ]
};


let currentSedoData = JSON.parse(JSON.stringify(DEFAULT_SEDO_DATA));
let originalSedoDataBeforeEdit = JSON.parse(JSON.stringify(DEFAULT_SEDO_DATA));
let isSedoEditing = false;

function initSedoTypesSystem() {
    injectSedoEditStyles();

    loadSedoData().then(data => {
        currentSedoData = data;
        renderSedoTypesContent(currentSedoData, false, '');
    }).catch(error => {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –°–≠–î–û:", error);
        if (typeof showNotification === 'function') {
            showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –°–≠–î–û.", "error");
        }
    });

    console.log("–°–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –°–≠–î–û –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (v2, –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫).");
}


function toggleSedoEditMode(isEditing) {
    console.log(`[toggleSedoEditMode V.Fixed] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞: ${isEditing}`);
    isSedoEditing = isEditing;

    if (isEditing) {
        originalSedoDataBeforeEdit = JSON.parse(JSON.stringify(currentSedoData));
        console.log("[toggleSedoEditMode V.Fixed] –°–æ—Å—Ç–æ—è–Ω–∏–µ originalSedoDataBeforeEdit –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.");
    }

    renderSedoTypesContent(currentSedoData, isEditing);
    console.log(`[toggleSedoEditMode V.Fixed] renderSedoTypesContent –≤—ã–∑–≤–∞–Ω–∞ —Å isEditing=${isEditing}`);
}


function renderSedoTypesContent(data, isEditing, searchQuery = '') {
    const SEDO_TAB_PANEL_ID = 'sedoTypesContent';
    const SEDO_RENDER_TARGET_ID = 'sedoTypesRenderContainer';
    const sedoTabPanel = document.getElementById(SEDO_TAB_PANEL_ID);

    if (!sedoTabPanel) {
        console.log(`[SedoRender V.Fixed] –ü–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–∫–∏ #${SEDO_TAB_PANEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω.`);
        return;
    }

    sedoTabPanel.innerHTML = '';
    let mainContentContainer = document.createElement('div');
    mainContentContainer.id = SEDO_RENDER_TARGET_ID;
    sedoTabPanel.appendChild(mainContentContainer);
    sedoTabPanel.dataset.isEditing = String(isEditing);


    if (!data) {
        console.error(`[SedoRender V.Fixed] –û—à–∏–±–∫–∞: –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (data is ${data}).`);
        mainContentContainer.innerHTML = '<p class="text-red-500 text-center p-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>';
        return;
    }

    mainContentContainer.className = "bg-white dark:bg-slate-800 p-4 md:p-6 rounded-lg shadow-lg flex flex-col h-full";
    mainContentContainer.classList.toggle('sedo-is-editing', isEditing);

    console.log(`[SedoRender V.Fixed] –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞. –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${isEditing}.`);

    const fragment = document.createDocumentFragment();

    const headerContainer = document.createElement('div');
    headerContainer.className = 'flex flex-wrap gap-y-2 justify-between items-center mb-4 flex-shrink-0';
    const titleHeader = document.createElement('h2');
    titleHeader.className = 'text-2xl font-bold text-gray-800 dark:text-gray-200';
    titleHeader.textContent = '–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –°–≠–î–û';
    const buttonsContainer = document.createElement('div');
    buttonsContainer.className = 'flex items-center gap-2';

    if (isEditing) {
        const saveBtn = document.createElement('button');
        saveBtn.id = 'sedoMainSaveButton';
        saveBtn.className = 'bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors flex items-baseline text-sm font-medium';
        saveBtn.innerHTML = '<i class="fas fa-save mr-2"></i>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        saveBtn.addEventListener('click', saveSedoChanges);

        const cancelBtn = document.createElement('button');
        cancelBtn.id = 'sedoMainCancelButton';
        cancelBtn.className = 'bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 transition-colors flex items-baseline text-sm font-medium';
        cancelBtn.innerHTML = '<i class="fas fa-times mr-2"></i>–û—Ç–º–µ–Ω–∞';
        cancelBtn.addEventListener('click', () => {
            if (confirm("–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É?")) {
                currentSedoData = JSON.parse(JSON.stringify(originalSedoDataBeforeEdit));
                toggleSedoEditMode(false);
                if (typeof showNotification === 'function') showNotification("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.", "info");
            }
        });

        buttonsContainer.appendChild(saveBtn);
        buttonsContainer.appendChild(cancelBtn);

    } else {
        const editBtn = document.createElement('button');
        editBtn.id = 'sedoMainEditButton';
        editBtn.className = 'bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition-colors flex items-baseline text-sm font-medium';
        editBtn.innerHTML = '<i class="fas fa-edit mr-2"></i>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
        editBtn.addEventListener('click', () => toggleSedoEditMode(true));
        buttonsContainer.appendChild(editBtn);
    }
    headerContainer.appendChild(titleHeader);
    headerContainer.appendChild(buttonsContainer);
    fragment.appendChild(headerContainer);

    if (!isEditing) {
        const searchContainer = document.createElement('div');
        searchContainer.id = 'sedoSearchContainer';
        searchContainer.className = 'relative mb-4 flex-shrink-0';
        const searchInput = document.createElement('input');
        searchInput.type = 'text';
        searchInput.id = 'sedoSearchInput';
        searchInput.placeholder = '–ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–¥–µ–ª—É –°–≠–î–û...';
        searchInput.className = 'w-full pl-4 pr-10 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary text-gray-900 dark:text-gray-100';
        searchInput.value = searchQuery;

        const clearSearchBtn = document.createElement('button');
        clearSearchBtn.id = 'clearSedoSearchBtn';
        clearSearchBtn.className = 'absolute inset-y-0 right-0 px-3 text-gray-500 hover:text-white-700';
        clearSearchBtn.title = '–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫';
        clearSearchBtn.innerHTML = '<i class="fas fa-times"></i>';
        clearSearchBtn.classList.toggle('hidden', !searchQuery);

        searchInput.addEventListener('input', debounce(handleSedoSearch, 300));

        clearSearchBtn.addEventListener('click', () => {
            searchInput.value = '';
            handleSedoSearch();
        });

        searchContainer.appendChild(searchInput);
        searchContainer.appendChild(clearSearchBtn);
        fragment.appendChild(searchContainer);
    }

    const infoContainer = document.createElement('div');
    infoContainer.id = 'sedoTypesInfoContainer';
    infoContainer.className = "flex-grow min-h-0 overflow-y-auto custom-scrollbar -mr-4 pr-4";

    _renderSedoContentInner(infoContainer, data, isEditing, searchQuery);

    fragment.appendChild(infoContainer);
    mainContentContainer.appendChild(fragment);
}


async function saveSedoChanges() {
    console.log("[SedoSave Refactored V4 - DOM READ] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –°–≠–î–û...");
    const saveBtn = document.getElementById('sedoMainSaveButton');
    if (saveBtn) {
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
    }

    const mainContentContainer = document.getElementById('sedoTypesContent');
    if (!mainContentContainer) {
        console.error("[SedoSave V4] –ù–µ –Ω–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä #sedoTypesContent.");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.", "error");
        if (saveBtn) { saveBtn.disabled = false; saveBtn.innerHTML = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'; }
        return false;
    }

    const newData = JSON.parse(JSON.stringify(originalSedoDataBeforeEdit));

    try {
        const linksEditInput = mainContentContainer.querySelector('#sedoArticleLinksEditInput');
        if (linksEditInput) {
            const lines = linksEditInput.value.split('\n');
            newData.articleLinks = lines.map(lineOriginal => {
                const line = lineOriginal.trim();
                if (!line) return null;
                const parts = line.split('|');
                const firstPart = parts[0].trim();
                const textPart = parts.length > 1 ? parts.slice(1).join('|').trim() : '';
                let isUrlValid = false, validatedUrlString = null;
                if (firstPart) {
                    let urlToTest = firstPart.startsWith('www.') ? 'http://' + firstPart : firstPart;
                    try {
                        const urlObj = new URL(urlToTest);
                        if (urlObj.protocol && urlObj.hostname) { isUrlValid = true; validatedUrlString = urlObj.href; }
                    } catch (_) { }
                }
                return isUrlValid ? { url: validatedUrlString, text: textPart } : { text: line };
            }).filter(Boolean);
        }

        const tableContainers = mainContentContainer.querySelectorAll('.sedo-table-container');
        for (const tableContainer of tableContainers) {
            const tableIndex = parseInt(tableContainer.dataset.tableIndex, 10);
            if (isNaN(tableIndex) || !newData.tables[tableIndex]) continue;

            const titleInput = tableContainer.querySelector('.sedo-table-title-edit');
            if (titleInput && titleInput.value.trim()) {
                newData.tables[tableIndex].title = titleInput.value.trim();
            } else if (titleInput) {
                showNotification(`–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã ${tableIndex + 1} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`, "warning");
                if (saveBtn) { saveBtn.disabled = false; saveBtn.innerHTML = '<i class="fas fa-save mr-2"></i>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'; }
                return false;
            }

            const table = tableContainer.querySelector('table.sedo-table');
            if (table) {
                const headerInputs = table.querySelectorAll('.sedo-column-header-edit');
                headerInputs.forEach((input, colIndex) => {
                    const colName = input.value.trim();
                    if (colName) {
                        newData.tables[tableIndex].columns[colIndex] = colName;
                    } else {
                        const errorMsg = `–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ ${colIndex + 1} –≤ —Ç–∞–±–ª–∏—Ü–µ "${newData.tables[tableIndex].title}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
                        showNotification(errorMsg, "warning");
                        throw new Error(errorMsg);
                    }
                });

                const rows = table.querySelectorAll('tbody tr');
                rows.forEach((row, rowIndex) => {
                    if (!newData.tables[tableIndex].items[rowIndex]) newData.tables[tableIndex].items[rowIndex] = {};
                    const cells = row.querySelectorAll('td.editing-cell');
                    cells.forEach(cell => {
                        const colKey = cell.dataset.colKey;
                        if (colKey) {
                            newData.tables[tableIndex].items[rowIndex][colKey] = cell.textContent.trim();
                        }
                    });
                });
            } else {
                const listElement = tableContainer.querySelector('ul.editing-cell');
                if (listElement) {
                    const newItems = Array.from(listElement.querySelectorAll('li'))
                        .map(li => li.textContent.trim())
                        .filter(Boolean);
                    newData.tables[tableIndex].items = newItems;
                }
            }
        }

        const dataToSave = { ...newData, id: SEDO_CONFIG_KEY };
        console.log("[SedoSave V4] –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", JSON.parse(JSON.stringify(dataToSave)));

        await saveToIndexedDB('preferences', dataToSave);
        console.log("[SedoSave V4] –î–∞–Ω–Ω—ã–µ –°–≠–î–û —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ IndexedDB.");

        if (typeof updateSearchIndex === 'function') {
            await updateSearchIndex('preferences', SEDO_CONFIG_KEY, dataToSave, 'update', originalSedoDataBeforeEdit);
            console.log("[SedoSave V4] –ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –°–≠–î–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.");
        }

        currentSedoData = JSON.parse(JSON.stringify(dataToSave));
        originalSedoDataBeforeEdit = JSON.parse(JSON.stringify(dataToSave));

        toggleSedoEditMode(false);
        showNotification("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∏–ø–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –°–≠–î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", "success");
        return true;
    } catch (error) {
        if (error.message.includes("–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")) {
            if (saveBtn) { saveBtn.disabled = false; saveBtn.innerHTML = '<i class="fas fa-save mr-2"></i>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'; }
            return false;
        }
        console.error("[SedoSave V4] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –°–≠–î–û:", error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –°–≠–î–û.", "error");
        return false;
    } finally {
        if (saveBtn && !saveBtn.disabled) {
            saveBtn.disabled = false;
            saveBtn.innerHTML = '<i class="fas fa-save mr-2"></i>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        }
    }
}


function injectSedoEditStyles() {
    const styleId = 'sedo-edit-mode-styles';
    if (document.getElementById(styleId)) {
        return;
    }

    const style = document.createElement('style');
    style.id = styleId;
    style.textContent = `
        .sedo-is-editing .editing-cell {
            color: #ff0000 !important;
            padding: 8px 10px !important;
            line-height: 1.5;
            padding: 15px !important;
        }

        .sedo-table-title-edit {
            color: #ff0000 !important;
        }

        .sedo-is-editing th {
            color: #ff0000 !important;
            padding: 8px 10px !important;
            font-size: 105%;
        }

        .sedo-is-editing tr {
            color: #ff0000 !important;
            padding: 8px 10px !important;
            font-size: 105%;
        }

        .sedo-is-editing ul.editing-cell {
            padding: 15px !important;
            line-height: 1.6;
        }

        .sedo-is-editing #sedoArticleLinksEditInput{
            padding: 15px !important;
            line-height: 1.6;
        }
    `;
    document.head.appendChild(style);
    console.log("–°—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–≠–î–û —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.");
}


function ensureSedoFullscreenOverlay() {
    let overlay = document.getElementById('sedoFullscreenOverlay');
    if (!overlay) {
        overlay = document.createElement('div');
        overlay.id = 'sedoFullscreenOverlay';

        overlay.className = 'fixed inset-0 bg-gray-900 bg-opacity-75 dark:bg-opacity-85 z-[95] hidden items-center justify-center p-2 sm:p-4';
        overlay.innerHTML = `
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full h-full flex flex-col overflow-hidden">
                <div class="flex-shrink-0 px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                    <h2 id="sedoFullscreenTitle" class="text-base sm:text-lg font-semibold text-gray-900 dark:text-gray-100 truncate pr-2">–ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø—ã –°–≠–î–û</h2>
                    <button id="closeSedoFullscreenBtn" class="p-1.5 sm:p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded-full hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors" title="–ó–∞–∫—Ä—ã—Ç—å (Esc)">
                        <i class="fas fa-times text-lg sm:text-xl"></i>
                    </button>
                </div>
                <div id="sedoFullscreenContent" class="flex-1 overflow-auto p-3 sm:p-4">
                </div>
            </div>
        `;
        document.body.appendChild(overlay);

        const closeButton = overlay.querySelector('#closeSedoFullscreenBtn');
        if (closeButton) {
            closeButton.addEventListener('click', closeSedoTableFullscreen);
        }


        overlay.addEventListener('click', function (event) {
            if (event.target === overlay) {
                closeSedoTableFullscreen();
            }
        });
        console.log("Fullscreen overlay –¥–ª—è –°–≠–î–û —Å–æ–∑–¥–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
    }
    return overlay;
}


function handleSedoTableFullscreen(tableIndex) {
    const overlay = ensureSedoFullscreenOverlay();
    const titleElementInOverlay = overlay.querySelector('#sedoFullscreenTitle');
    const contentElementInOverlay = overlay.querySelector('#sedoFullscreenContent');

    if (!currentSedoData || !currentSedoData.tables || !currentSedoData.tables[tableIndex]) {
        console.error(`–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å –∏–Ω–¥–µ–∫—Å–æ–º ${tableIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ currentSedoData.`);
        if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", "error");
        return;
    }

    const tableConfig = currentSedoData.tables[tableIndex];
    const actualOriginalTitleText = tableConfig.title || `–¢–∞–±–ª–∏—Ü–∞ ${tableIndex + 1}`;

    contentElementInOverlay.innerHTML = '';

    if (titleElementInOverlay) {
        titleElementInOverlay.textContent = actualOriginalTitleText;
        titleElementInOverlay.title = actualOriginalTitleText;
    }

    if (tableConfig.isStaticList) {

        const originalButton = document.querySelector(`#sedoTypesInfoContainer .sedo-table-fullscreen-btn[data-table-index="${tableIndex}"]`);
        if (!originalButton) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫) ${tableIndex}`);
            if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞.", "error");
            return;
        }
        const titleHeaderDiv = originalButton.closest('.flex.items-center.justify-between');
        const originalTableWrapper = titleHeaderDiv ? titleHeaderDiv.nextElementSibling : null;

        const tableContainerToClone = originalTableWrapper || document.querySelector(`#sedoTypesInfoContainer .overflow-x-auto:has(ul.list-disc, .sedo-table[data-table-index="${tableIndex}"])`);

        if (tableContainerToClone) {
            const clonedNode = tableContainerToClone.cloneNode(true);


            contentElementInOverlay.appendChild(clonedNode);
        } else {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ${tableIndex}`);
            contentElementInOverlay.innerHTML = '<p class="text-red-500 text-center">–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.</p>';
        }
    } else {

        const tableContainerDiv = document.createElement('div');

        tableContainerDiv.className = 'space-y-3 sm:space-y-4';

        if (tableConfig.items && Array.isArray(tableConfig.items)) {
            tableConfig.items.forEach((rowData, rowIndex) => {
                const rowBlock = renderSedoTableRowAsVerticalBlock(rowData, tableConfig.columns, tableConfig, tableIndex, rowIndex);
                if (rowBlock) {
                    tableContainerDiv.appendChild(rowBlock);
                }
            });
            if (tableContainerDiv.childElementCount === 0 && tableConfig.items.length > 0) {
                contentElementInOverlay.innerHTML = '<p class="text-gray-500 text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ.</p>';
            } else {
                contentElementInOverlay.appendChild(tableContainerDiv);
            }
        } else {
            contentElementInOverlay.innerHTML = '<p class="text-gray-500 text-center">–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>';
        }
    }

    overlay.classList.remove('hidden');
    if (typeof getVisibleModals === 'function' && getVisibleModals().filter(m => m.id !== 'sedoFullscreenOverlay').length === 0) {
        document.body.classList.add('overflow-hidden');
    } else if (typeof getVisibleModals !== 'function') {
        document.body.classList.add('overflow-hidden');
    }

    if (sedoFullscreenEscapeHandler) {
        document.removeEventListener('keydown', sedoFullscreenEscapeHandler, true);
    }
    sedoFullscreenEscapeHandler = function (event) {
        if (event.key === 'Escape') {
            const activeOverlay = document.getElementById('sedoFullscreenOverlay');
            if (activeOverlay && !activeOverlay.classList.contains('hidden')) {
                const visibleModals = typeof getVisibleModals === 'function' ? getVisibleModals() : [activeOverlay];
                const topmostModal = visibleModals.length > 0 ? (typeof getTopmostModal === 'function' ? getTopmostModal(visibleModals) : activeOverlay) : null;
                if (topmostModal === activeOverlay) {
                    closeSedoTableFullscreen();
                    event.stopPropagation();
                }
            }
        }
    };
    document.addEventListener('keydown', sedoFullscreenEscapeHandler, true);
    console.log("–û—Ç–∫—Ä—ã—Ç –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π) –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –°–≠–î–û, –∏–Ω–¥–µ–∫—Å:", tableIndex);
}


function renderSedoTableRowAsVerticalBlock(rowData, columnNames, tableConfig, originalTableIndex, originalRowIndex) {
    const rowBlock = document.createElement('div');

    rowBlock.className = 'sedo-fullscreen-item-block p-3 sm:p-4 bg-gray-50 dark:bg-gray-700/60 rounded-lg shadow border border-gray-200 dark:border-gray-600';
    rowBlock.dataset.originalTableIndex = originalTableIndex;
    rowBlock.dataset.originalRowIndex = originalRowIndex;

    const itemKeys = Object.keys(rowData);

    columnNames.forEach((colName, colIndex) => {
        let cellValue = '–ù/–î';
        let currentItemKey = null;


        if (colIndex === 0 && tableConfig.codeField && rowData.hasOwnProperty(tableConfig.codeField)) {
            currentItemKey = tableConfig.codeField;
        }
        else {

            const potentialKeys = {
                [columnNames[0]?.toLowerCase()]: tableConfig.codeField,
                [columnNames[1]?.toLowerCase().replace(/[^a-z0-9]/gi, '')]: 'name',
                [columnNames[2]?.toLowerCase().replace(/[^a-z0-9]/gi, '')]: 'in1C',

                ['—Ç–∏–ø']: 'type',
                ['–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å']: 'sender',
                ['–æ–ø–∏—Å–∞–Ω–∏–µ']: 'description',
                ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–ø–æ—Å–æ–±–∏—è']: 'name'
            };

            const normalizedColName = colName.toLowerCase().replace(/[^a-z0-9]/gi, '');
            let foundKey = itemKeys.find(key =>
                key.toLowerCase().replace(/[^a-z0-9]/gi, '') === normalizedColName ||
                (potentialKeys[normalizedColName] && key === potentialKeys[normalizedColName])
            );

            if (foundKey) {
                currentItemKey = foundKey;
            }
            else if (itemKeys[colIndex] !== undefined) {
                currentItemKey = itemKeys[colIndex];
                if (!rowData.hasOwnProperty(currentItemKey)) {
                    console.warn(`[SedoVerticalRender] –î–ª—è –∫–æ–ª–æ–Ω–∫–∏ "${colName}" (–∏–Ω–¥–µ–∫—Å ${colIndex}) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á –ø–æ –ø–æ—Ä—è–¥–∫—É "${currentItemKey}", –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ rowData. Table: ${tableConfig.title}, RowData:`, rowData);
                }
            }
        }

        if (currentItemKey && rowData.hasOwnProperty(currentItemKey)) {
            const value = rowData[currentItemKey];
            cellValue = (value === null || value === undefined) ? '–ù/–î' : String(value);
        } else {
            console.warn(`[SedoVerticalRender] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "${colName}" (–∏–Ω–¥–µ–∫—Å ${colIndex}). Table: ${tableConfig.title}, Row:`, JSON.stringify(rowData));
        }

        const fieldDiv = document.createElement('div');

        fieldDiv.className = 'flex flex-col sm:flex-row sm:items-baseline mb-1.5 last:mb-0';

        const labelSpan = document.createElement('span');

        labelSpan.className = 'block sm:w-2/5 md:w-1/3 font-semibold text-gray-500 dark:text-gray-400 text-sm mr-2 shrink-0';
        labelSpan.textContent = `${colName}:`;

        const valueSpan = document.createElement('span');
        valueSpan.className = 'block sm:w-3/5 md:w-2/3 text-gray-800 dark:text-gray-200 text-sm break-words';

        valueSpan.innerHTML = typeof linkify === 'function' ? linkify(cellValue) : (typeof escapeHtml === 'function' ? escapeHtml(cellValue) : cellValue);

        fieldDiv.appendChild(labelSpan);
        fieldDiv.appendChild(valueSpan);
        rowBlock.appendChild(fieldDiv);
    });

    if (rowBlock.childElementCount === 0) {
        return null;
    }

    return rowBlock;
}


function closeSedoTableFullscreen() {
    const overlay = document.getElementById('sedoFullscreenOverlay');
    if (overlay && !overlay.classList.contains('hidden')) {
        overlay.classList.add('hidden');
        const contentElement = overlay.querySelector('#sedoFullscreenContent');
        if (contentElement) {
            contentElement.innerHTML = '';
        }
        console.log("–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –°–≠–î–û –∑–∞–∫—Ä—ã—Ç.");
    }

    if (sedoFullscreenEscapeHandler) {
        document.removeEventListener('keydown', sedoFullscreenEscapeHandler, true);
        sedoFullscreenEscapeHandler = null;
    }

    const otherVisibleModalsQuery = 'div.fixed.inset-0.bg-black:not(#sedoFullscreenOverlay):not(.hidden), div.fixed.inset-0.bg-black.bg-opacity-50:not(.hidden)';
    const otherVisibleModals = document.querySelectorAll(otherVisibleModalsQuery);

    if (otherVisibleModals.length === 0) {
        document.body.classList.remove('overflow-hidden');
    }
}


async function loadSedoData() {
    const currentDefault = JSON.parse(JSON.stringify(DEFAULT_SEDO_DATA));
    let dataToOperateWith;

    try {
        let dataFromDB = await getFromIndexedDB('preferences', SEDO_CONFIG_KEY);
        let originalDataFromDBForComparison = dataFromDB ? JSON.parse(JSON.stringify(dataFromDB)) : null;

        if (!dataFromDB || !dataFromDB.tables || !Array.isArray(dataFromDB.tables) || dataFromDB.tables.length === 0) {
            console.log("–î–∞–Ω–Ω—ã–µ –°–≠–î–û –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ IndexedDB –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
            dataToOperateWith = { ...currentDefault, id: SEDO_CONFIG_KEY };

            await saveToIndexedDB('preferences', { ...dataToOperateWith });
            console.log("–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –°–≠–î–û (–≤–æ–∑–º–æ–∂–Ω–æ, —Å articleLinks-—Å—Ç—Ä–æ–∫–∞–º–∏) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.");

            if (typeof updateSearchIndex === 'function') {
                await updateSearchIndex('preferences', SEDO_CONFIG_KEY, dataToOperateWith, 'add', null);
                console.log("–ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –°–≠–î–û –æ–±–Ω–æ–≤–ª–µ–Ω.");
            }
        } else {
            console.log("–î–∞–Ω–Ω—ã–µ –°–≠–î–û –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ IndexedDB.");
            dataToOperateWith = { ...currentDefault, ...dataFromDB, id: SEDO_CONFIG_KEY };
        }

        let requiresSaveAfterMigrationOrNormalization = false;
        const initialArticleLinksString = JSON.stringify(dataToOperateWith.articleLinks);

        if (dataToOperateWith.articleLinks && Array.isArray(dataToOperateWith.articleLinks)) {
            const migratedLinks = [];
            for (const item of dataToOperateWith.articleLinks) {
                if (typeof item === 'string') {
                    let isUrl = false;
                    let urlToTest = item;
                    if (urlToTest.startsWith('www.') && !urlToTest.startsWith('http://') && !urlToTest.startsWith('https://')) {
                        urlToTest = 'http://' + urlToTest;
                    }
                    try {
                        const urlObject = new URL(urlToTest);
                        if (urlObject.protocol && urlObject.hostname) isUrl = true;
                    } catch (_) { }

                    if (isUrl) {
                        migratedLinks.push({ url: item, text: "" });
                    } else {
                        migratedLinks.push({ text: item });
                    }
                    requiresSaveAfterMigrationOrNormalization = true;
                } else if (typeof item === 'object' && item !== null) {
                    const newItem = { url: item.url, text: item.text || "" };
                    migratedLinks.push(newItem);
                    if (item.url !== newItem.url || item.text !== newItem.text) {
                        requiresSaveAfterMigrationOrNormalization = true;
                    }
                } else {
                    console.warn("loadSedoData: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ articleLinks:", item);
                }
            }
            dataToOperateWith.articleLinks = migratedLinks;
        } else {
            dataToOperateWith.articleLinks = [];
            if (initialArticleLinksString !== JSON.stringify([])) {
                requiresSaveAfterMigrationOrNormalization = true;
            }
            console.log("loadSedoData: articleLinks –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º.");
        }

        const finalArticleLinksString = JSON.stringify(dataToOperateWith.articleLinks);
        if (initialArticleLinksString !== finalArticleLinksString) {
            requiresSaveAfterMigrationOrNormalization = true;
        }

        if (requiresSaveAfterMigrationOrNormalization) {
            console.log("loadSedoData: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ articleLinks –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞/–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –ë–î.");
            await saveToIndexedDB('preferences', { ...dataToOperateWith });

            if (typeof updateSearchIndex === 'function') {
                await updateSearchIndex('preferences', SEDO_CONFIG_KEY, dataToOperateWith, originalDataFromDBForComparison ? 'update' : 'add', originalDataFromDBForComparison);
                console.log("–ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –°–≠–î–û –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏/–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ articleLinks.");
            }
        }

        currentSedoData = JSON.parse(JSON.stringify(dataToOperateWith));
        originalSedoDataBeforeEdit = JSON.parse(JSON.stringify(dataToOperateWith));

        return currentSedoData;

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –°–≠–î–û:", error);
        currentSedoData = { ...currentDefault, id: SEDO_CONFIG_KEY, articleLinks: Array.isArray(currentDefault.articleLinks) ? [...currentDefault.articleLinks] : [] };

        if (currentSedoData.articleLinks && Array.isArray(currentSedoData.articleLinks)) {
            const migratedOnError = [];
            for (const item of currentSedoData.articleLinks) {
                if (typeof item === 'string') {
                    let isUrl = false; try { new URL(item.startsWith('www.') ? 'http://' + item : item); isUrl = true; } catch (_) { }
                    migratedOnError.push(isUrl ? { url: item, text: "" } : { text: item });
                } else if (typeof item === 'object' && item) {
                    migratedOnError.push({ url: item.url, text: item.text || "" });
                }
            }
            currentSedoData.articleLinks = migratedOnError;
        } else {
            currentSedoData.articleLinks = [];
        }

        originalSedoDataBeforeEdit = JSON.parse(JSON.stringify(currentSedoData));
        return currentSedoData;
    }
}


function filterSedoData(query) {
    const lowerCaseQuery = query.toLowerCase().trim();
    if (!lowerCaseQuery) {
        return currentSedoData;
    }

    const filteredData = {
        ...JSON.parse(JSON.stringify(currentSedoData)),
        tables: []
    };

    if (currentSedoData.articleLinks && Array.isArray(currentSedoData.articleLinks)) {
        filteredData.articleLinks = currentSedoData.articleLinks.filter(link => {
            const textToSearch = `${link.text || ''} ${link.url || ''}`.toLowerCase();
            return textToSearch.includes(lowerCaseQuery);
        });
    }

    if (currentSedoData.tables && Array.isArray(currentSedoData.tables)) {
        currentSedoData.tables.forEach(table => {
            const tableTitleMatches = table.title && table.title.toLowerCase().includes(lowerCaseQuery);

            let filteredItems = [];
            if (table.items && Array.isArray(table.items)) {
                filteredItems = table.items.filter(item => {
                    return Object.values(item).some(value =>
                        String(value).toLowerCase().includes(lowerCaseQuery)
                    );
                });
            }

            if (tableTitleMatches || filteredItems.length > 0) {
                const newTable = { ...table };
                if (!tableTitleMatches) {
                    newTable.items = filteredItems;
                }
                filteredData.tables.push(newTable);
            }
        });
    }
    return filteredData;
}


function handleSedoSearch() {
    const searchInput = document.getElementById('sedoSearchInput');
    if (!searchInput) {
        console.error("handleSedoSearch: –ü–æ–ª–µ –≤–≤–æ–¥–∞ #sedoSearchInput –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        return;
    }

    const query = searchInput.value;

    const clearSearchBtn = document.getElementById('clearSedoSearchBtn');
    if (clearSearchBtn) {
        clearSearchBtn.classList.toggle('hidden', !query);
    }

    const infoContainer = document.getElementById('sedoTypesInfoContainer');
    if (!infoContainer) {
        console.error("handleSedoSearch: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ #sedoTypesInfoContainer –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    const filteredData = filterSedoData(query);

    _renderSedoContentInner(infoContainer, filteredData, isSedoEditing, query);
}


function _renderSedoContentInner(container, data, isEditing, searchQuery) {
    if (!container || !data) {
        console.error("_renderSedoContentInner: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ.");
        return;
    }
    container.innerHTML = '';
    const highlight = (text) => {
        if (!searchQuery || isEditing || !text) return escapeHtml(String(text));
        return highlightTextInString(String(text), searchQuery);
    };

    const linksSectionContainer = document.createElement('div');
    linksSectionContainer.className = 'mb-6';
    const linksTitleHeader = document.createElement('div');
    linksTitleHeader.className = 'flex items-center justify-between mb-content-sm';
    const linksTitleStatic = document.createElement('h3');
    linksTitleStatic.className = 'text-lg font-semibold text-gray-900 dark:text-gray-100';
    linksTitleStatic.textContent = '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –°–≠–î–û';
    linksTitleHeader.appendChild(linksTitleStatic);
    linksSectionContainer.appendChild(linksTitleHeader);
    const articles = (data && Array.isArray(data.articleLinks)) ? data.articleLinks : [];
    const linksDisplayArea = document.createElement('div');
    linksDisplayArea.className = 'bg-white dark:bg-gray-700 p-content-sm rounded-lg shadow mb-3';
    if (isEditing) {
        const textarea = document.createElement('textarea');
        textarea.id = 'sedoArticleLinksEditInput';
        textarea.className = 'w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700/80 focus:outline-none focus:ring-2 focus:ring-primary text-gray-900 dark:text-gray-100 min-h-[100px] text-sm';
        textarea.placeholder = '–ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ | (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞) –ø–æ—Å–ª–µ URL. –ü—Ä–∏–º–µ—Ä: https://site.com|–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞';
        textarea.value = articles.map(item => (item.url ? `${item.url}${item.text ? `|${item.text}` : ''}` : item.text)).join('\n');
        linksDisplayArea.appendChild(textarea);
    } else {
        if (articles.length > 0) {
            const ul = document.createElement('ul');
            ul.className = 'space-y-2';
            articles.forEach((item) => {
                if (!item || (item.url === undefined && item.text === undefined)) return;
                const li = document.createElement('li');
                li.className = 'text-gray-700 dark:text-gray-300 break-words';
                if (item.url) {
                    li.classList.add('list-disc', 'list-inside', 'ml-5');
                    const a = document.createElement('a');
                    a.href = item.url;
                    a.innerHTML = highlight(item.url);
                    a.className = 'text-primary hover:underline break-all';
                    a.target = '_blank';
                    a.rel = 'noopener noreferrer';
                    li.appendChild(a);
                    if (item.text) {
                        const descSpan = document.createElement('span');
                        descSpan.className = 'ml-2 text-sm text-gray-500 dark:text-gray-400 italic';
                        descSpan.innerHTML = `‚Äî ${highlight(item.text)}`;
                        li.appendChild(descSpan);
                    }
                } else if (item.text) {
                    const textSpan = document.createElement('span');
                    textSpan.innerHTML = linkify(highlight(item.text));
                    li.appendChild(textSpan);
                }
                ul.appendChild(li);
            });
            linksDisplayArea.appendChild(ul);
        } else {
            linksDisplayArea.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">–°—Å—ã–ª–æ–∫ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.</p>';
        }
    }
    linksSectionContainer.appendChild(linksDisplayArea);
    container.appendChild(linksSectionContainer);

    if (data.tables && Array.isArray(data.tables)) {
        if (data.tables.length === 0 && searchQuery && !isEditing) {
            const noResultsEl = document.createElement('p');
            noResultsEl.className = 'text-center text-gray-500 dark:text-gray-400 py-4';
            noResultsEl.textContent = `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}" –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`;
            container.appendChild(noResultsEl);
        }
        data.tables.forEach((tableData, tableIndex) => {
            const tableContainerDiv = document.createElement('div');
            tableContainerDiv.className = 'sedo-table-container mb-6';
            tableContainerDiv.dataset.tableIndex = tableIndex;
            const titleHeaderDiv = document.createElement('div');
            titleHeaderDiv.className = 'flex items-center justify-between mb-content-sm';
            if (isEditing) {
                const titleInput = document.createElement('input');
                titleInput.type = 'text';
                titleInput.value = tableData.title || `–¢–∞–±–ª–∏—Ü–∞ ${tableIndex + 1}`;
                titleInput.className = 'sedo-table-title-edit text-lg font-semibold bg-transparent border-b-2 border-dashed border-red-500/50 focus:border-red-500/100 focus:outline-none w-full text-gray-900 dark:text-gray-100';
                titleHeaderDiv.appendChild(titleInput);
            } else {
                const tableTitle = document.createElement('h3');
                tableTitle.className = 'text-lg font-semibold text-gray-900 dark:text-gray-100';
                tableTitle.innerHTML = highlight(tableData.title || `–¢–∞–±–ª–∏—Ü–∞ ${tableIndex + 1}`);
                titleHeaderDiv.appendChild(tableTitle);
            }
            if (!isEditing) {
                const fullscreenBtn = document.createElement('button');
                fullscreenBtn.type = 'button';
                fullscreenBtn.className = 'sedo-table-fullscreen-btn p-1.5 text-gray-400 hover:text-primary dark:text-gray-500 dark:hover:text-primary-dark rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-primary flex-shrink-0';
                fullscreenBtn.title = '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω';
                fullscreenBtn.innerHTML = '<i class="fas fa-expand"></i>';
                fullscreenBtn.dataset.tableIndex = tableIndex;
                fullscreenBtn.addEventListener('click', () => {
                    if (typeof handleSedoTableFullscreen === 'function') handleSedoTableFullscreen(tableIndex);
                    else console.error("handleSedoTableFullscreen –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
                });
                titleHeaderDiv.appendChild(fullscreenBtn);
            }
            tableContainerDiv.appendChild(titleHeaderDiv);
            const tableWrapper = document.createElement('div');
            tableWrapper.className = 'custom-scrollbar overflow-x-auto bg-white dark:bg-gray-700 p-content-sm rounded-lg shadow';

            if (tableData.isStaticList) {
                const listElement = document.createElement('ul');
                listElement.className = 'list-disc list-inside pl-5 space-y-1 text-sm';
                listElement.dataset.tableIndex = tableIndex;
                if (isEditing) {
                    listElement.contentEditable = 'true';
                    listElement.classList.add('editing-cell', 'min-h-[5rem]', 'focus:outline-none', 'focus:ring-1', 'focus:ring-primary', 'p-2', 'border', 'border-dashed');
                }
                if (Array.isArray(tableData.items)) {
                    tableData.items.forEach((itemText) => {
                        const listItem = document.createElement('li');
                        listItem.innerHTML = highlight(String(itemText));
                        listElement.appendChild(listItem);
                    });
                }
                tableWrapper.appendChild(listElement);
            } else {
                const table = document.createElement('table');
                table.className = 'min-w-full divide-y divide-gray-200 dark:divide-gray-600 sedo-table';
                table.dataset.tableIndex = tableIndex;
                const thead = document.createElement('thead');
                thead.className = 'bg-gray-50 dark:bg-gray-800';
                const headerRow = document.createElement('tr');
                if (Array.isArray(tableData.columns)) {
                    tableData.columns.forEach((colName, colIndex) => {
                        const th = document.createElement('th');
                        th.scope = 'col';
                        th.className = 'px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider';
                        if (isEditing) {
                            const headerInput = document.createElement('input');
                            headerInput.type = 'text';
                            headerInput.value = String(colName);
                            headerInput.className = 'sedo-column-header-edit bg-transparent border-b border-dashed border-gray-400 focus:border-gray-500 focus:outline-none w-full border-red-500/50 focus:border-red-500/100';
                            headerInput.dataset.colIndex = colIndex;
                            th.appendChild(headerInput);
                        } else {
                            th.innerHTML = highlight(String(colName));
                        }
                        headerRow.appendChild(th);
                    });
                }
                thead.appendChild(headerRow);
                table.appendChild(thead);
                const tbody = document.createElement('tbody');
                tbody.className = 'bg-white dark:bg-gray-700 divide-y divide-gray-200 dark:divide-gray-600';
                const editableCellsConfig = (isEditing || !tableData.editableCells)
                    ? (tableData.columns || []).map(() => true)
                    : tableData.editableCells;

                if (Array.isArray(tableData.items)) {
                    tableData.items.forEach((item, rowIndex) => {
                        if (typeof item !== 'object' || item === null) return;
                        const row = document.createElement('tr');
                        row.dataset.rowIndex = rowIndex;
                        const itemKeys = Object.keys(item);

                        (tableData.columns || []).forEach((_colNameFromConfig, colIndex) => {
                            const td = document.createElement('td');
                            td.className = 'px-4 py-4 text-sm text-gray-700 dark:text-gray-200 align-top';
                            let cellValue = '';
                            let currentItemKeyUsed = null;
                            if (tableData.codeField && colIndex === 0 && item.hasOwnProperty(tableData.codeField)) {
                                currentItemKeyUsed = tableData.codeField;
                            } else if (itemKeys[colIndex] !== undefined && item.hasOwnProperty(itemKeys[colIndex])) {
                                currentItemKeyUsed = itemKeys[colIndex];
                            }
                            if (currentItemKeyUsed) {
                                cellValue = item[currentItemKeyUsed] === null || item[currentItemKeyUsed] === undefined ? '' : item[currentItemKeyUsed];
                                td.dataset.colKey = currentItemKeyUsed;
                            } else {
                                td.dataset.colKey = `col_${colIndex}_fallback`;
                            }
                            if (isEditing && editableCellsConfig[colIndex]) {
                                td.contentEditable = 'true';
                                td.className += ' editing-cell focus:outline-none focus:bg-yellow-100 dark:focus:bg-yellow-900/50 focus:ring-1 focus:ring-primary rounded';
                                td.textContent = String(cellValue);
                            } else {
                                td.innerHTML = highlight(String(cellValue));
                            }
                            row.appendChild(td);
                        });
                        tbody.appendChild(row);
                    });
                }
                table.appendChild(tbody);
                tableWrapper.appendChild(table);
            }
            tableContainerDiv.appendChild(tableWrapper);
            container.appendChild(tableContainerDiv);
        });
    }
}


const DIALOG_WATCHDOG_TIMEOUT_NEW = 120000;

async function handleImportButtonClick() {
    console.log("[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] –ö–Ω–æ–ø–∫–∞ '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö' –Ω–∞–∂–∞—Ç–∞.");

    if (isExportOperationInProgress && loadingOverlayManager.overlayElement) {
        console.warn("[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –í—ã—Ö–æ–¥.");
        NotificationService.add("–û–ø–µ—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.", "warning");
        return;
    }
    if (isExpectingFileDialog) {
        console.warn("[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.");
        NotificationService.add("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞.", "info");
        return;
    }

    importDialogInteractionComplete = false;
    isExpectingFileDialog = false;

    loadingOverlayManager.createAndShow();
    loadingOverlayManager.updateProgress(1);

    let backupOutcome;
    const skipBackupSetting = userPreferences && userPreferences.disableForcedBackupOnImport === true;

    const IMPORT_WITHOUT_BACKUP_WARNING_ID = "import-without-backup-warning-permanent";
    const SELECT_IMPORT_FILE_PROMPT_ID = "select-import-file-prompt-permanent";

    try {
        NotificationService.dismissImportant(IMPORT_WITHOUT_BACKUP_WARNING_ID);
        NotificationService.dismissImportant(SELECT_IMPORT_FILE_PROMPT_ID);
        NotificationService.dismissImportant("backup-skipped-by-setting");
        NotificationService.dismissImportant("critical-backup-warning-prompt");
        NotificationService.dismissImportant("forced-backup-success-pfb");
        NotificationService.dismissImportant("forced-backup-failed-pfb");
        NotificationService.dismissImportant("backup-gesture-error-critical-pfb");
        NotificationService.dismissImportant("import-file-input-missing-critical");
        NotificationService.dismissImportant("import-cancelled-no-file");
        NotificationService.dismissImportant("import-cancelled-timeout");
        NotificationService.dismissImportant("import-cancelled-by-user-focus");
        NotificationService.dismissImportant("import-cancelled-by-user-fixed");
        NotificationService.dismissImportant("import-cancelled-by-user-async-hide");
        NotificationService.dismissImportant("import-init-global-error");

        await new Promise(resolve => setTimeout(resolve, (NotificationService.FADE_DURATION_MS || 300) + 100));

        if (skipBackupSetting) {
            console.log("[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –±—ç–∫–∞–ø –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π.");
            NotificationService.add(
                "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –ò–º–ø–æ—Ä—Ç –Ω–∞—á–Ω–µ—Ç—Å—è –±–µ–∑ –±—ç–∫–∞–ø–∞.",
                "warning",
                { important: true, duration: 7000, id: "backup-skipped-by-setting-temp" }
            );
            await new Promise(resolve => setTimeout(resolve, 1000));
            backupOutcome = 'skipped_by_setting';
        } else {
            backupOutcome = await performForcedBackup();
        }

        if (backupOutcome === true || backupOutcome === 'skipped_by_user' || backupOutcome === 'skipped_by_setting') {
            console.log(`[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] –°—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–∞: ${backupOutcome}. –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.`);

            NotificationService.dismissImportant("critical-backup-warning-prompt");
            NotificationService.dismissImportant("forced-backup-success-pfb");
            NotificationService.dismissImportant("forced-backup-failed-pfb");
            NotificationService.dismissImportant("backup-gesture-error-critical-pfb");
            await new Promise(resolve => setTimeout(resolve, (NotificationService.FADE_DURATION_MS || 300) + 50));

            if (!importFileInput) {
                console.error("[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] –≠–ª–µ–º–µ–Ω—Ç importFileInput –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò–º–ø–æ—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.");
                NotificationService.add(
                    "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                    "error",
                    { important: true, duration: 10000, id: "import-file-input-missing-critical" }
                );
                throw new Error("importFileInput missing");
            }

            importFileInput.value = '';

            if (backupOutcome === 'skipped_by_user') {
                NotificationService.add(
                    "–í–´ –û–¢–ö–ê–ó–ê–õ–ò–°–¨ –û–¢ –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.",
                    "error",
                    { important: true, duration: 0, id: IMPORT_WITHOUT_BACKUP_WARNING_ID }
                );
            }
            NotificationService.add(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (.json) –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.",
                "info",
                { important: true, duration: 0, id: SELECT_IMPORT_FILE_PROMPT_ID }
            );

            const watchdogTimerId = setTimeout(async () => {
                if (importFileInput && importFileInput._watchdogTimerId === watchdogTimerId) {
                    delete importFileInput._watchdogTimerId;
                    if (!importDialogInteractionComplete) {
                        console.warn("[Import Watchdog Timer FOCUS_HANDLER_FINAL_FULL] –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∏–∞–ª–æ–≥–æ–º –ù–ï –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ UI.");
                        NotificationService.dismissImportant(SELECT_IMPORT_FILE_PROMPT_ID);
                        NotificationService.dismissImportant(IMPORT_WITHOUT_BACKUP_WARNING_ID);
                        if (loadingOverlayManager.overlayElement) {
                            loadingOverlayManager.updateProgress(100);
                            await loadingOverlayManager.hideAndDestroy();
                        }
                        NotificationService.add("–ò–º–ø–æ—Ä—Ç –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω (–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞).", "info", { duration: 7000, id: "import-cancelled-timeout" });
                        if (importFileInput) importFileInput.value = '';

                        isExpectingFileDialog = false;
                        if (windowFocusHandlerInstance) {
                            window.removeEventListener('focus', windowFocusHandlerInstance);
                            windowFocusHandlerInstance = null;
                        }
                        if (typeof setActiveTab === 'function') setActiveTab('main');
                    }
                }
            }, DIALOG_WATCHDOG_TIMEOUT_NEW);
            if (importFileInput) importFileInput._watchdogTimerId = watchdogTimerId;

            if (windowFocusHandlerInstance) {
                window.removeEventListener('focus', windowFocusHandlerInstance);
                windowFocusHandlerInstance = null;
            }
            windowFocusHandlerInstance = async () => {
                console.log("[WindowFocusHandler FOR IMPORT] –û–∫–Ω–æ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å.");
                const self = windowFocusHandlerInstance;

                if (self) {
                    window.removeEventListener('focus', self);
                    windowFocusHandlerInstance = null;
                    console.log("[WindowFocusHandler FOR IMPORT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ window.focus —É–¥–∞–ª–µ–Ω (—Å—Ä–∞–±–æ—Ç–∞–ª).");
                }

                await new Promise(resolve => setTimeout(resolve, 150));

                if (isExpectingFileDialog && !importDialogInteractionComplete) {
                    console.log("[WindowFocusHandler FOR IMPORT] isExpectingFileDialog=true, importDialogInteractionComplete=false.");
                    if (!importFileInput || importFileInput.files.length === 0) {
                        console.log("[WindowFocusHandler FOR IMPORT] –§–∞–π–ª –ù–ï –≤—ã–±—Ä–∞–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã.");
                        importDialogInteractionComplete = true;
                        isExpectingFileDialog = false;

                        if (importFileInput && importFileInput._watchdogTimerId) {
                            clearTimeout(importFileInput._watchdogTimerId);
                            delete importFileInput._watchdogTimerId;
                        }

                        NotificationService.dismissImportant(SELECT_IMPORT_FILE_PROMPT_ID);
                        NotificationService.dismissImportant(IMPORT_WITHOUT_BACKUP_WARNING_ID);

                        if (loadingOverlayManager.overlayElement) {
                            loadingOverlayManager.updateProgress(100);
                            await loadingOverlayManager.hideAndDestroy();
                        }
                        NotificationService.add("–ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", "info", { duration: 5000, id: "import-cancelled-by-user-focus" });
                        if (importFileInput) importFileInput.value = '';

                        if (typeof setActiveTab === 'function') {
                            setActiveTab('main');
                        }
                    } else {
                        console.log("[WindowFocusHandler FOR IMPORT] –§–∞–π–ª –≤—ã–±—Ä–∞–Ω, –æ–∂–∏–¥–∞–µ–º `handleImportFileChange`.");
                    }
                } else {
                    console.log(`[WindowFocusHandler FOR IMPORT] –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: isExpectingFileDialog=${isExpectingFileDialog}, importDialogInteractionComplete=${importDialogInteractionComplete}.`);
                }
            };
            window.addEventListener('focus', windowFocusHandlerInstance);
            isExpectingFileDialog = true;

            requestAnimationFrame(async () => {
                if (importFileInput && document.body.contains(importFileInput) &&
                    (importFileInput.offsetWidth > 0 || importFileInput.offsetHeight > 0 || importFileInput.getClientRects().length > 0 || importFileInput.type === 'file')
                ) {
                    console.log("[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å importFileInput.click() —á–µ—Ä–µ–∑ rAF.");
                    try {
                        importFileInput.click();
                        console.log("[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] importFileInput.click() –±—ã–ª –≤—ã–∑–≤–∞–Ω.");
                    } catch (clickError) {
                        console.error("[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ importFileInput.click():", clickError);
                        clearTimeout(watchdogTimerId);
                        if (importFileInput) delete importFileInput._watchdogTimerId;
                        NotificationService.dismissImportant(SELECT_IMPORT_FILE_PROMPT_ID);
                        NotificationService.dismissImportant(IMPORT_WITHOUT_BACKUP_WARNING_ID);

                        isExpectingFileDialog = false;
                        if (windowFocusHandlerInstance) {
                            window.removeEventListener('focus', windowFocusHandlerInstance);
                            windowFocusHandlerInstance = null;
                        }
                        if (loadingOverlayManager.overlayElement) {
                            loadingOverlayManager.updateProgress(100);
                            await loadingOverlayManager.hideAndDestroy();
                        }
                        NotificationService.add("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞.", "error", { important: true, duration: 0 });
                        importDialogInteractionComplete = true;
                    }
                } else {
                    console.error("[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] importFileInput –Ω–µ –≥–æ—Ç–æ–≤ –∫ .click() (–Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –≤ DOM –∏–ª–∏ –Ω–µ –≤–∏–¥–∏–º).");
                    clearTimeout(watchdogTimerId);
                    if (importFileInput) delete importFileInput._watchdogTimerId;
                    NotificationService.dismissImportant(SELECT_IMPORT_FILE_PROMPT_ID);
                    NotificationService.dismissImportant(IMPORT_WITHOUT_BACKUP_WARNING_ID);

                    isExpectingFileDialog = false;
                    if (windowFocusHandlerInstance) {
                        window.removeEventListener('focus', windowFocusHandlerInstance);
                        windowFocusHandlerInstance = null;
                    }
                    if (loadingOverlayManager.overlayElement) {
                        loadingOverlayManager.updateProgress(100);
                        await loadingOverlayManager.hideAndDestroy();
                    }
                    NotificationService.add("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∏–º–ø–æ—Ä—Ç–∞.", "error", { important: true, duration: 7000 });
                    importDialogInteractionComplete = true;
                }
            });

        } else {
            console.log("[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] –ë—ç–∫–∞–ø –Ω–µ —É–¥–∞–ª—Å—è. –ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω.");
            isExpectingFileDialog = false;
            if (windowFocusHandlerInstance) {
                window.removeEventListener('focus', windowFocusHandlerInstance);
                windowFocusHandlerInstance = null;
            }
            if (loadingOverlayManager.overlayElement) {
                loadingOverlayManager.updateProgress(100);
                await loadingOverlayManager.hideAndDestroy();
            }
            if (importFileInput) importFileInput.value = '';
        }
    } catch (error) {
        console.error("[handleImportButtonClick v_FOCUS_HANDLER_FINAL_FULL] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞:", error);
        NotificationService.dismissImportant(SELECT_IMPORT_FILE_PROMPT_ID);
        NotificationService.dismissImportant(IMPORT_WITHOUT_BACKUP_WARNING_ID);
        NotificationService.add(
            `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞: ${error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}.`,
            "error",
            { important: true, duration: 10000, id: "import-init-global-error" }
        );

        isExpectingFileDialog = false;
        if (windowFocusHandlerInstance) {
            window.removeEventListener('focus', windowFocusHandlerInstance);
            windowFocusHandlerInstance = null;
        }
        if (importFileInput && importFileInput._watchdogTimerId) {
            clearTimeout(importFileInput._watchdogTimerId);
            delete importFileInput._watchdogTimerId;
        }
        if (loadingOverlayManager.overlayElement) {
            loadingOverlayManager.updateProgress(100);
            await loadingOverlayManager.hideAndDestroy();
        }
        if (importFileInput) {
            importFileInput.value = '';
        }
        importDialogInteractionComplete = true;
    }
}


async function handleImportFileChange(e) {
    console.log("[handleImportFileChange v_FOCUS_HANDLER_AWARE_FINAL_FULL] –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ (—Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω).");

    isExpectingFileDialog = false;
    if (windowFocusHandlerInstance) {
        window.removeEventListener('focus', windowFocusHandlerInstance);
        windowFocusHandlerInstance = null;
        console.log("[handleImportFileChange v_FOCUS_HANDLER_AWARE_FINAL_FULL] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ window.focus —É–¥–∞–ª–µ–Ω.");
    }

    importDialogInteractionComplete = true;

    if (importFileInput && importFileInput._watchdogTimerId) {
        clearTimeout(importFileInput._watchdogTimerId);
        delete importFileInput._watchdogTimerId;
        console.log("[handleImportFileChange v_FOCUS_HANDLER_AWARE_FINAL_FULL] –°—Ç–æ—Ä–æ–∂–µ–≤–æ–π —Ç–∞–π–º–µ—Ä –∏–º–ø–æ—Ä—Ç–∞ –æ—á–∏—â–µ–Ω.");
    }

    const IMPORT_WITHOUT_BACKUP_WARNING_ID = "import-without-backup-warning-permanent";
    const SELECT_IMPORT_FILE_PROMPT_ID = "select-import-file-prompt-permanent";

    NotificationService.dismissImportant(SELECT_IMPORT_FILE_PROMPT_ID);
    NotificationService.dismissImportant(IMPORT_WITHOUT_BACKUP_WARNING_ID);

    const file = e.target.files?.[0];

    if (!file) {
        console.error("[handleImportFileChange v_FOCUS_HANDLER_AWARE_FINAL_FULL] –§–∞–π–ª –ù–ï –Ω–∞–π–¥–µ–Ω, —Ö–æ—Ç—è —Å–æ–±—ã—Ç–∏–µ 'change' —Å—Ä–∞–±–æ—Ç–∞–ª–æ! –≠—Ç–æ –∫—Ä–∞–π–Ω–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –æ—Ç–º–µ–Ω–∞.");
        if (importFileInput) importFileInput.value = '';

        if (loadingOverlayManager.overlayElement) {
            loadingOverlayManager.updateProgress(100);
            await loadingOverlayManager.hideAndDestroy();
        }
        NotificationService.add("–ò–º–ø–æ—Ä—Ç –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω (–æ—à–∏–±–∫–∞ —Å–æ–±—ã—Ç–∏—è 'change').", "warning", { duration: 7000 });

        if (typeof setActiveTab === 'function') {
            setActiveTab('main');
        }
        return;
    }

    console.log(`[handleImportFileChange v_FOCUS_HANDLER_AWARE_FINAL_FULL] –§–∞–π–ª "${file.name}" –≤—ã–±—Ä–∞–Ω. –ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è.`);

    const reader = new FileReader();
    reader.onload = async (event) => {
        let importResult = { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞." };
        try {
            if (typeof _processActualImport !== 'function') {
                throw new Error("_processActualImport is not a function. Critical error.");
            }
            importResult = await _processActualImport(event.target.result);
        } catch (error) {
            console.error("[handleImportFileChange v_FOCUS_HANDLER_AWARE_FINAL_FULL] –û—à–∏–±–∫–∞ –∏–∑ _processActualImport:", error);
            importResult = { success: false, message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}` };
        } finally {
            if (importResult.success) {
                console.log("[handleImportFileChange v_FOCUS_HANDLER_AWARE_FINAL_FULL] –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω.");
            } else {
                const errorNotificationId = "import-failed-in-handler-focus-final";
                const existingErrorNotification = NotificationService.activeImportantNotifications.has(errorNotificationId) ||
                    document.querySelector(`.notification-item.notification-type-error[data-id^="import-"]`);
                if (!existingErrorNotification) {
                    NotificationService.add(importResult.message || "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.", "error", { important: true, duration: 10000, id: errorNotificationId });
                }
                console.log("[handleImportFileChange v_FOCUS_HANDLER_AWARE_FINAL_FULL] –ò–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è.");
            }

            if (loadingOverlayManager.overlayElement) {
                console.warn("[handleImportFileChange v_FOCUS_HANDLER_AWARE_FINAL_FULL] –û–≤–µ—Ä–ª–µ–π –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ _processActualImport. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ.");
                loadingOverlayManager.updateProgress(100);
                await loadingOverlayManager.hideAndDestroy();
            }
            if (importFileInput) importFileInput.value = '';
        }
    };
    reader.onerror = async () => {
        console.error("[handleImportFileChange v_FOCUS_HANDLER_AWARE_FINAL_FULL] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ FileReader.error");
        NotificationService.add("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞.", "error", { important: true, id: "file-read-error-focus-final" });
        if (loadingOverlayManager.overlayElement) {
            loadingOverlayManager.updateProgress(100);
            await loadingOverlayManager.hideAndDestroy();
        }
        if (importFileInput) importFileInput.value = '';
    };
    reader.readAsText(file);
}


async function exportAllData(options = {}) {
    console.log(`[exportAllData v_FIXED_LOGIC_FINAL] –ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞. Options:`, JSON.parse(JSON.stringify(options || {})));

    if (isExportOperationInProgress) {
        console.warn("[exportAllData] –≠–∫—Å–ø–æ—Ä—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
        if (!(options && options.isForcedBackupMode)) {
            NotificationService.add("–û–ø–µ—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", "warning", { duration: 4000 });
        }
        return false;
    }

    isExportOperationInProgress = true;
    let functionResult = false;
    const { isForcedBackupMode = false } = options;

    NotificationService.dismissImportant("export-cancelled-timeout");
    NotificationService.dismissImportant("export-cancelled-by-user-focus");
    NotificationService.dismissImportant("export-save-file-picker-failed");
    NotificationService.dismissImportant("export-data-prep-failed");
    NotificationService.dismissImportant("export-generic-error");
    await new Promise(resolve => setTimeout(resolve, (NotificationService.FADE_DURATION_MS || 300) + 50));

    try {
        if (!isForcedBackupMode) {
            NotificationService.add("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...", "info", { duration: 3000, id: "export-data-prep-started" });
        }

        if (!db) {
            console.error("[exportAllData] Export failed: Database (db variable) is not initialized.");
            if (!isForcedBackupMode) {
                NotificationService.add("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞", "error", { important: true, id: "export-db-not-ready" });
            }
            throw new Error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞");
        }

        const allStoreNames = Array.from(db.objectStoreNames);
        const storesToRead = allStoreNames.filter(storeName => storeName !== 'searchIndex');

        if (storesToRead.length === 0) {
            console.warn("[exportAllData] –ù–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∫—Ä–æ–º–µ searchIndex).");
            if (!isForcedBackupMode) NotificationService.add("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", "warning", { id: "export-no-data" });
            return isForcedBackupMode ? true : false;
        }

        const exportData = { schemaVersion: CURRENT_SCHEMA_VERSION, exportDate: new Date().toISOString(), data: {} };

        const blobToBase64 = (blob) => new Promise((resolve, reject) => {
            if (!(blob instanceof Blob)) return resolve(null);
            const reader = new FileReader();
            reader.onerror = (e) => reject(e.target.error);
            reader.onload = () => resolve({ base64: reader.result.split(',')[1], type: blob.type });
            reader.readAsDataURL(blob);
        });

        let transaction;
        try {
            transaction = db.transaction(storesToRead, 'readonly');
            const dataPromises = storesToRead.map(storeName =>
                new Promise((resolve, reject) => {
                    const request = transaction.objectStore(storeName).getAll();
                    request.onsuccess = (e) => resolve({ storeName, data: e.target.result });
                    request.onerror = (e) => reject(new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ ${storeName}: ${e.target.error?.message}`));
                })
            );
            const results = await Promise.all(dataPromises);

            const screenshotData = results.find(r => r.storeName === 'screenshots');
            if (screenshotData && Array.isArray(screenshotData.data) && screenshotData.data.length > 0) {
                if (!isForcedBackupMode) NotificationService.add(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${screenshotData.data.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...`, "info", { duration: 2000, id: "export-screenshot-processing" });
                const conversionPromises = screenshotData.data.map(async (item) => {
                    if (item && item.blob instanceof Blob) {
                        try {
                            const base64Data = await blobToBase64(item.blob);
                            if (base64Data) return { ...item, blob: base64Data };
                        } catch (convErr) { return { ...item, blob: undefined, conversionError: convErr.message }; }
                    }
                    return item;
                });
                screenshotData.data = await Promise.all(conversionPromises);
            }

            results.forEach(result => { exportData.data[result.storeName] = Array.isArray(result.data) ? result.data : []; });

        } catch (dataPrepError) {
            console.error("[exportAllData] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", dataPrepError);
            if (!isForcedBackupMode) NotificationService.add(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${dataPrepError.message}`, "error", { important: true, id: "export-data-prep-failed" });
            if (transaction && typeof transaction.abort === 'function') try { transaction.abort(); } catch (e) { }
            throw dataPrepError;
        }

        const now = new Date();
        const timestamp = now.toISOString().slice(0, 19).replace('T', '_').replace(/:/g, '-');
        const exportFileName = `${isForcedBackupMode ? "1C_Support_Guide_Backup_" : "1C_Support_Guide_Export_"}${timestamp}.json`;
        const dataBlob = new Blob([JSON.stringify(exportData, null, 2)], { type: "application/json;charset=utf-8" });

        isExpectingExportFileDialog = true;
        exportDialogInteractionComplete = false;

        exportWatchdogTimerId = setTimeout(() => {
            if (exportWatchdogTimerId && isExpectingExportFileDialog && !exportDialogInteractionComplete) {
                console.warn("[Export Watchdog] –°—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.");
                NotificationService.add("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.", "warning", { duration: 7000, id: "export-cancelled-timeout" });
                functionResult = false;
                isExpectingExportFileDialog = false;
                if (exportWindowFocusHandlerInstance) {
                    window.removeEventListener('focus', exportWindowFocusHandlerInstance);
                    exportWindowFocusHandlerInstance = null;
                }
            }
        }, DIALOG_WATCHDOG_TIMEOUT_NEW);

        try {
            if (window.showSaveFilePicker) {
                console.log("[exportAllData] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è File System Access API.");
                if (exportWindowFocusHandlerInstance) {
                    window.removeEventListener('focus', exportWindowFocusHandlerInstance);
                    exportWindowFocusHandlerInstance = null;
                }

                const handle = await window.showSaveFilePicker({ suggestedName: exportFileName, types: [{ description: 'JSON Files', accept: { 'application/json': ['.json'] } }] });
                exportDialogInteractionComplete = true;
                const writable = await handle.createWritable();
                await writable.write(dataBlob);
                await writable.close();
                if (!isForcedBackupMode) NotificationService.add("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª.", "success", { id: "export-success-fsapi" });
                functionResult = true;
            } else {
                console.log("[exportAllData] File System Access API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥.");
                if (exportWindowFocusHandlerInstance) window.removeEventListener('focus', exportWindowFocusHandlerInstance);

                exportWindowFocusHandlerInstance = () => {
                    if (isExpectingExportFileDialog && !exportDialogInteractionComplete) {
                        console.log("[Export Focus Handler] –î–∏–∞–ª–æ–≥ –æ–∂–∏–¥–∞–ª—Å—è, –Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°—á–∏—Ç–∞–µ–º –æ—Ç–º–µ–Ω–æ–π.");
                        if (!isForcedBackupMode) NotificationService.add("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", "info", { duration: 5000, id: "export-cancelled-by-user-focus" });
                        functionResult = false;
                    }
                    if (exportWindowFocusHandlerInstance) {
                        window.removeEventListener('focus', exportWindowFocusHandlerInstance);
                        exportWindowFocusHandlerInstance = null;
                    }
                };
                window.addEventListener('focus', exportWindowFocusHandlerInstance);

                const dataUri = URL.createObjectURL(dataBlob);
                const linkElement = document.createElement('a');
                linkElement.href = dataUri;
                linkElement.download = exportFileName;
                document.body.appendChild(linkElement);
                linkElement.click();
                document.body.removeChild(linkElement);

                setTimeout(() => {
                    if (!exportDialogInteractionComplete) {
                        exportDialogInteractionComplete = true;
                        if (functionResult !== false) {
                            functionResult = true;
                            if (!isForcedBackupMode) NotificationService.add("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω.", "success");
                        }
                    }
                    URL.revokeObjectURL(dataUri);
                }, 1000);
            }
        } catch (err) {
            exportDialogInteractionComplete = true;
            if (err.name === 'AbortError') {
                console.log("[exportAllData] –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (File System Access API).");
                if (!isForcedBackupMode) NotificationService.add("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", "info", { id: "export-cancelled-user-fsapi" });
                functionResult = false;
            } else {
                console.error('[exportAllData] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
                if (!isForcedBackupMode) NotificationService.add(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${err.message}.`, "error", { important: true, id: "export-save-file-picker-failed" });
                functionResult = false;
            }
        }
    } catch (error) {
        console.error("[exportAllData] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —ç–∫—Å–ø–æ—Ä—Ç–∞:", error);
        functionResult = false;
        if (!isForcedBackupMode) {
            NotificationService.add(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`, "error", { important: true, id: "export-generic-error" });
        }
    } finally {
        if (exportWatchdogTimerId) clearTimeout(exportWatchdogTimerId);
        if (exportWindowFocusHandlerInstance) window.removeEventListener('focus', exportWindowFocusHandlerInstance);

        isExportOperationInProgress = false;
        isExpectingExportFileDialog = false;
        exportWindowFocusHandlerInstance = null;
        exportWatchdogTimerId = null;
        console.log(`[exportAllData FINALLY] –ü—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç: ${functionResult}`);
    }

    return functionResult;
}


function clearTemporaryThumbnailsFromContainer(container) {
    if (!container) return;
    const tempThumbs = container.querySelectorAll('.screenshot-thumbnail.temporary img[data-object-url]');
    tempThumbs.forEach(img => {
        if (img.dataset.objectUrl && img.dataset.objectUrlRevoked !== 'true') {
            try {
                URL.revokeObjectURL(img.dataset.objectUrl);
                console.log(`[clearTemporaryThumbnails] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL: ${img.dataset.objectUrl}`);
                img.dataset.objectUrlRevoked = 'true';
            } catch (e) {
                console.warn("–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ URL –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:", e);
            }
            delete img.dataset.objectUrl;
        }
    });

    const stepOrFormElement = container.closest('.edit-step, form');
    if (stepOrFormElement && stepOrFormElement._tempScreenshotBlobs) {
        delete stepOrFormElement._tempScreenshotBlobs;
        console.log("[clearTemporaryThumbnails] –û—á–∏—â–µ–Ω –º–∞—Å—Å–∏–≤ _tempScreenshotBlobs.");
    }
    container.innerHTML = '';
}


function base64ToBlob(base64, mimeType = '') {
    if (!base64 || typeof base64 !== 'string') {
        console.error(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Base64 –≤ Blob: –ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ Base64.`);
        return null;
    }
    try {
        const base64Data = base64.includes(',') ? base64.split(',')[1] : base64;
        if (!base64Data) {
            console.error(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Base64 –≤ Blob: –°—Ç—Ä–æ–∫–∞ Base64 –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞.`);
            return null;
        }
        const byteCharacters = atob(base64Data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        return new Blob([byteArray], { type: mimeType });
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Base64 –≤ Blob (MIME: ${mimeType}, Base64 –Ω–∞—á–∞–ª–æ: ${base64.substring(0, 30)}...):`, error);
        if (error instanceof DOMException && error.name === 'InvalidCharacterError') {
            console.error("   > –í–µ—Ä–æ—è—Ç–Ω–æ, —Å—Ç—Ä–æ–∫–∞ Base64 —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.");
        }
        return null;
    }
}

const importFileInput = document.getElementById('importFileInput');
const importDataBtn = document.getElementById('importDataBtn');


if (importDataBtn && importFileInput) {
    if (importDataBtn._clickHandlerInstance) {
        importDataBtn.removeEventListener('click', importDataBtn._clickHandlerInstance);
        console.log("[Import Init] –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ click –¥–ª—è importDataBtn —É–¥–∞–ª–µ–Ω.");
    }
    importDataBtn.addEventListener('click', handleImportButtonClick);
    importDataBtn._clickHandlerInstance = handleImportButtonClick;
    console.log("[Import Init] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ click –¥–ª—è importDataBtn —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");

    if (importFileInput._changeHandlerInstance) {
        importFileInput.removeEventListener('change', importFileInput._changeHandlerInstance);
        console.log("[Import Init] –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ change –¥–ª—è importFileInput —É–¥–∞–ª–µ–Ω.");
    }
    importFileInput.addEventListener('change', handleImportFileChange);
    importFileInput._changeHandlerInstance = handleImportFileChange;
    console.log("[Import Init] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ change –¥–ª—è importFileInput —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");

} else {
    console.error("[Import Init] –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã importDataBtn –∏–ª–∏ importFileInput. –§–ª–æ—É –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
}


async function _processActualImport(jsonString) {
    console.log("[_processActualImport V8 - Context-Aware] –ù–∞—á–∞–ª–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

    const STAGE_WEIGHTS_ACTUAL_IMPORT = {
        PARSE_JSON: 5,
        VALIDATE_SCHEMA: 5,
        DB_CHECK_REINIT: 5,
        CLEAR_STORES: 20,
        IMPORT_DATA: 35,
        APP_RE_INIT: 20,
        RENDER_ACTIVE_REGLAMENTS: 5,
    };
    let currentImportProgress = 0;
    let notificationMessageOnError = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞.";

    const updateTotalImportProgress = (stageWeightCompleted, stageName) => {
        currentImportProgress += stageWeightCompleted;
        const displayProgress = Math.min(currentImportProgress, (stageName === "FinalizeImportSuccess" ? 100 : 99));
        if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.updateProgress) {
            loadingOverlayManager.updateProgress(displayProgress);
        }
        console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ (${stageName}): ${displayProgress.toFixed(1)}% (–¥–æ–±–∞–≤–ª–µ–Ω–æ ${stageWeightCompleted.toFixed(1)}%, –≤—Å–µ–≥–æ ${currentImportProgress.toFixed(1)}%)`);
    };

    const updateFineGrainedProgressForImport = (baseProgress, stageWeight, current, total, operationName = "–û–ø–µ—Ä–∞—Ü–∏—è") => {
        if (total === 0 && current === 0) return;
        const stageProgressFraction = total > 0 ? (current / total) : 1;
        const currentStageProgressContribution = stageProgressFraction * stageWeight;
        const newOverallProgress = baseProgress + currentStageProgressContribution;
        const displayProgress = Math.min(newOverallProgress, 99);
        if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.updateProgress) {
            loadingOverlayManager.updateProgress(displayProgress, `${operationName}: ${Math.round(stageProgressFraction * 100)}%`);
        }
    };

    if (typeof loadingOverlayManager !== 'undefined' && !loadingOverlayManager.overlayElement) {
        console.warn("[_processActualImport V7] –û–≤–µ—Ä–ª–µ–π –Ω–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–π—á–∞—Å.");
        if (typeof loadingOverlayManager.createAndShow === 'function') loadingOverlayManager.createAndShow();
    }
    currentImportProgress = 0;
    if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.updateProgress) {
        loadingOverlayManager.updateProgress(1, "–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞...");
    }

    if (typeof NotificationService !== 'undefined' && NotificationService.add) {
        NotificationService.add("–ù–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", "info", { duration: 4000, id: "import-processing-started" });
    }

    const errorsOccurred = [];
    let skippedPuts = 0;
    let storesToImport = [];

    try {
        if (!db || (typeof db.objectStoreNames === 'undefined') || (db.connections !== undefined && db.connections === 0) || db.objectStoreNames.length === 0) {
            console.warn("[_processActualImport V7] DB is null, closed, or in an invalid state. Attempting re-initialization...");
            await initDB();
            if (!db || !db.objectStoreNames || db.objectStoreNames.length === 0) {
                console.error("[_processActualImport V7] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.");
                throw new Error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.");
            }
            console.log("[_processActualImport V7] DB re-initialized successfully.");
        } else {
            console.log("[_processActualImport V7] DB connection seems active and valid.");
        }
        updateTotalImportProgress(STAGE_WEIGHTS_ACTUAL_IMPORT.DB_CHECK_REINIT, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î");

        if (typeof jsonString !== 'string' || jsonString.trim() === '') {
            throw new Error("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.");
        }
        let importData;
        try {
            importData = JSON.parse(jsonString);
            console.log("[_processActualImport V7] JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω.");
            updateTotalImportProgress(STAGE_WEIGHTS_ACTUAL_IMPORT.PARSE_JSON, "–ü–∞—Ä—Å–∏–Ω–≥ JSON");
        } catch (error) {
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞.");
        }

        if (!importData || typeof importData.data !== 'object' || !importData.schemaVersion) {
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏–º–ø–æ—Ä—Ç–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data –∏–ª–∏ schemaVersion)");
        }
        console.log(`[_processActualImport V7] –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–∏ —Å—Ö–µ–º—ã —Ñ–∞–π–ª–∞: ${importData.schemaVersion}. –û–∂–∏–¥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${CURRENT_SCHEMA_VERSION}`);
        const [fileMajorStr, fileMinorStr] = importData.schemaVersion.split('.');
        const [appMajorStr, appMinorStr] = CURRENT_SCHEMA_VERSION.split('.');
        const fileMajor = parseInt(fileMajorStr, 10); const fileMinor = parseInt(fileMinorStr, 10);
        const appMajor = parseInt(appMajorStr, 10); const appMinor = parseInt(appMinorStr, 10);

        if (isNaN(fileMajor) || isNaN(fileMinor) || isNaN(appMajor) || isNaN(appMinor)) {
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ —Å—Ö–µ–º—ã –≤ —Ñ–∞–π–ª–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.");
        }
        if (fileMajor !== appMajor) {
            throw new Error(`–ò–º–ø–æ—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: –≤–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã —Ñ–∞–π–ª–∞ (${importData.schemaVersion}) –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –≤–µ—Ä—Å–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (${CURRENT_SCHEMA_VERSION}). –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞–∂–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è ${appMajor}.x.`);
        }
        if (fileMinor > appMinor) {
            throw new Error(`–ò–º–ø–æ—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: –≤–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã —Ñ–∞–π–ª–∞ (${importData.schemaVersion}) –Ω–æ–≤–µ–µ, —á–µ–º –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (${CURRENT_SCHEMA_VERSION}). –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ –±–æ–ª–µ–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏.`);
        }
        if (fileMinor < appMinor && typeof NotificationService !== 'undefined' && NotificationService.add) {
            NotificationService.add(`–í–ù–ò–ú–ê–ù–ò–ï: –í–µ—Ä—Å–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (${importData.schemaVersion}) —Å—Ç–∞—Ä—à–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (${CURRENT_SCHEMA_VERSION}). –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–ª–∏ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞.`, "warning", { important: true, id: "old-schema-import-warning", isDismissible: true });
        }
        updateTotalImportProgress(STAGE_WEIGHTS_ACTUAL_IMPORT.VALIDATE_SCHEMA, "–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã");

        if (importData.data.extLinks && Array.isArray(importData.data.extLinks) && importData.data.extLinks.some(link => typeof link.category === 'string') && importData.data.extLinkCategories) {
            console.log("[_processActualImport V7] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã extLinks —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏. –ó–∞–ø—É—Å–∫ –Ω–∞–¥–µ–∂–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –ª–µ—Ç—É.");

            const legacyCategoryKeyToDefaultName = {
                docs: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
                gov: '–ì–æ—Å. —Å–∞–π—Ç—ã',
                tools: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
                other: '–ü—Ä–æ—á–µ–µ'
            };

            const oldKeyToNewIdMap = new Map();

            if (Array.isArray(importData.data.extLinkCategories)) {
                const defaultNameToNewId = new Map();
                importData.data.extLinkCategories.forEach(cat => {
                    if (cat && cat.name && cat.id !== undefined) {
                        for (const key in legacyCategoryKeyToDefaultName) {
                            if (legacyCategoryKeyToDefaultName[key] === cat.name) {
                                defaultNameToNewId.set(cat.name, cat.id);
                                break;
                            }
                        }
                    }
                });

                for (const oldKey in legacyCategoryKeyToDefaultName) {
                    const defaultName = legacyCategoryKeyToDefaultName[oldKey];
                    if (defaultNameToNewId.has(defaultName)) {
                        oldKeyToNewIdMap.set(oldKey, defaultNameToNewId.get(defaultName));
                    }
                }
            }

            console.log("[_processActualImport V7] –ö–∞—Ä—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ '–°—Ç–∞—Ä—ã–π –∫–ª—é—á -> –ù–æ–≤—ã–π ID':", oldKeyToNewIdMap);

            let migrationCount = 0;
            importData.data.extLinks.forEach(link => {
                if (link && typeof link.category === 'string') {
                    const oldCatKey = link.category;
                    if (oldKeyToNewIdMap.has(oldCatKey)) {
                        const newId = oldKeyToNewIdMap.get(oldCatKey);
                        console.log(`[Migration] –ó–∞–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å—Å—ã–ª–∫–∏ "${link.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}": —Å –∫–ª—é—á–∞ '${oldCatKey}' –Ω–∞ –Ω–æ–≤—ã–π ID '${newId}'`);
                        link.category = newId;
                        migrationCount++;
                    } else {
                        console.warn(`[Migration] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–π ID –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '${oldCatKey}'. –°—Å—ã–ª–∫–∞ "${link.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}" –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.`);
                        link.category = null;
                    }
                }
            });

            if (migrationCount > 0) {
                console.log(`[_processActualImport V7] –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –ª–µ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ ${migrationCount} —Å—Å—ã–ª–æ–∫.`);
            } else {
                console.log(`[_processActualImport V7] –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –ª–µ—Ç—É –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å (—Å—Å—ã–ª–∫–∏ —É–∂–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π).`);
            }
        }

        storesToImport = Object.keys(importData.data).filter(storeName => {
            if (!db.objectStoreNames.contains(storeName)) {
                console.warn(`[_processActualImport V7] –•—Ä–∞–Ω–∏–ª–∏—â–µ '${storeName}' –∏–∑ —Ñ–∞–π–ª–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ –ë–î. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.`);
                return false;
            }
            if (storeName === 'searchIndex') {
                console.log(`[_processActualImport V7] –•—Ä–∞–Ω–∏–ª–∏—â–µ 'searchIndex' –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö, –æ–Ω–æ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.`);
                return false;
            }
            return true;
        });
        if (storesToImport.length === 0) {
            throw new Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º).");
        }
        console.log("[_processActualImport V7] –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:", storesToImport);

        let importTransactionSuccessful = false;
        try {
            console.log("[_processActualImport V7] –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞...");
            importTransactionSuccessful = await new Promise(async (resolvePromise, rejectPromise) => {
                let transaction;
                try {
                    transaction = db.transaction(storesToImport, 'readwrite');
                    if (!transaction) throw new Error("db.transaction –≤–µ—Ä–Ω—É–ª–∞ null/undefined.");
                } catch (txError) { errorsOccurred.push({ storeName: storesToImport.join(', '), error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txError.message}`, item: null }); return rejectPromise(txError); }

                transaction.oncomplete = () => { console.log("[_processActualImport V7] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (oncomplete)."); resolvePromise(true); };
                transaction.onerror = (e) => { const errorMsg = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${e.target.error?.message || e.target.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`; console.error(`[_processActualImport V7] Transaction error:`, e.target.error); errorsOccurred.push({ storeName: storesToImport.join(', '), error: errorMsg, item: null }); rejectPromise(e.target.error || new Error(errorMsg)); };
                transaction.onabort = (e) => { const errorMsg = `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞: ${e.target.error?.message || e.target.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`; console.warn(`[_processActualImport V7] Transaction aborted:`, e.target.error); errorsOccurred.push({ storeName: storesToImport.join(', '), error: errorMsg, item: null }); rejectPromise(e.target.error || new Error(errorMsg)); };

                const clearPromises = []; const baseProgressForClear = currentImportProgress;
                console.log(`[_processActualImport V7] –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ ${storesToImport.length} —Ö—Ä–∞–Ω–∏–ª–∏—â...`);
                for (let i = 0; i < storesToImport.length; i++) {
                    const storeName = storesToImport[i];
                    clearPromises.push(new Promise((resolveClear, rejectClear) => {
                        try {
                            const store = transaction.objectStore(storeName); const clearRequest = store.clear();
                            clearRequest.onsuccess = () => { console.log(`[_processActualImport V7] –•—Ä–∞–Ω–∏–ª–∏—â–µ ${storeName} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ.`); updateFineGrainedProgressForImport(baseProgressForClear, STAGE_WEIGHTS_ACTUAL_IMPORT.CLEAR_STORES, i + 1, storesToImport.length, "–û—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â"); resolveClear(); };
                            clearRequest.onerror = (e_clear) => { const errorMsg_clear = `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ${storeName}: ${e_clear.target.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`; console.error(errorMsg_clear, e_clear.target.error); errorsOccurred.push({ storeName, error: errorMsg_clear, item: null }); rejectClear(new Error(errorMsg_clear)); };
                        } catch (storeError) { errorsOccurred.push({ storeName, error: `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ${storeName} –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: ${storeError.message}`, item: null }); rejectClear(storeError); }
                    }));
                }
                try { await Promise.all(clearPromises); currentImportProgress = Math.max(currentImportProgress, baseProgressForClear + STAGE_WEIGHTS_ACTUAL_IMPORT.CLEAR_STORES); if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.updateProgress) loadingOverlayManager.updateProgress(Math.min(currentImportProgress, 99), "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"); console.log('[_processActualImport V7] –í—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.'); }
                catch (clearAllError) { console.error('[_processActualImport V7] –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â:', clearAllError); return rejectPromise(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${clearAllError.message || clearAllError}`)); }

                let putPromises = []; let totalItemsToPut = 0; storesToImport.forEach(storeName => { totalItemsToPut += (importData.data[storeName] || []).length; });
                let processedItemsPut = 0; const baseProgressForImportData = currentImportProgress;
                console.log(`[_processActualImport V7] –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ ${totalItemsToPut} —ç–ª–µ–º–µ–Ω—Ç–æ–≤...`);
                for (const storeName of storesToImport) {
                    let itemsToImportOriginal = importData.data[storeName];
                    if (!Array.isArray(itemsToImportOriginal)) { errorsOccurred.push({ storeName, error: '–î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º', item: null }); if (totalItemsToPut > 0) { totalItemsToPut = Math.max(0, totalItemsToPut - (importData.data[storeName]?.length || 0)); } continue; }
                    const storeConfigFound = storeConfigs.find(sc => sc.name === storeName);
                    if (!storeConfigFound) { errorsOccurred.push({ storeName, error: `–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ${storeName}`, item: null }); if (transaction && transaction.abort) transaction.abort(); return rejectPromise(new Error(`Missing storeConfig for ${storeName}`)); }
                    const keyPathFromConfig = storeConfigFound.options?.keyPath; const autoIncrementFromConfig = storeConfigFound.options?.autoIncrement || false;
                    let validItemsForStore = [];
                    for (const item of itemsToImportOriginal) {
                        if (typeof item !== 'object' || item === null) { errorsOccurred.push({ storeName, error: '–≠–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ null', item: JSON.stringify(item)?.substring(0, 100) }); skippedPuts++; continue; }
                        if (!autoIncrementFromConfig && keyPathFromConfig) { let hasKey = false; if (typeof keyPathFromConfig === 'string') hasKey = item.hasOwnProperty(keyPathFromConfig) && item[keyPathFromConfig] !== undefined && item[keyPathFromConfig] !== null; else if (Array.isArray(keyPathFromConfig)) hasKey = keyPathFromConfig.every(kp => item.hasOwnProperty(kp) && item[kp] !== undefined && item[kp] !== null); if (!hasKey) { errorsOccurred.push({ storeName, error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ null/undefined –∫–ª—é—á '${keyPathFromConfig}'`, item: JSON.stringify(item).substring(0, 100) }); skippedPuts++; continue; } }
                        if (!autoIncrementFromConfig && keyPathFromConfig && typeof item === 'object' && item !== null) { const itemKeys = Object.keys(item); let isOnlyKeyPath = false; if (typeof keyPathFromConfig === 'string') isOnlyKeyPath = itemKeys.length === 1 && itemKeys[0] === keyPathFromConfig; else if (Array.isArray(keyPathFromConfig)) isOnlyKeyPath = itemKeys.length === keyPathFromConfig.length && keyPathFromConfig.every(k => itemKeys.includes(k)); if (isOnlyKeyPath && Object.keys(item).every(k => item[k] === null || item[k] === undefined || (typeof item[k] === 'string' && item[k].trim() === ''))) { errorsOccurred.push({ storeName, error: `–≠–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–ª—é—á(–∏) '${keyPathFromConfig}' —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏`, item: JSON.stringify(item).substring(0, 100) }); skippedPuts++; continue; } }
                        validItemsForStore.push(item);
                    }
                    let itemsToImport = validItemsForStore;

                    if (storeName === 'screenshots') {
                        itemsToImport = itemsToImport.map((item) => {
                            if (item && item.hasOwnProperty('blob')) { const blobData = item.blob; if (typeof blobData === 'object' && blobData !== null && typeof blobData.base64 === 'string' && typeof blobData.type === 'string') { const convertedBlob = base64ToBlob(blobData.base64, blobData.type); if (convertedBlob instanceof Blob) { item.blob = convertedBlob; } else { errorsOccurred.push({ storeName, error: `–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Base64->Blob –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ID: ${item.id || 'N/A'}`, item: `(–¥–∞–Ω–Ω—ã–µ blob: ${JSON.stringify(blobData)?.substring(0, 50)}...)` }); delete item.blob; } } else if (blobData === null) { delete item.blob; } else if (!(blobData instanceof Blob)) { errorsOccurred.push({ storeName, error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª–µ blob –¥–ª—è ID: ${item.id || 'N/A'}`, item: `(—Ç–∏–ø blob: ${typeof blobData})` }); delete item.blob; } } return item;
                        }).filter(item => !(item.hasOwnProperty('blob') && item.blob === undefined));
                    }

                    if (itemsToImport.length > 0) {
                        let store = null; try { store = transaction.objectStore(storeName); } catch (storeError) { errorsOccurred.push({ storeName, error: `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ${storeName} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${storeError.message}`, item: null }); totalItemsToPut = Math.max(0, totalItemsToPut - itemsToImport.length); continue; }
                        for (const item of itemsToImport) {
                            putPromises.push(new Promise((resolveReq, rejectReq) => {
                                try {
                                    const putRequest = store.put(item);
                                    putRequest.onsuccess = () => { processedItemsPut++; updateFineGrainedProgressForImport(baseProgressForImportData, STAGE_WEIGHTS_ACTUAL_IMPORT.IMPORT_DATA, processedItemsPut, totalItemsToPut, "–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö"); resolveReq({ storeName, operation: 'put', success: true }); };
                                    putRequest.onerror = (e_put) => {
                                        processedItemsPut++; updateFineGrainedProgressForImport(baseProgressForImportData, STAGE_WEIGHTS_ACTUAL_IMPORT.IMPORT_DATA, processedItemsPut, totalItemsToPut, "–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö");
                                        const errorMsg_put = e_put.target.error?.message || 'Put request failed';
                                        errorsOccurred.push({ storeName, error: `–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ${errorMsg_put}`, item: JSON.stringify(item)?.substring(0, 100) });
                                        rejectReq(e_put.target.error || new Error(errorMsg_put));
                                    };
                                } catch (putError) {
                                    processedItemsPut++; updateFineGrainedProgressForImport(baseProgressForImportData, STAGE_WEIGHTS_ACTUAL_IMPORT.IMPORT_DATA, processedItemsPut, totalItemsToPut, "–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö");
                                    errorsOccurred.push({ storeName, error: `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: ${putError.message}`, item: JSON.stringify(item).substring(0, 100) });
                                    rejectReq(putError);
                                }
                            }));
                        }
                    }
                }

                Promise.all(putPromises).then(putResults => {
                    currentImportProgress = Math.max(currentImportProgress, baseProgressForImportData + STAGE_WEIGHTS_ACTUAL_IMPORT.IMPORT_DATA);
                    if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.updateProgress) loadingOverlayManager.updateProgress(Math.min(currentImportProgress, 99), "–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                    console.log('[_processActualImport V7] –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã.');
                }).catch(promiseAllError => {
                    console.error('[_processActualImport V7] –û—à–∏–±–∫–∞ –≤ Promise.all(putPromises), –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ —É–¥–∞–ª–∏—Å—å:', promiseAllError);
                    if (transaction.abort) {
                        console.log('[_processActualImport V7] –û—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏.');
                        transaction.abort();
                    } else {
                        rejectPromise(promiseAllError);
                    }
                });
            });
        } catch (transactionError) {
            console.error("[_processActualImport V7] –û—à–∏–±–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞:", transactionError);
            notificationMessageOnError = `–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${transactionError.message || transactionError}. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã.`;
            throw transactionError;
        }

        if (importTransactionSuccessful) {
            const reglamentsWereImportedFromFile = storesToImport.includes('reglaments');
            const preferencesWereInFile = Object.keys(importData.data).includes('preferences');
            let categoryInfoWasInImportedPreferences = false;
            if (preferencesWereInFile && importData.data.preferences && Array.isArray(importData.data.preferences)) {
                categoryInfoWasInImportedPreferences = importData.data.preferences.some(p => p.id === CATEGORY_INFO_KEY);
            }

            if (reglamentsWereImportedFromFile && (!preferencesWereInFile || !categoryInfoWasInImportedPreferences)) {
                console.warn(`[_processActualImport V7] –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ ${CATEGORY_INFO_KEY} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö preferences –∏–ª–∏ preferences –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π ${CATEGORY_INFO_KEY} –∏–∑ –ë–î...`);
                try {
                    await deleteFromIndexedDB('preferences', CATEGORY_INFO_KEY);
                    console.log(`[_processActualImport V7] –°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å ${CATEGORY_INFO_KEY} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ 'preferences'.`);
                } catch (deleteError) {
                    console.error(`[_processActualImport V7] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${CATEGORY_INFO_KEY} –∏–∑ 'preferences':`, deleteError);
                    errorsOccurred.push({ storeName: 'preferences', error: `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (${CATEGORY_INFO_KEY}): ${deleteError.message}`, item: CATEGORY_INFO_KEY });
                }
            }
        }


        if (importTransactionSuccessful) {
            console.log("[_processActualImport V8] –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ IndexedDB –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");

            console.log("[FIX] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫—ç—à–µ–π –≤ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π...");
            if (typeof algorithms !== 'undefined') {
                algorithms = { main: {}, program: [], skzi: [], lk1c: [], webReg: [] };
                console.log("[FIX] –ö—ç—à 'algorithms' —Å–±—Ä–æ—à–µ–Ω.");
            }
            if (typeof extLinkCategoryInfo !== 'undefined') {
                extLinkCategoryInfo = {};
                console.log("[FIX] –ö—ç—à 'extLinkCategoryInfo' —Å–±—Ä–æ—à–µ–Ω.");
            }

            if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.updateProgress) {
                loadingOverlayManager.updateProgress(Math.min(currentImportProgress + 1, 99), "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
            }
            try {
                const dbReadyAfterImport = await appInit('import');
                if (!dbReadyAfterImport && db === null) {
                    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ (–ë–î —Å—Ç–∞–ª–∞ null).");
                }
                if (storesToImport.includes('preferences') &&
                    importData.data.preferences?.some(p => p.id === 'uiSettings')) {
                    await loadUISettings();
                }

                updateTotalImportProgress(STAGE_WEIGHTS_ACTUAL_IMPORT.APP_RE_INIT, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");

                const reglamentsListDiv = document.getElementById('reglamentsList');
                const categoryGrid = document.getElementById('reglamentCategoryGrid');

                if (currentSection === 'reglaments' &&
                    reglamentsListDiv && !reglamentsListDiv.classList.contains('hidden') &&
                    categoryGrid && categoryGrid.classList.contains('hidden')) {

                    const currentCategoryId = reglamentsListDiv.dataset.currentCategory;
                    if (currentCategoryId) {
                        console.log(`[_processActualImport V7 - FIX] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${currentCategoryId}`);
                        if (typeof showReglamentsForCategory === 'function') {
                            try {
                                await showReglamentsForCategory(currentCategoryId);
                                console.log(`[_processActualImport V7 - FIX] showReglamentsForCategory –¥–ª—è ${currentCategoryId} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞.`);
                                updateTotalImportProgress(STAGE_WEIGHTS_ACTUAL_IMPORT.RENDER_ACTIVE_REGLAMENTS, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤");
                            } catch (e) {
                                console.error(`[_processActualImport V7 - FIX] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ showReglamentsForCategory –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${currentCategoryId}:`, e);
                                if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                                    NotificationService.add(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.`, "warning");
                                }
                                if (categoryGrid && reglamentsListDiv) {
                                    reglamentsListDiv.classList.add('hidden');
                                    categoryGrid.classList.remove('hidden');
                                    const currentCategoryTitleEl = document.getElementById('currentCategoryTitle');
                                    if (currentCategoryTitleEl) currentCategoryTitleEl.textContent = '';
                                    if (typeof renderReglamentCategories === 'function') renderReglamentCategories();
                                }
                            }
                        } else {
                            console.warn('[_processActualImport V7 - FIX] –§—É–Ω–∫—Ü–∏—è showReglamentsForCategory –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.');
                            if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                                NotificationService.add("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞).", "error");
                            }
                        }
                    } else {
                        console.warn('[_processActualImport V7 - FIX] reglamentsListDiv –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ currentCategory –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ dataset. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.');
                        if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                            NotificationService.add("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", "warning");
                        }
                    }
                } else {
                    updateTotalImportProgress(STAGE_WEIGHTS_ACTUAL_IMPORT.RENDER_ACTIVE_REGLAMENTS || 0, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ (–ø—Ä–æ–ø—É—â–µ–Ω–æ)");
                }

                if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.updateProgress) {
                    loadingOverlayManager.updateProgress(100, "FinalizeImportSuccess");
                }
                console.log("[_processActualImport V7] –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 100%.");

                const nonFatalErrors = errorsOccurred.filter(e => !e.error.includes('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏') && !e.error.includes('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞'));
                if (nonFatalErrors.length > 0 || skippedPuts > 0) {
                    let errorSummary = nonFatalErrors.map(e => `  - ${e.storeName}: ${e.error}${e.item ? ` (–≠–ª–µ–º–µ–Ω—Ç: ${e.item})` : ''}`).join('\n');
                    if (skippedPuts > 0) { const skippedMsg = `\n  - –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–¥–æ –∑–∞–ø–∏—Å–∏): ${skippedPuts} –∑–∞–ø–∏—Å–µ–π.`; errorSummary = nonFatalErrors.length > 0 ? errorSummary + skippedMsg : skippedMsg.trimStart(); }
                    if (errorSummary.length > 500) errorSummary = errorSummary.substring(0, 500) + '...\n(–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏)';
                    const importWarningMessage = `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å ${nonFatalErrors.length + skippedPuts} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏/–ø—Ä–æ–ø—É—Å–∫–∞–º–∏. –î–µ—Ç–∞–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.`;
                    if (typeof NotificationService !== 'undefined' && NotificationService.add) NotificationService.add(importWarningMessage, "warning", { important: true, duration: 15000 });
                    console.warn(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏/–ø—Ä–æ–ø—É—Å–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–≤—Å–µ–≥–æ ${nonFatalErrors.length + skippedPuts}):`, nonFatalErrors, `Skipped Validating: ${skippedPuts}`);
                    return { success: true, message: importWarningMessage };
                } else {
                    if (typeof NotificationService !== 'undefined' && NotificationService.add) NotificationService.add("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", "success", { duration: 7000 });
                    return { success: true };
                }
            } catch (postImportError) {
                console.error("[_processActualImport V8] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞:", postImportError);
                notificationMessageOnError = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: ${postImportError.message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5).`;
                throw postImportError;
            }
        } else {
            console.error("[_processActualImport V7] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –ù–ï –£–î–ê–õ–ê–°–¨ (importTransactionSuccessful is false).");
            if (!errorsOccurred.some(e => e.error.includes('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏') || e.error.includes('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞'))) {
                notificationMessageOnError = "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–µ. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã.";
            } else if (errorsOccurred.length > 0) {
                notificationMessageOnError = errorsOccurred.find(e => e.error.includes('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏') || e.error.includes('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞'))?.error || "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.";
            } else {
                notificationMessageOnError = "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª—Å—è –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.";
            }
            throw new Error(notificationMessageOnError);
        }
    } catch (error) {
        console.error("[_processActualImport V7] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞:", error);
        if (notificationMessageOnError === "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞." || (error.message && !notificationMessageOnError.includes(error.message))) {
            notificationMessageOnError = `–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`;
        }
        if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.overlayElement && loadingOverlayManager.updateProgress) {
            loadingOverlayManager.updateProgress(100, "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞");
        }
        if (typeof NotificationService !== 'undefined' && NotificationService.add) NotificationService.add(notificationMessageOnError, "error", { important: true, duration: 0 });
        return { success: false, message: notificationMessageOnError };
    }
}


async function performForcedBackup() {
    const userAgreesToBackup = window.confirm(
        "–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º?\n\n" +
        "–û–¢–ö–ê–ó –û–¢ –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –ú–û–ñ–ï–¢ –ü–†–ò–í–ï–°–¢–ò –ö –ü–û–õ–ù–û–ô –ò –ù–ï–û–ë–†–ê–¢–ò–ú–û–ô –ü–û–¢–ï–†–ï –î–ê–ù–ù–´–•.\n\n" +
        "–ù–∞–∂–º–∏—Ç–µ '–û–ö', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è).\n" +
        "–ù–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–º–ø–æ—Ä—Ç –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫)."
    );

    NotificationService.dismissImportant("critical-backup-warning-prompt");

    if (userAgreesToBackup) {
        console.log("[performForcedBackup] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –±—ç–∫–∞–ø.");
        try {
            if (typeof exportAllData !== 'function') {
                console.error("performForcedBackup: —Ñ—É–Ω–∫—Ü–∏—è exportAllData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                NotificationService.add("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error", { important: true, duration: 0 });
                return false;
            }

            const exportOutcome = await exportAllData({ isForcedBackupMode: true });

            if (typeof exportOutcome === 'object' && exportOutcome.errorType === 'UserGestureRequired') {
                NotificationService.add(
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞. " +
                    "–ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.",
                    "error",
                    { important: true, duration: 0, id: "backup-gesture-error-critical-pfb" }
                );
                return false;
            } else if (exportOutcome === true) {
                NotificationService.add("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", "success", { duration: 5000, id: "forced-backup-success-pfb" });
                return true;
            } else {
                NotificationService.add("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω.", "error", { important: true, duration: 7000, id: "forced-backup-failed-pfb" });
                return false;
            }
        } catch (error) {
            console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–Ω—É—Ç—Ä–∏ performForcedBackup):", error);
            NotificationService.add("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: " + (error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"), "error", { important: true, duration: 0, id: "forced-backup-critical-error-pfb" });
            return false;
        }
    } else {
        console.log("[performForcedBackup] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –±—ç–∫–∞–ø–∞.");
        return 'skipped_by_user';
    }
}


function showNotification(message, type = "success", duration = 5000) {
    console.log(`[SHOW_NOTIFICATION_CALL_V5.2_INLINE_STYLE] Message: "${message}", Type: "${type}", Duration: ${duration}, Timestamp: ${new Date().toISOString()}`);
    let callStackInfo = 'N/A';
    try {
        const err = new Error();
        if (err.stack) {
            const stackLines = err.stack.split('\n');
            callStackInfo = stackLines.slice(2, 5).map(line => line.trim()).join(' -> ');
        }
    } catch (e) { }
    console.log(`[SHOW_NOTIFICATION_CALL_STACK_V5.2_INLINE_STYLE] Called from: ${callStackInfo}`);

    if (!message || typeof message !== 'string' || message.trim() === "") {
        console.warn("[ShowNotification_V5.2_INLINE_STYLE] –í—ã–∑–≤–∞–Ω —Å –ø—É—Å—Ç—ã–º –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ.", { messageContent: message, type, duration });
        return;
    }

    const FADE_DURATION_MS = 300;
    const NOTIFICATION_ID = 'notification';

    let notificationElement = document.getElementById(NOTIFICATION_ID);
    let isNewNotification = !notificationElement;

    if (notificationElement) {
        console.log(`[ShowNotification_V5.2_INLINE_STYLE] –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (ID: ${NOTIFICATION_ID}). –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...`);
        cancelAnimationFrame(Number(notificationElement.dataset.animationFrameId || 0));
        clearTimeout(Number(notificationElement.dataset.hideTimeoutId || 0));
        clearTimeout(Number(notificationElement.dataset.removeTimeoutId || 0));
        notificationElement.style.transform = 'translateX(0)';
        notificationElement.style.opacity = '1';
    } else {
        console.log(`[ShowNotification_V5.2_INLINE_STYLE] –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ (ID: ${NOTIFICATION_ID}).`);
        notificationElement = document.createElement('div');
        notificationElement.id = NOTIFICATION_ID;
        notificationElement.setAttribute('role', 'alert');
        notificationElement.style.willChange = 'transform, opacity';
        notificationElement.style.transform = 'translateX(100%)';
        notificationElement.style.opacity = '0';
    }

    let bgColorClass = 'bg-green-500 dark:bg-green-600';
    let iconClass = 'fa-check-circle';

    switch (type) {
        case "error":
            bgColorClass = 'bg-red-600 dark:bg-red-700';
            iconClass = 'fa-times-circle';
            break;
        case "warning":
            bgColorClass = 'bg-yellow-500 dark:bg-yellow-600';
            iconClass = 'fa-exclamation-triangle';
            break;
        case "info":
            bgColorClass = 'bg-blue-500 dark:bg-blue-600';
            iconClass = 'fa-info-circle';
            break;
    }

    const colorClassesToRemove = ['bg-green-500', 'dark:bg-green-600', 'bg-red-600', 'dark:bg-red-700', 'bg-yellow-500', 'dark:bg-yellow-600', 'bg-blue-500', 'dark:bg-blue-600'];
    notificationElement.classList.remove(...colorClassesToRemove);


    notificationElement.className = `fixed p-4 rounded-lg shadow-xl text-white text-sm font-medium transform transition-all duration-${FADE_DURATION_MS} ease-out max-w-sm sm:max-w-md ${bgColorClass}`;


    notificationElement.style.top = '20px';
    notificationElement.style.right = '20px';
    notificationElement.style.bottom = 'auto';
    notificationElement.style.left = 'auto';

    notificationElement.style.zIndex = '200000';

    let closeButton = notificationElement.querySelector('.notification-close-btn');
    let messageSpan = notificationElement.querySelector('.notification-message-span');
    let iconElement = notificationElement.querySelector('.notification-icon-i');

    if (!closeButton || !messageSpan || !iconElement) {
        notificationElement.innerHTML = '';

        const iconContainer = document.createElement('div');
        iconContainer.className = 'flex items-center';

        iconElement = document.createElement('i');
        iconElement.className = `fas ${iconClass} mr-3 text-lg notification-icon-i`;

        messageSpan = document.createElement('span');
        messageSpan.className = 'flex-1 notification-message-span';

        iconContainer.appendChild(iconElement);
        iconContainer.appendChild(messageSpan);

        closeButton = document.createElement('button');
        closeButton.setAttribute('type', 'button');
        closeButton.setAttribute('aria-label', '–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
        closeButton.className = 'ml-4 p-1 text-current opacity-70 hover:opacity-100 focus:opacity-100 focus:outline-none focus:ring-1 focus:ring-white rounded-full flex items-center justify-center w-6 h-6 leading-none notification-close-btn';
        closeButton.innerHTML = '<i class="fas fa-times fa-sm"></i>';

        const contentWrapper = document.createElement('div');
        contentWrapper.className = 'flex items-center justify-between w-full';
        contentWrapper.appendChild(iconContainer);
        contentWrapper.appendChild(closeButton);

        notificationElement.appendChild(contentWrapper);
    }

    iconElement.className = `fas ${iconClass} mr-3 text-lg notification-icon-i`;
    messageSpan.textContent = message;

    const closeAndRemove = () => {
        if (!document.body.contains(notificationElement)) {
            console.log(`[ShowNotification_V5.2_INLINE_STYLE CloseAndRemove] –≠–ª–µ–º–µ–Ω—Ç (msg: "${messageSpan.textContent}") —É–∂–µ —É–¥–∞–ª–µ–Ω, –≤—ã—Ö–æ–¥.`);
            return;
        }
        console.log(`[ShowNotification_V5.2_INLINE_STYLE CloseAndRemove] –ó–∞–ø—É—Å–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è (msg: "${messageSpan.textContent}").`);

        clearTimeout(Number(notificationElement.dataset.hideTimeoutId));
        clearTimeout(Number(notificationElement.dataset.removeTimeoutId));

        notificationElement.style.transform = 'translateX(100%)';
        notificationElement.style.opacity = '0';
        console.log(`[ShowNotification_V5.2_INLINE_STYLE CloseAndRemove] –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –¥–ª—è (msg: "${messageSpan.textContent}") –∑–∞–ø—É—â–µ–Ω–∞.`);

        const currentRemoveId = setTimeout(() => {
            if (document.body.contains(notificationElement)) {
                notificationElement.remove();
                console.log(`[ShowNotification_V5.2_INLINE_STYLE CloseAndRemove] –≠–ª–µ–º–µ–Ω—Ç (msg: "${messageSpan.textContent}") —É–¥–∞–ª–µ–Ω –∏–∑ DOM –ø–æ —Ç–∞–π–º–µ—Ä—É.`);
            }
        }, FADE_DURATION_MS);
        notificationElement.dataset.removeTimeoutId = currentRemoveId.toString();
    };

    if (closeButton._clickHandler) {
        closeButton.removeEventListener('click', closeButton._clickHandler);
    }
    closeButton._clickHandler = (e) => {
        e.stopPropagation();
        console.log(`[ShowNotification_V5.2_INLINE_STYLE] –ö–ª–∏–∫ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É –¥–ª—è (msg: "${messageSpan.textContent}").`);
        closeAndRemove();
    };
    closeButton.addEventListener('click', closeButton._clickHandler);

    if (isNewNotification) {
        document.body.appendChild(notificationElement);
        console.log(`[ShowNotification_V5.2_INLINE_STYLE] –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (msg: "${message}") –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ DOM.`);
    }

    if (!isNewNotification) {
        notificationElement.style.transform = 'translateX(100%)';
        notificationElement.style.opacity = '0';
    }

    notificationElement.dataset.animationFrameId = requestAnimationFrame(() => {
        if (document.body.contains(notificationElement)) {
            notificationElement.style.transform = 'translateX(0)';
            notificationElement.style.opacity = '1';
            console.log(`[ShowNotification_V5.2_INLINE_STYLE] –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è (msg: "${message}") –∑–∞–ø—É—â–µ–Ω–∞.`);
        }
    }).toString();

    if (duration > 0) {
        const hideTimeoutId = setTimeout(closeAndRemove, duration);
        notificationElement.dataset.hideTimeoutId = hideTimeoutId.toString();
        console.log(`[ShowNotification_V5.2_INLINE_STYLE] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω hideTimeoutId: ${hideTimeoutId} –Ω–∞ ${duration}ms –¥–ª—è (msg: "${message}").`);
    } else if (duration === 0) {
        console.log(`[ShowNotification_V5.2_INLINE_STYLE] Duration is 0 –¥–ª—è (msg: "${message}"). –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ù–ï –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`);
    }
}


const DEFAULT_MAIN_ALGORITHM = JSON.parse(JSON.stringify(algorithms.main));

const DEFAULT_OTHER_SECTIONS = {};
for (const sectionKey in algorithms) {
    if (sectionKey !== 'main' && Object.prototype.hasOwnProperty.call(algorithms, sectionKey)) {
        DEFAULT_OTHER_SECTIONS[sectionKey] = JSON.parse(JSON.stringify(algorithms[sectionKey]));
    }
}


function updateVisibleTabs() {
    const tabsNav = document.querySelector('nav.flex.flex-wrap');
    const moreTabsBtn = document.getElementById('moreTabsBtn');
    const moreTabsDropdown = document.getElementById('moreTabsDropdown');
    const moreTabsContainer = moreTabsBtn ? moreTabsBtn.parentNode : null;

    const LAYOUT_ERROR_MARGIN = 5;

    if (!tabsNav || !moreTabsBtn || !moreTabsDropdown || !moreTabsContainer || (moreTabsContainer && moreTabsContainer.nodeName === 'NAV')) {
        console.warn("[updateVisibleTabs v8_FIXED] Aborted: Required DOM elements not found or invalid parent for moreTabsBtn.");
        if (moreTabsContainer && document.body.contains(moreTabsContainer)) {
            moreTabsContainer.classList.add('hidden');
        }
        updateVisibleTabsRetryCount = 0;
        return;
    }

    if (tabsNav.offsetWidth === 0 && updateVisibleTabsRetryCount < MAX_UPDATE_VISIBLE_TABS_RETRIES) {
        updateVisibleTabsRetryCount++;
        console.warn(`[updateVisibleTabs v8_FIXED - Retry ${updateVisibleTabsRetryCount}/${MAX_UPDATE_VISIBLE_TABS_RETRIES}] tabsNav.offsetWidth is 0. Retrying in next frame...`);
        requestAnimationFrame(updateVisibleTabs);
        return;
    } else if (tabsNav.offsetWidth === 0 && updateVisibleTabsRetryCount >= MAX_UPDATE_VISIBLE_TABS_RETRIES) {
        console.error(`[updateVisibleTabs v8_FIXED - Max Retries Reached] tabsNav.offsetWidth is still 0. Calculation skipped.`);
        if (moreTabsContainer && document.body.contains(moreTabsContainer)) {
            moreTabsContainer.classList.add('hidden');
        }
        updateVisibleTabsRetryCount = 0;
        return;
    }

    updateVisibleTabsRetryCount = 0;

    moreTabsDropdown.innerHTML = '';
    if (moreTabsContainer) {
        moreTabsContainer.classList.add('hidden');
    }

    const allPotentialTabs = Array.from(tabsNav.querySelectorAll('.tab-btn:not(#moreTabsBtn)'));
    allPotentialTabs.forEach(tab => {
        tab.classList.remove('overflow-tab');
        tab.style.display = '';
    });

    const visibleTabs = allPotentialTabs.filter(tab => {
        const style = window.getComputedStyle(tab);
        return style.display !== 'none' && !tab.classList.contains('hidden');
    });

    if (!visibleTabs.length) {
        if (moreTabsContainer) {
            moreTabsContainer.classList.add('hidden');
        }
        return;
    }

    const navWidth = tabsNav.offsetWidth;
    let totalWidth = 0;
    let firstOverflowIndex = -1;

    let moreTabsWidth = 0;
    if (moreTabsContainer) {
        const wasMoreButtonHidden = moreTabsContainer.classList.contains('hidden');
        if (wasMoreButtonHidden) moreTabsContainer.classList.remove('hidden');
        moreTabsWidth = moreTabsContainer.offsetWidth;
        if (wasMoreButtonHidden) moreTabsContainer.classList.add('hidden');
    }

    for (let i = 0; i < visibleTabs.length; i++) {
        const tab = visibleTabs[i];
        const currentTabWidth = tab.offsetWidth;

        if (currentTabWidth === 0) {
            console.warn(`[updateVisibleTabs v8_FIXED] Tab ${tab.id || 'with no id'} has offsetWidth 0! Skipping.`);
            continue;
        }

        if (totalWidth + currentTabWidth + moreTabsWidth + LAYOUT_ERROR_MARGIN > navWidth) {
            firstOverflowIndex = i;
            break;
        }
        totalWidth += currentTabWidth;
    }

    if (firstOverflowIndex !== -1) {
        if (moreTabsContainer) {
            moreTabsContainer.classList.remove('hidden');
        }
        const dropdownFragment = document.createDocumentFragment();

        for (let i = firstOverflowIndex; i < visibleTabs.length; i++) {
            const tab = visibleTabs[i];
            tab.style.display = 'none';
            tab.classList.add('overflow-tab');

            const dropdownItem = document.createElement('a');
            dropdownItem.href = '#';
            dropdownItem.className = 'block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 overflow-dropdown-item';
            const icon = tab.querySelector('i');
            const text = tab.textContent.trim();
            dropdownItem.innerHTML = `${icon ? icon.outerHTML + ' ' : ''}${text}`;
            dropdownItem.dataset.tabId = tab.id.replace('Tab', '');
            dropdownItem.addEventListener('click', (e) => {
                e.preventDefault();
                if (typeof setActiveTab === 'function') {
                    setActiveTab(dropdownItem.dataset.tabId);
                }
                if (moreTabsDropdown) moreTabsDropdown.classList.add('hidden');
            });
            dropdownFragment.appendChild(dropdownItem);
        }
        moreTabsDropdown.appendChild(dropdownFragment);
    }
}


function setupTabsOverflow() {
    const tabsNav = document.querySelector('nav.flex.flex-wrap');
    if (!tabsNav) {
        console.warn("[setupTabsOverflow v15_FIXED] Setup skipped: tabsNav not found.");
        return;
    }

    const initKey = 'tabsOverflowInitialized_v15_FIXED';
    if (tabsNav.dataset[initKey] === 'true') {
        return;
    }

    console.log("[setupTabsOverflow v15_FIXED] Performing INITIAL setup of event listeners...");

    const moreTabsBtn = document.getElementById('moreTabsBtn');
    if (moreTabsBtn) {
        if (moreTabsBtn._clickHandler) {
            moreTabsBtn.removeEventListener('click', moreTabsBtn._clickHandler, true);
        }
        moreTabsBtn.addEventListener('click', handleMoreTabsBtnClick, true);
        moreTabsBtn._clickHandler = handleMoreTabsBtnClick;
    }

    if (typeof clickOutsideTabsHandler === 'function') {
        if (document._clickOutsideTabsHandler) {
            document.removeEventListener('click', document._clickOutsideTabsHandler, true);
        }
        document.addEventListener('click', clickOutsideTabsHandler, true);
        document._clickOutsideTabsHandler = clickOutsideTabsHandler;
    }

    if (window.ResizeObserver) {
        if (tabsNav._resizeObserverInstance) {
            tabsNav._resizeObserverInstance.disconnect();
        }
        const observer = new ResizeObserver(handleTabsResize);
        observer.observe(tabsNav);
        tabsNav._resizeObserverInstance = observer;
    } else {
        if (window._handleTabsResizeHandler) {
            window.removeEventListener('resize', window._handleTabsResizeHandler);
        }
        window.addEventListener('resize', handleTabsResize);
        window._handleTabsResizeHandler = handleTabsResize;
    }

    tabsNav.dataset[initKey] = 'true';
    console.log(`[setupTabsOverflow v15_FIXED] Initial setup complete. Flag ${initKey} set.`);
}


function handleMoreTabsBtnClick(e) {
    e.stopPropagation();
    e.preventDefault();
    const currentDropdown = document.getElementById('moreTabsDropdown');
    if (currentDropdown) {
        currentDropdown.classList.toggle('hidden');
    } else {
        console.error("[handleMoreTabsBtnClick v10.1 - FINAL] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ #moreTabsDropdown.");
    }
}


function clickOutsideTabsHandler(e) {
    const currentDropdown = document.getElementById('moreTabsDropdown');
    const currentMoreBtn = document.getElementById('moreTabsBtn');

    if (!currentDropdown || currentDropdown.classList.contains('hidden')) {
        return;
    }

    const isClickOnMoreBtnOrChild = currentMoreBtn && currentMoreBtn.contains(e.target);
    const isClickInsideDropdown = currentDropdown.contains(e.target);

    if (isClickOnMoreBtnOrChild) {
        console.log(`[DEBUG clickOutsideHandler v10.1 - FINAL] Click ON/INSIDE moreTabsBtn. No action taken by this handler. Dropdown state: ${currentDropdown.classList.contains('hidden') ? 'hidden' : 'visible'}. Target:`, e.target);
        return;
    }

    if (!isClickInsideDropdown) {
        console.log(`[DEBUG clickOutsideHandler v10.1 - FINAL] Hiding dropdown due to click OUTSIDE of dropdown and button. Target:`, e.target);
        currentDropdown.classList.add('hidden');
    } else {
        console.log(`[DEBUG clickOutsideHandler v10.1 - FINAL] Click INSIDE dropdown. Not hiding via this handler. Target:`, e.target);
    }
}


function handleTabsResize() {
    clearTimeout(tabsResizeTimeout);
    tabsResizeTimeout = setTimeout(() => {
        const currentDropdown = document.getElementById('moreTabsDropdown');
        if (currentDropdown && !currentDropdown.classList.contains('hidden')) {
            currentDropdown.classList.add('hidden');
        }
        if (typeof updateVisibleTabs === 'function') {
            updateVisibleTabs();
        } else {
            console.error("[handleTabsResize v13_FIXED] ERROR: updateVisibleTabs function is not defined!");
        }
    }, 250);
}


const CARD_CONTAINER_CLASSES = ['grid', 'gap-4'];
const LIST_CONTAINER_CLASSES = ['flex', 'flex-col'];
const CARD_ITEM_BASE_CLASSES = ['p-4', 'rounded-lg', 'shadow-sm', 'hover:shadow-md', 'bg-white', 'dark:bg-gray-700'];
const LIST_ITEM_BASE_CLASSES = ['p-3', 'border-b', 'border-gray-200', 'dark:border-gray-600', 'hover:bg-gray-50', 'dark:hover:bg-gray-700', 'flex', 'justify-between', 'items-center', 'bg-white', 'dark:bg-gray-700'];
const ALGO_BOOKMARK_CARD_CLASSES = ['cursor-pointer', 'items-start'];
const LINK_REGLAMENT_CARD_CLASSES = ['items-start'];
const LIST_HOVER_TRANSITION_CLASSES = ['transition-colors'];

const SECTION_GRID_COLS = {
    bookmarksContainer: ['grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3'],
    extLinksContainer: ['grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3'],
    linksContainer: ['grid-cols-1', 'md:grid-cols-2'],
    reglamentsContainer: ['grid-cols-1', 'md:grid-cols-2'],
    reglamentCategoryGrid: ['grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3'],
    programAlgorithms: ['grid-cols-1', 'md:grid-cols-2'],
    skziAlgorithms: ['grid-cols-1', 'md:grid-cols-2'],
    webRegAlgorithms: ['grid-cols-1', 'md:grid-cols-2'],
    lk1cAlgorithms: ['grid-cols-1', 'md:grid-cols-2'],
    favoritesContainer: ['grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3'],
    default: ['grid-cols-1', 'md:grid-cols-2']
};


const DEFAULT_UI_SETTINGS = {
    primaryColor: '#9333EA',
    fontSize: 90,
    borderRadius: 2,
    contentDensity: 3,
    themeMode: 'dark',
    mainLayout: 'horizontal',
    panelOrder: (typeof allPanelIdsForDefault !== 'undefined' && Array.isArray(allPanelIdsForDefault))
        ? [...allPanelIdsForDefault]
        : [],
    panelVisibility: (typeof allPanelIdsForDefault !== 'undefined' && Array.isArray(allPanelIdsForDefault))
        ? allPanelIdsForDefault.map(id => !(id === 'sedoTypes' || id === 'blacklistedClients'))
        : [],
    disableForcedBackupOnImport: false

};


const DEFAULT_CIB_LINKS = [
    {
        title: "–£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞",
        link: "e1cib/list/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫.–£—á–µ—Ç–Ω—ã–µ–ó–∞–ø–∏—Å–∏–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞",
        description: "–í—Å–µ –£–ó –≤ –±–∞–∑–µ",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –£–ó",
        link: "e1cib/list/–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ–†–µ–∫–≤–∏–∑–∏—Ç—ã–£—á–µ—Ç–Ω–æ–π–ó–∞–ø–∏—Å–∏",
        description: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–ù–∞–ª–æ–≥–æ–≤—ã–µ –æ—Ä–≥–∞–Ω—ã",
        link: "e1cib/list/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫.–ù–∞–ª–æ–≥–æ–≤—ã–µ–û—Ä–≥–∞–Ω—ã",
        description: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ù–û –≤ –±–∞–∑–µ",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–º –æ—Ä–≥–∞–Ω–µ",
        link: "e1cib/list/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫.–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏–í–ù–∞–ª–æ–≥–æ–≤–æ–º–û—Ä–≥–∞–Ω–µ",
        description: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ù–û —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –±–∞–∑–µ",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–û—Ä–≥–∞–Ω—ã –ü–§–†",
        link: "e1cib/list/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫.–û—Ä–≥–∞–Ω—ã–ü–§–†",
        description: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–æ–≤ –ü–§–† –≤ –±–∞–∑–µ",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–û—Ä–≥–∞–Ω—ã –§–°–ì–°",
        link: "e1cib/list/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫.–û—Ä–≥–∞–Ω—ã–§–°–ì–°",
        description: "–û—Ä–≥–∞–Ω—ã –†–æ—Å—Å—Ç–∞—Ç–∞ –≤ –±–∞–∑–µ",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–û—Ç–ø—Ä–∞–≤–∫–∏ –§–°–°",
        link: "e1cib/list/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫.–û—Ç–ø—Ä–∞–≤–∫–∏–§–°–°",
        description: "–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–æ–∫ –≤ –§–°–°",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π",
        link: "e1cib/list/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫.–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
        description: "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –±–∞–∑–µ",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞",
        link: "e1cib/list/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫.–§–∏–∑–∏—á–µ—Å–∫–∏–µ–õ–∏—Ü–∞",
        description: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–∑.–ª–∏—Ü –≤ –±–∞–∑–µ",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
        link: "e1cib/list/–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ–õ–∏—Ü–∞–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π",
        description: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–í–∏–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        link: "e1cib/list/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫.–í–∏–¥—ã–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö–î–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        description: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–¢–æ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",
        link: "e1cib/list/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫.–¢–æ–º–∞–•—Ä–∞–Ω–µ–Ω–∏—è–§–∞–π–ª–æ–≤",
        description: "–§—Ä–∞–Ω—á–æ–≤—Å–∫–æ–µ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–°–≤–æ–π—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
        link: "e1cib/list/–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–°–≤–æ–π—Å—Ç–≤–∞–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö–°–æ–æ–±—â–µ–Ω–∏–π",
        description: "",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã",
        link: "e1cib/list/–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã",
        description: "–û—Ä–≥–∞–Ω—ã –†–æ—Å—Å—Ç–∞—Ç–∞ –≤ –±–∞–∑–µ",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–ì—Ä—É–ø–ø–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤",
        link: "e1cib/app/–û–±—Ä–∞–±–æ—Ç–∫–∞.–ì—Ä—É–ø–ø–æ–≤–æ–µ–ò–∑–º–µ–Ω–µ–Ω–∏–µ–†–µ–∫–≤–∏–∑–∏—Ç–æ–≤",
        description: "–û—á–µ–Ω—å –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ—Ä–≥–∏",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        link: "e1cib/list/–î–æ–∫—É–º–µ–Ω—Ç.–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ–°–æ–æ–±—â–µ–Ω–∏–µ",
        description: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–≠–î–û –§–°–°",
        link: "e1cib/list/–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–í—Ö–æ–¥—è—â–∏–µ–°–æ–æ–±—â–µ–Ω–∏—è–°–≠–î–û–§–°–°",
        description: "–í—Å–µ –≤—Ö–æ–¥—è—â–∏–∏ –ø–æ –°–≠–î–û",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–î–∞—Ç–∞ –∑–∞–ø—Ä–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö",
        link: "e1cib/command/–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–î–∞—Ç—ã–ó–∞–ø—Ä–µ—Ç–∞–ò–∑–º–µ–Ω–µ–Ω–∏—è.–ö–æ–º–∞–Ω–¥–∞.–î–∞—Ç—ã–ó–∞–ø—Ä–µ—Ç–∞–ò–∑–º–µ–Ω–µ–Ω–∏—è–î–∞–Ω–Ω—ã—Ö",
        description: "–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞—Ä—Ç–µ –æ—Ä–≥–∏",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–ü–µ—Ä–∏–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ï–ù–°",
        link: "e1cib/list/–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–ü–µ—Ä–∏–æ–¥—ã–û–±–Ω–æ–≤–ª–µ–Ω–∏—è–î–∞–Ω–Ω—ã—Ö–ï–ù–°",
        description: "–ß–ò—Å—Ç–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ï–ù–°",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–î–∞–Ω–Ω—ã–µ –õ–ö –ï–ù–°",
        link: "e1cib/list/–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–î–∞–Ω–Ω—ã–µ–õ–∏—á–Ω–æ–≥–æ–ö–∞–±–∏–Ω–µ—Ç–∞–ï–ù–°",
        description: "–ß–∏—Å—Ç–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ï–ù–°",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–ñ—É—Ä–Ω–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏ –ï–ù–°",
        link: "e1cib/list/–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–ñ—É—Ä–Ω–∞–ª–ó–∞–≥—Ä—É–∑–∫–∏–ï–ù–°",
        description: "–ß–∏—Å—Ç–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å –ï–ù–°",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        link: "e1cib/app/–û–±—Ä–∞–±–æ—Ç–∫–∞.–ê–∫—Ç–∏–≤–Ω—ã–µ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        description: "–¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 1–°",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        link: "e1cib/list/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫.–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        description: "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏ –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è",
        link: "e1cib/app/–û–±—â–∞—è–§–æ—Ä–º–∞.–ù–∞—Å—Ç—Ä–æ–π–∫–∏–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π–ü–æ–¥–ø–∏—Å–∏–ò–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è",
        description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≠–ü —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ 1–°",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–ñ—É—Ä–Ω–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        link: "e1cib/app/–û–±—Ä–∞–±–æ—Ç–∫–∞.–ñ—É—Ä–Ω–∞–ª–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description: "–°–±–æ—Ä –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ 1–°",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–ñ—É—Ä–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –§–°–°",
        link: "e1cib/list/–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–ñ—É—Ä–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤–ö–°–µ—Ä–≤–µ—Ä–∞–º–§–°–°",
        description: "",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–ñ—É—Ä–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–æ–∫ –≤ –ö–û",
        link: "e1cib/list/–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–ñ—É—Ä–Ω–∞–ª–û—Ç–ø—Ä–∞–≤–æ–∫–í–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ–û—Ä–≥–∞–Ω—ã",
        description: "",
        dateAdded: new Date().toISOString()
    },
    {
        title: "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
        link: "e1cib/list/–î–æ–∫—É–º–µ–Ω—Ç.–ó–∞—è–≤–ª–µ–Ω–∏–µ–ê–±–æ–Ω–µ–Ω—Ç–∞–°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–°–≤—è–∑–∏",
        description: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π",
        dateAdded: new Date().toISOString()
    }
];




let currentSection = 'main';
let currentAlgorithm = null;
let editMode = false;
let viewPreferences = {};
let lightboxCloseButtonClickListener = null;
let lightboxOverlayClickListener = null;

const tabButtons = document.querySelectorAll('.tab-btn');
const tabContents = document.querySelectorAll('.tab-content');
const algorithmModal = document.getElementById('algorithmModal');
const editModal = document.getElementById('editModal');
const addModal = document.getElementById('addModal');
const closeModalBtn = document.getElementById('closeModalBtn');
const closeEditModalBtn = document.getElementById('closeEditModalBtn');
const closeAddModalBtn = document.getElementById('closeAddModalBtn');
const editAlgorithmBtn = document.getElementById('editAlgorithmBtn');
const deleteAlgorithmBtn = document.getElementById('deleteAlgorithmBtn');
const addStepBtn = document.getElementById('addStepBtn');
const saveAlgorithmBtn = document.getElementById('saveAlgorithmBtn');
saveAlgorithmBtn?.addEventListener('click', async (event) => {
    event.preventDefault();
    await saveAlgorithm();
});
const cancelEditBtn = document.getElementById('cancelEditBtn');
const editMainBtn = document.getElementById('editMainBtn');
const addNewStepBtn = document.getElementById('addNewStepBtn');
const saveNewAlgorithmBtn = document.getElementById('saveNewAlgorithmBtn');
const cancelAddBtn = document.getElementById('cancelAddBtn');
const addProgramAlgorithmBtn = document.getElementById('addProgramAlgorithmBtn');
const addSkziAlgorithmBtn = document.getElementById('addSkziAlgorithmBtn');
const addWebRegAlgorithmBtn = document.getElementById('addWebRegAlgorithmBtn');
const addLk1cAlgorithmBtn = document.getElementById('addLk1cAlgorithmBtn');


const addClickListeners = (listeners) => {
    listeners.forEach(([element, handler]) => {
        element?.addEventListener('click', handler);
    });
};

tabButtons.forEach(button => {
    button.addEventListener('click', () => setActiveTab(button.id.replace('Tab', '')));
});


closeModalBtn?.addEventListener('click', () => algorithmModal?.classList.add('hidden'));
closeEditModalBtn?.addEventListener('click', () => requestCloseModal(editModal));
closeAddModalBtn?.addEventListener('click', () => requestCloseModal(addModal));
cancelEditBtn?.addEventListener('click', () => requestCloseModal(editModal));
cancelAddBtn?.addEventListener('click', () => requestCloseModal(addModal));

editMainBtn?.addEventListener('click', () => editAlgorithm('main'));
addStepBtn?.addEventListener('click', addEditStep);
addNewStepBtn?.addEventListener('click', addNewStep);
saveNewAlgorithmBtn?.addEventListener('click', saveNewAlgorithm);
addProgramAlgorithmBtn?.addEventListener('click', () => showAddModal('program'));
addSkziAlgorithmBtn?.addEventListener('click', () => showAddModal('skzi'));
addLk1cAlgorithmBtn?.addEventListener('click', () => showAddModal('lk1c'));
addWebRegAlgorithmBtn?.addEventListener('click', () => showAddModal('webReg'));

editAlgorithmBtn?.addEventListener('click', async () => {
    const algorithmModal = document.getElementById('algorithmModal');
    const currentAlgorithmFromData = algorithmModal?.dataset.currentAlgorithmId;
    const currentSectionFromData = algorithmModal?.dataset.currentSection;

    if (!currentAlgorithmFromData || !currentSectionFromData) {
        console.error('[editAlgorithmBtn Click] Cannot edit: currentAlgorithmId –∏–ª–∏ currentSection –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞.');
        showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", "error");
        return;
    }
    console.log(`[editAlgorithmBtn Click] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ID=${currentAlgorithmFromData}, Section=${currentSectionFromData}`);

    if (algorithmModal && !algorithmModal.classList.contains('hidden')) {
        algorithmModal.classList.add('hidden');
        console.log(`[editAlgorithmBtn Click] –û–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π algorithmModal —Å–∫—Ä—ã—Ç–æ.`);
        document.body.classList.remove('modal-open');
        delete algorithmModal.dataset.currentAlgorithmId;
        delete algorithmModal.dataset.currentSection;
    } else {
        console.warn("[editAlgorithmBtn Click] –û–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π algorithmModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —Å–∫—Ä—ã—Ç–æ.");
    }

    try {
        if (typeof editAlgorithm === 'function') {
            await editAlgorithm(currentAlgorithmFromData, currentSectionFromData);
        } else {
            console.error("[editAlgorithmBtn Click] –§—É–Ω–∫—Ü–∏—è editAlgorithm –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            throw new Error("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
        }
        console.log(`[editAlgorithmBtn Click] –û–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ${currentAlgorithmFromData} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ.`);
    } catch (error) {
        console.error(`[editAlgorithmBtn Click] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ editAlgorithm –¥–ª—è ID=${currentAlgorithmFromData}:`, error);
        showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", "error");
    }
});


async function saveNewAlgorithm() {
    const addModal = document.getElementById('addModal');
    const section = addModal?.dataset.section;
    const newAlgorithmTitleInput = document.getElementById('newAlgorithmTitle');
    const newAlgorithmDescInput = document.getElementById('newAlgorithmDesc');
    const newStepsContainer = document.getElementById('newSteps');
    const saveButton = document.getElementById('saveNewAlgorithmBtn');

    if (!addModal || !section || !newAlgorithmTitleInput || !newAlgorithmDescInput || !newStepsContainer || !saveButton) {
        console.error("saveNewAlgorithm: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã DOM.");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.", "error");
        return;
    }

    console.log(`[Save New Algorithm] Start. Section: ${section}`);

    const finalTitle = newAlgorithmTitleInput.value.trim();
    const newDescription = newAlgorithmDescInput.value.trim();

    if (!finalTitle) {
        showNotification("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", "warning");
        newAlgorithmTitleInput.focus();
        return;
    }

    saveButton.disabled = true;
    saveButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';

    const { steps: newStepsBase, screenshotOps, isValid } = extractStepsDataFromEditForm(newStepsContainer, false);

    if (!isValid || newStepsBase.length === 0) {
        showNotification("–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ–ø—É—Å—Ç–æ–π —à–∞–≥.", "warning");
        saveButton.disabled = false;
        saveButton.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        return;
    }

    console.log(`[Save New Algorithm] –ò–∑–≤–ª–µ—á–µ–Ω–æ: ${newStepsBase.length} —à–∞–≥–æ–≤, ${screenshotOps.length} –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.`);

    let transaction;
    let saveSuccessful = false;
    let newAlgorithmData = null;
    const newAlgorithmId = `${section}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
    let finalSteps = JSON.parse(JSON.stringify(newStepsBase));

    try {
        if (!db) throw new Error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
        transaction = db.transaction(['algorithms', 'screenshots'], 'readwrite');
        const screenshotsStore = transaction.objectStore('screenshots');
        const algorithmsStore = transaction.objectStore('algorithms');
        console.log("[Save New Algorithm TX] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞.");

        const addScreenshotPromises = [];
        const newScreenshotIdsMap = {};

        screenshotOps.filter(op => op.action === 'add').forEach(op => {
            const { stepIndex, blob } = op;
            if (!(blob instanceof Blob) || typeof stepIndex !== 'number' || stepIndex < 0 || !finalSteps[stepIndex]) {
                console.warn(`[Save New Algorithm TX] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:`, op);
                return;
            }

            addScreenshotPromises.push(new Promise((resolve, reject) => {
                const tempName = `${finalTitle || '–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º'}, –∏–∑–æ–±—Ä. ${Date.now() + Math.random()}`;
                const record = {
                    blob,
                    parentId: newAlgorithmId,
                    parentType: 'algorithm',
                    stepIndex,
                    name: tempName,
                    uploadedAt: new Date().toISOString()
                };
                const request = screenshotsStore.add(record);
                request.onsuccess = e => {
                    const newId = e.target.result;
                    console.log(`[Save New Algorithm TX] –î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–æ–≤—ã–π ID: ${newId} –¥–ª—è —à–∞–≥–∞ ${stepIndex}`);
                    if (!newScreenshotIdsMap[stepIndex]) newScreenshotIdsMap[stepIndex] = [];
                    newScreenshotIdsMap[stepIndex].push(newId);
                    resolve();
                };
                request.onerror = e => {
                    console.error(`[Save New Algorithm TX] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è —à–∞–≥–∞ ${stepIndex}:`, e.target.error);
                    reject(e.target.error || new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞'));
                };
            }));
        });

        if (addScreenshotPromises.length > 0) {
            await Promise.all(addScreenshotPromises);
            console.log("[Save New Algorithm TX] –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.");
        }

        finalSteps = finalSteps.map((step, index) => {
            const newlyAddedIds = newScreenshotIdsMap[index] || [];
            if (newlyAddedIds.length > 0) {
                step.screenshotIds = [...newlyAddedIds];
            } else {
                delete step.screenshotIds;
            }
            delete step._tempScreenshotBlobs;
            delete step._screenshotsToDelete;
            delete step.existingScreenshotIds;
            delete step.tempScreenshotsCount;
            delete step.deletedScreenshotIds;
            return step;
        });
        console.log("[Save New Algorithm TX] –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Å ID —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.");

        const timestamp = new Date().toISOString();
        newAlgorithmData = {
            id: newAlgorithmId,
            title: finalTitle,
            description: newDescription,
            steps: finalSteps,
            section: section,
            dateAdded: timestamp,
            dateUpdated: timestamp
        };

        if (!algorithms[section]) {
            algorithms[section] = [];
        }
        algorithms[section].push(newAlgorithmData);
        console.log(`[Save New Algorithm TX] –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º ${newAlgorithmId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç—å [${section}].`);

        const algorithmContainerToSave = { section: 'all', data: algorithms };
        console.log("[Save New Algorithm TX] –ó–∞–ø—Ä–æ—Å put –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'algorithms'...");
        const putAlgoReq = algorithmsStore.put(algorithmContainerToSave);

        await new Promise((resolve, reject) => {
            putAlgoReq.onerror = (e) => reject(e.target.error || new Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ algorithms"));
            transaction.oncomplete = () => {
                console.log("[Save New Algorithm TX] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (oncomplete).");
                saveSuccessful = true;
                resolve();
            };
            transaction.onerror = (e) => {
                console.error("[Save New Algorithm TX] –û–®–ò–ë–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (onerror):", e.target.error);
                saveSuccessful = false;
                reject(e.target.error || new Error("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"));
            };
            transaction.onabort = (e) => {
                console.warn("[Save New Algorithm TX] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ü–†–ï–†–í–ê–ù–ê (onabort):", e.target.error);
                saveSuccessful = false;
                reject(e.target.error || new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞"));
            };
        });

    } catch (error) {
        console.error(`[Save New Algorithm] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ —Å–µ–∫—Ü–∏–∏ ${section}:`, error);
        if (transaction && transaction.readyState !== 'done' && transaction.abort) {
            try { transaction.abort(); console.log("[Save New Algorithm] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ catch."); }
            catch (e) { console.error("[Save New Algorithm] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ catch:", e); }
        }
        saveSuccessful = false;
        if (algorithms[section] && newAlgorithmData) {
            const indexToRemove = algorithms[section].findIndex(a => a.id === newAlgorithmData.id);
            if (indexToRemove !== -1) {
                algorithms[section].splice(indexToRemove, 1);
                console.warn(`[Save New Algorithm] –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º ${newAlgorithmData.id} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.`);
            }
        }
        showNotification(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: ${error.message || error}`, "error");
    } finally {
        if (saveButton) {
            saveButton.disabled = false;
            saveButton.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        }
    }

    if (saveSuccessful && newAlgorithmData) {
        console.log(`[Save New Algorithm] –ê–ª–≥–æ—Ä–∏—Ç–º ${newAlgorithmData.id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
        if (typeof updateSearchIndex === 'function') {
            updateSearchIndex('algorithms', newAlgorithmData.id, newAlgorithmData, 'add', null)
                .then(() => console.log(`[Save New Algorithm] –ò–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ${newAlgorithmData.id}.`))
                .catch(indexError => console.error(`[Save New Algorithm] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ${newAlgorithmData.id}:`, indexError));
        } else {
            console.warn(`[Save New Algorithm] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞).`);
        }

        if (typeof renderAlgorithmCards === 'function') {
            renderAlgorithmCards(section);
        } else {
            console.warn("[Save New Algorithm] –§—É–Ω–∫—Ü–∏—è renderAlgorithmCards –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, UI –º–æ–∂–µ—Ç –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è.");
        }

        showNotification("–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.");
        initialAddState = null;
        addModal.classList.add('hidden');
        newAlgorithmTitleInput.value = '';
        newAlgorithmDescInput.value = '';
        newStepsContainer.innerHTML = '';
        const firstStepDiv = newStepsContainer.querySelector('.edit-step');
        if (firstStepDiv) {
            const thumbsContainer = firstStepDiv.querySelector('#screenshotThumbnailsContainer');
            if (thumbsContainer) {
                clearTemporaryThumbnailsFromContainer(thumbsContainer);
            }
            delete firstStepDiv._tempScreenshotBlobs;
            delete firstStepDiv.dataset.screenshotsToDelete;
        }

    } else if (!newAlgorithmData && saveSuccessful) {
        console.error("[Save New Algorithm] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–æ newAlgorithmData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –≠—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ.");
    } else {
        console.error(`[Save New Algorithm] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ —Å–µ–∫—Ü–∏–∏ ${section} –ù–ï –£–î–ê–õ–û–°–¨.`);
    }
}


function initUI() {
    setActiveTab('main');
}


async function setActiveTab(tabId, warningJustAccepted = false) {
    const targetTabId = tabId + 'Tab';
    const targetContentId = tabId + 'Content';

    const allTabButtons = document.querySelectorAll('.tab-btn');
    const allTabContents = document.querySelectorAll('.tab-content');
    const showFavoritesHeaderButton = document.getElementById('showFavoritesHeaderBtn');

    const FADE_DURATION = 150;

    console.log(`[setActiveTab v.Corrected] –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏: ${tabId}`);

    if (tabId === 'blacklistedClients' && userPreferences.showBlacklistUsageWarning && !warningJustAccepted) {
        if (typeof showBlacklistWarning === 'function') {
            showBlacklistWarning();
        } else {
            console.error("–§—É–Ω–∫—Ü–∏—è showBlacklistWarning –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        }
        return;
    }

    if (showFavoritesHeaderButton) {
        showFavoritesHeaderButton.classList.toggle('text-primary', tabId === 'favorites');
    }

    allTabButtons.forEach(button => {
        const isActive = (button.id === targetTabId) && (tabId !== 'favorites');
        if (isActive) {
            button.classList.add('tab-active');
            button.classList.remove('text-gray-500', 'dark:text-gray-400', 'border-transparent');
        } else {
            button.classList.remove('tab-active');
            button.classList.add('text-gray-500', 'dark:text-gray-400', 'border-transparent');
        }
    });

    if (currentSection === tabId && !warningJustAccepted) {
        console.log(`[setActiveTab v.Corrected] –í–∫–ª–∞–¥–∫–∞ ${tabId} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –í—ã—Ö–æ–¥.`);
        return;
    }

    const previousSection = currentSection;
    currentSection = tabId;
    localStorage.setItem('lastActiveTabCopilot1CO', tabId);

    const targetContent = document.getElementById(targetContentId);
    let currentActiveContent = null;

    allTabContents.forEach(content => {
        if (!content.classList.contains('hidden')) {
            currentActiveContent = content;
        }
    });

    if (currentActiveContent && currentActiveContent !== targetContent) {
        currentActiveContent.classList.add('is-hiding');

        setTimeout(() => {
            currentActiveContent.classList.add('hidden');
            currentActiveContent.classList.remove('is-hiding');

            if (targetContent) {
                targetContent.classList.add('is-hiding');
                targetContent.classList.remove('hidden');

                requestAnimationFrame(() => {
                    targetContent.classList.remove('is-hiding');
                });
            }
        }, FADE_DURATION);
    } else if (targetContent) {
        targetContent.classList.add('is-hiding');
        targetContent.classList.remove('hidden');
        requestAnimationFrame(() => {
            targetContent.classList.remove('is-hiding');
        });
    }

    if (targetContent && tabId === 'favorites') {
        if (typeof renderFavoritesPage === 'function') {
            await renderFavoritesPage();
        } else {
            console.error("setActiveTab: –§—É–Ω–∫—Ü–∏—è renderFavoritesPage –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        }
    }

    if (typeof updateVisibleTabs === 'function') {
        requestAnimationFrame(updateVisibleTabs);
    }

    console.log(`[setActiveTab v.Corrected] –í–∫–ª–∞–¥–∫–∞ ${tabId} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π.`);
}


function getStepContentAsText(step) {
    let textParts = [];

    if (step.description) {
        let descriptionText = '';
        if (typeof step.description === 'string') {
            descriptionText = step.description;
        } else if (typeof step.description === 'object' && step.description.type === 'list') {
            let descListText = step.description.intro || '';
            if (Array.isArray(step.description.items)) {
                step.description.items.forEach(item => {
                    descListText += (descListText ? "\n" : "") + "- " + (typeof item === 'string' ? item : JSON.stringify(item));
                });
            }
            descriptionText = descListText;
        } else if (typeof step.description === 'object') {
            try {
                descriptionText = JSON.stringify(step.description);
            } catch (e) {
                descriptionText = "[–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç]";
            }
        }
        if (descriptionText.trim()) {
            textParts.push(descriptionText.trim());
        }
    }

    if (step.example) {
        let examplePrefix = "–ü—Ä–∏–º–µ—Ä:";
        let exampleContent = "";
        if (typeof step.example === 'string') {
            exampleContent = step.example;
        } else if (typeof step.example === 'object' && step.example.type === 'list') {
            if (step.example.intro) {
                exampleContent = step.example.intro.trim();
            }
            if (Array.isArray(step.example.items)) {
                step.example.items.forEach(item => {
                    const itemText = (typeof item === 'string' ? item : JSON.stringify(item));
                    exampleContent += (exampleContent ? "\n" : "") + "- " + itemText;
                });
            }
            if (step.example.intro) {
                examplePrefix = "";
            }

        } else if (typeof step.example === 'object') {
            try {
                examplePrefix = "–ü—Ä–∏–º–µ—Ä (–¥–∞–Ω–Ω—ã–µ):";
                exampleContent = JSON.stringify(step.example, null, 2);
            } catch (e) {
                exampleContent = "[–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –≤ —Ç–µ–∫—Å—Ç]";
            }
        }

        if (exampleContent.trim()) {
            if (examplePrefix) {
                textParts.push(examplePrefix + "\n" + exampleContent.trim());
            } else {
                textParts.push(exampleContent.trim());
            }
        }
    }

    if (textParts.length > 1) {
        return textParts.join("\n\n").trim();
    } else if (textParts.length === 1) {
        return textParts[0].trim();
    } else {
        return "";
    }
}


async function renderAlgorithmCards(section) {
    const sectionAlgorithms = algorithms?.[section];
    const containerId = section + 'Algorithms';
    const container = document.getElementById(containerId);

    if (!container) {
        console.error(`[renderAlgorithmCards v8.1 - Capture Fix] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #${containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
    }
    container.innerHTML = '';

    if (!sectionAlgorithms || !Array.isArray(sectionAlgorithms) || sectionAlgorithms.length === 0) {
        const sectionName = getSectionName(section) || `–†–∞–∑–¥–µ–ª ${section}`;
        container.innerHTML = `<p class="text-gray-500 dark:text-gray-400 text-center col-span-full">–í —Ä–∞–∑–¥–µ–ª–µ "${sectionName}" –ø–æ–∫–∞ –Ω–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.</p>`;
        if (typeof applyCurrentView === 'function') applyCurrentView(containerId);
        return;
    }

    const fragment = document.createDocumentFragment();
    const safeEscapeHtml = typeof escapeHtml === 'function' ? escapeHtml : (text) => text;

    for (const algorithm of sectionAlgorithms) {
        if (!algorithm || typeof algorithm !== 'object' || !algorithm.id) {
            console.warn(`[renderAlgorithmCards v8.1] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ —Å–µ–∫—Ü–∏–∏ ${section}:`, algorithm);
            continue;
        }

        const card = document.createElement('div');
        card.className = 'algorithm-card js-algorithm-card-style-target view-item transition cursor-pointer h-full flex flex-col bg-white dark:bg-gray-700 shadow-sm hover:shadow-md rounded-lg p-4';
        card.dataset.id = algorithm.id;

        const titleText = algorithm.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';

        let descriptionText = algorithm.description;
        if (!descriptionText && algorithm.steps && algorithm.steps.length > 0) {
            descriptionText = algorithm.steps[0].description || algorithm.steps[0].title || '';
        }

        const descriptionHTML = descriptionText
            ? `<p class="text-gray-600 dark:text-gray-400 text-sm mt-1 line-clamp-2 flex-grow">${safeEscapeHtml(descriptionText)}</p>`
            : '';

        const isFav = isFavorite('algorithm', String(algorithm.id));
        const favButtonHTML = getFavoriteButtonHTML(algorithm.id, 'algorithm', section, titleText, descriptionText || '', isFav);

        card.innerHTML = `
            <div class="flex justify-between items-start mb-2">
                <h3 class="font-bold text-gray-900 dark:text-gray-100 truncate flex-grow pr-2" title="${safeEscapeHtml(titleText)}">${safeEscapeHtml(titleText)}</h3>
                <div class="flex-shrink-0">${favButtonHTML}</div>
            </div>
            ${descriptionHTML}
        `;

        card.addEventListener('click', (event) => {
            if (event.target.closest('.toggle-favorite-btn')) {
                return;
            }
            if (typeof showAlgorithmDetail === 'function') {
                showAlgorithmDetail(algorithm, section);
            } else {
                console.error("[renderAlgorithmCards v8.1] –§—É–Ω–∫—Ü–∏—è showAlgorithmDetail –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
            }
        });
        fragment.appendChild(card);
    }

    container.appendChild(fragment);

    if (typeof applyCurrentView === 'function') {
        applyCurrentView(containerId);
    }
    console.log(`[renderAlgorithmCards v8.1] –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è —Å–µ–∫—Ü–∏–∏ ${section} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' –∏ —è–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª–∏–∫–∞.`);
}


function handleNoInnLinkClick(event) {
    event.preventDefault();
    if (typeof showNoInnModal === 'function') {
        showNoInnModal();
    } else {
        console.error("–§—É–Ω–∫—Ü–∏—è showNoInnModal –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
        if (typeof showNotification === 'function') {
            showNotification("–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error");
        }
    }
}


async function renderMainAlgorithm() {
    console.log('[renderMainAlgorithm v9 - Favorites Removed for Main] –í—ã–∑–≤–∞–Ω–∞.');
    const mainAlgorithmContainer = document.getElementById('mainAlgorithm');
    if (!mainAlgorithmContainer) {
        console.error("[renderMainAlgorithm v9] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #mainAlgorithm –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    mainAlgorithmContainer.innerHTML = '';

    if (!algorithms || typeof algorithms !== 'object' || !algorithms.main || typeof algorithms.main !== 'object' || !Array.isArray(algorithms.main.steps)) {
        console.error("[renderMainAlgorithm v9] –î–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (algorithms.main.steps) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã:", algorithms?.main);
        const errorP = document.createElement('p');
        errorP.className = 'text-red-500 dark:text-red-400 p-4 text-center font-medium';
        errorP.textContent = '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–≥–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.';
        mainAlgorithmContainer.appendChild(errorP);
        const mainTitleElement = document.querySelector('#mainContent > div > div:nth-child(1) h2');
        if (mainTitleElement) mainTitleElement.textContent = "–ì–ª–∞–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã";
        return;
    }

    const mainSteps = algorithms.main.steps;

    if (mainSteps.length === 0) {
        const emptyP = document.createElement('p');
        emptyP.className = 'text-gray-500 dark:text-gray-400 p-4 text-center';
        emptyP.textContent = '–í –≥–ª–∞–≤–Ω–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–≥–æ–≤.';
        mainAlgorithmContainer.appendChild(emptyP);
        const mainTitleElement = document.querySelector('#mainContent > div > div:nth-child(1) h2');
        if (mainTitleElement) {
            mainTitleElement.textContent = algorithms.main.title || DEFAULT_MAIN_ALGORITHM.title;
        }
        return;
    }

    const fragment = document.createDocumentFragment();
    mainSteps.forEach((step, index) => {
        if (!step || typeof step !== 'object') {
            console.warn("[renderMainAlgorithm v9] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —à–∞–≥–∞:", step);
            const errorDiv = document.createElement('div');
            errorDiv.className = 'algorithm-step bg-red-50 dark:bg-red-900/30 border-l-4 border-red-500 p-3 mb-3 rounded-lg shadow-sm text-red-700 dark:text-red-300';
            errorDiv.textContent = `–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–≥–∞ ${index + 1}.`;
            fragment.appendChild(errorDiv);
            return;
        }

        const stepDiv = document.createElement('div');
        stepDiv.className = 'algorithm-step bg-white dark:bg-gray-700 p-content-sm rounded-lg shadow-sm mb-3';


        if (step.isCopyable) {
            stepDiv.classList.add('copyable-step-active');
            stepDiv.title = "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–≥–∞";
            stepDiv.style.cursor = 'pointer';
        } else {
            stepDiv.classList.remove('copyable-step-active');
            stepDiv.title = "";
            stepDiv.style.cursor = 'default';
        }

        stepDiv.addEventListener('click', (e) => {
            if (e.target.tagName === 'A' || e.target.closest('A')) return;
            const currentStepData = algorithms.main.steps[index];
            if (currentStepData && currentStepData.isCopyable) {
                const textToCopy = getStepContentAsText(currentStepData);
                copyToClipboard(textToCopy, '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–≥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!');
            }
        });

        if (step.additionalInfoText && step.additionalInfoShowTop) {
            const additionalInfoTopDiv = document.createElement('div');
            additionalInfoTopDiv.className = 'additional-info-top mb-2 p-2 border-l-4 border-blue-400 bg-blue-50 dark:bg-blue-900/30 text-sm text-gray-700 dark:text-gray-300 rounded break-words';
            additionalInfoTopDiv.innerHTML = typeof linkify === 'function' ? linkify(step.additionalInfoText) : escapeHtml(step.additionalInfoText);
            stepDiv.appendChild(additionalInfoTopDiv);
        }

        const titleH3 = document.createElement('h3');
        titleH3.className = 'font-bold text-base mb-1 text-gray-900 dark:text-gray-100';
        titleH3.textContent = step.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';
        stepDiv.appendChild(titleH3);

        const descriptionP = document.createElement('p');
        descriptionP.className = 'text-sm text-gray-700 dark:text-gray-300 mt-1 break-words';
        descriptionP.innerHTML = typeof linkify === 'function' ? linkify(step.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è') : escapeHtml(step.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è');
        stepDiv.appendChild(descriptionP);

        if (step.example) {
            const exampleContainer = document.createElement('div');
            exampleContainer.className = 'example-container mt-2 text-sm text-gray-600 dark:text-gray-400 break-words';
            const exampleLabel = document.createElement('strong');
            exampleLabel.className = 'block mb-1';
            exampleContainer.appendChild(exampleLabel);

            if (typeof step.example === 'object' && step.example.type === 'list' && Array.isArray(step.example.items)) {
                exampleLabel.textContent = step.example.intro ? '' : '–ü—Ä–∏–º–µ—Ä (—Å–ø–∏—Å–æ–∫):';
                if (step.example.intro) {
                    const introP = document.createElement('p');
                    introP.className = 'italic mb-1';
                    introP.innerHTML = typeof linkify === 'function' ? linkify(step.example.intro) : escapeHtml(step.example.intro);
                    exampleContainer.appendChild(introP);
                }
                const ul = document.createElement('ul');
                ul.className = 'list-disc list-inside pl-5 space-y-0.5';
                step.example.items.forEach(item => {
                    const li = document.createElement('li');
                    li.innerHTML = typeof linkify === 'function' ? linkify(String(item)) : escapeHtml(String(item));
                    ul.appendChild(li);
                });
                exampleContainer.appendChild(ul);
            } else if (typeof step.example === 'string') {
                exampleLabel.textContent = '–ü—Ä–∏–º–µ—Ä:';
                const exampleP = document.createElement('p');
                exampleP.innerHTML = typeof linkify === 'function' ? linkify(step.example) : escapeHtml(step.example);
                exampleContainer.appendChild(exampleP);
            } else {
                exampleLabel.textContent = '–ü—Ä–∏–º–µ—Ä (–¥–∞–Ω–Ω—ã–µ):';
                try {
                    const pre = document.createElement('pre');
                    pre.className = 'text-xs bg-gray-200 dark:bg-gray-600 p-2 rounded mt-1 overflow-x-auto font-mono whitespace-pre-wrap';
                    const code = document.createElement('code');
                    code.textContent = JSON.stringify(step.example, null, 2);
                    pre.appendChild(code);
                    exampleContainer.appendChild(pre);
                } catch (e) {
                    const errorP = document.createElement('p');
                    errorP.className = 'text-xs text-red-500 mt-1';
                    errorP.textContent = '[–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–º–µ—Ä–∞]';
                    exampleContainer.appendChild(errorP);
                }
            }
            stepDiv.appendChild(exampleContainer);
        }

        if (step.showNoInnHelp === true) {
            const innP = document.createElement('p');
            innP.className = 'text-sm text-gray-500 dark:text-gray-400 mt-3';
            const innLink = document.createElement('a');
            innLink.href = '#';
            innLink.id = `noInnLink_main_${index}`;
            innLink.className = 'text-primary hover:underline';
            innLink.textContent = '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–∑–≤–∞—Ç—å –ò–ù–ù?';

            if (innLink._clickHandler) innLink.removeEventListener('click', innLink._clickHandler);
            innLink.addEventListener('click', handleNoInnLinkClick);
            innLink._clickHandler = handleNoInnLinkClick;

            innP.appendChild(innLink);
            stepDiv.appendChild(innP);
        }

        if (step.additionalInfoText && step.additionalInfoShowBottom) {
            const additionalInfoBottomDiv = document.createElement('div');
            additionalInfoBottomDiv.className = 'additional-info-bottom mt-3 p-2 border-t border-gray-200 dark:border-gray-600 pt-3 text-sm text-gray-700 dark:text-gray-300 rounded bg-gray-50 dark:bg-gray-700/50 break-words';
            additionalInfoBottomDiv.innerHTML = typeof linkify === 'function' ? linkify(step.additionalInfoText) : escapeHtml(step.additionalInfoText);
            stepDiv.appendChild(additionalInfoBottomDiv);
        }
        fragment.appendChild(stepDiv);
    });

    mainAlgorithmContainer.appendChild(fragment);
    const mainTitleElement = document.querySelector('#mainContent > div > div:nth-child(1) h2');
    if (mainTitleElement) {
        mainTitleElement.textContent = algorithms.main.title || DEFAULT_MAIN_ALGORITHM.title;
    }
    console.log(`[renderMainAlgorithm v9] –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ ${mainSteps.length} —à–∞–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–Ω–æ–ø–∫–∞ "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–¥–∞–ª–µ–Ω–∞.`);
}


async function getAllFromIndex(storeName, indexName, indexValue) {
    if (!db) {
        console.error(`getAllFromIndex: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (db) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! Store: ${storeName}, Index: ${indexName}`);
        return Promise.reject(new Error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è getAllFromIndex"));
    }

    if (!storeName || !indexName || indexValue === undefined) {
        const errorMsg = `getAllFromIndex: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: storeName=${storeName}, indexName=${indexName}, indexValue=${indexValue}`;
        console.error(errorMsg);
        return Promise.reject(new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è getAllFromIndex"));
    }

    return new Promise((resolve, reject) => {
        try {
            if (!db.objectStoreNames.contains(storeName)) {
                const errorMsg = `getAllFromIndex: –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—ä–µ–∫—Ç–æ–≤ '${storeName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${Array.from(db.objectStoreNames).join(', ')}`;
                console.error(errorMsg);
                return reject(new Error(errorMsg));
            }

            const transaction = db.transaction(storeName, "readonly");
            const store = transaction.objectStore(storeName);

            if (!store.indexNames.contains(indexName)) {
                const errorMsg = `–ò–Ω–¥–µ–∫—Å '${indexName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ '${storeName}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: ${Array.from(store.indexNames).join(', ')}`;
                console.error(`getAllFromIndex: ${errorMsg}`);
                return reject(new Error(errorMsg));
            }

            console.log(`getAllFromIndex: –ò–Ω–¥–µ–∫—Å '${indexName}' –Ω–∞–π–¥–µ–Ω –≤ '${storeName}'. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ:`, indexValue, `(–¢–∏–ø: ${typeof indexValue})`);

            const index = store.index(indexName);
            const request = index.getAll(indexValue);

            request.onsuccess = e => {
                const result = e.target.result;
                const resultLength = result?.length ?? 0;
                console.log(`getAllFromIndex: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${storeName}/${indexName} –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é ${String(indexValue)}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${resultLength}.`);
                if (resultLength === 0) {
                    console.warn(`getAllFromIndex: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∑–∞–ø–∏—Å–∏ —Å ${indexName}=${String(indexValue)} –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ${storeName}.`);
                }
                resolve(result || []);
            };
            request.onerror = e => {
                const errorMsg = `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ '${indexName}' –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é '${String(indexValue)}' –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ '${storeName}'`;
                console.error(`${errorMsg}:`, e.target.error);
                reject(e.target.error || new Error(errorMsg));
            };

            transaction.onerror = e => {
                const errorMsg = `–û—à–∏–±–∫–∞ readonly —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ${storeName}/${indexName} –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é '${String(indexValue)}'`;
                console.error(`${errorMsg}:`, e.target.error);
            };
            transaction.onabort = e => {
                const errorMsg = `Readonly —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ${storeName}/${indexName} –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é '${String(indexValue)}'`;
                console.warn(`${errorMsg}:`, e.target.error);
            };

        } catch (error) {
            const errorMsg = `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–¥–µ–∫—Å—É '${indexName}' –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ '${storeName}'`;
            console.error(`${errorMsg}:`, error);
            reject(error);
        }
    });
}


async function showScreenshotViewerModal(screenshots, algorithmId, algorithmTitle) {
    const modalId = 'screenshotViewerModal';
    let modal = document.getElementById(modalId);
    let isNewModal = false;
    let modalState = {};

    const cleanupModalState = (state) => {
        console.log(`[Cleanup for ${modalId}] Cleaning up state and listeners.`);

        if (state.gridBtnClickHandler) {
            state.gridBtn?.removeEventListener('click', state.gridBtnClickHandler);
        }
        if (state.listBtnClickHandler) {
            state.listBtn?.removeEventListener('click', state.listBtnClickHandler);
        }
        if (state.closeButtonXClickHandler) {
            state.closeButtonX?.removeEventListener('click', state.closeButtonXClickHandler);
        }
        if (state.closeButtonCancelClickHandler) {
            state.closeButtonCancel?.removeEventListener('click', state.closeButtonCancelClickHandler);
        }
        if (state.overlayClickHandler) {
            state.overlayElement?.removeEventListener('click', state.overlayClickHandler);
        }

        const images = state.contentArea?.querySelectorAll('img[data-object-url]');
        images?.forEach(img => {
            if (img.dataset.objectUrl) {
                try { URL.revokeObjectURL(img.dataset.objectUrl); } catch (revokeError) { console.warn(`Error revoking URL ${img.dataset.objectUrl}:`, revokeError); }
                delete img.dataset.objectUrl;
            }
        });
        Object.keys(state).forEach(key => delete state[key]);
    };

    const closeModalFunction = () => {
        const currentModal = document.getElementById(modalId);
        if (currentModal && !currentModal.classList.contains('hidden')) {
            currentModal.classList.add('hidden');

            if (getVisibleModals().length === 0) {
                document.body.classList.remove('overflow-hidden');
            }

            const state = currentModal._modalState || {};
            cleanupModalState(state);
            delete currentModal._modalState;

            const contentAreaForClearOnClose = currentModal.querySelector('#screenshotContentArea');
            if (contentAreaForClearOnClose) {
                contentAreaForClearOnClose.innerHTML = '';
            }
            removeEscapeHandler(currentModal);
        }
    };

    if (modal && modal._modalState) {
        cleanupModalState(modal._modalState);
        const contentAreaForClear = modal.querySelector('#screenshotContentArea');
        if (contentAreaForClear) contentAreaForClear.innerHTML = '';
    }

    if (!modal) {
        isNewModal = true;
        modal = document.createElement('div');
        modal.id = modalId;
        modal.className = 'fixed inset-0 bg-black bg-opacity-75 hidden z-[80] p-4 flex items-center justify-center';
        modal.innerHTML = `
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] flex flex-col">
                <div class="flex-shrink-0 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="flex justify-between items-center">
                        <h2 id="screenshotViewerTitle" class="text-xl font-bold text-gray-900 dark:text-gray-100 truncate pr-4">–°–∫—Ä–∏–Ω—à–æ—Ç—ã</h2>
                        <div class="flex items-center flex-shrink-0">
                             <div class="mr-4 hidden sm:inline-flex rounded-md shadow-sm" role="group">
                                 <button type="button" id="screenshotViewToggleGrid" class="px-3 py-1.5 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-l-lg hover:bg-gray-100 hover:text-primary focus:z-10 focus:ring-2 focus:ring-primary focus:text-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-primary dark:focus:text-white" title="–í–∏–¥ —Å–µ—Ç–∫–æ–π">
                                     <i class="fas fa-th-large"></i>
                                 </button>
                                 <button type="button" id="screenshotViewToggleList" class="px-3 py-1.5 text-sm font-medium text-gray-900 bg-white border-t border-b border-r border-gray-200 rounded-r-lg hover:bg-gray-100 hover:text-primary focus:z-10 focus:ring-2 focus:ring-primary focus:text-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-primary dark:focus:text-white" title="–í–∏–¥ —Å–ø–∏—Å–∫–æ–º">
                                     <i class="fas fa-list"></i>
                                 </button>
                             </div>
                            <button type="button" id="screenshotViewerCloseXBtn" class="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="–ó–∞–∫—Ä—ã—Ç—å (Esc)">
                                <i class="fas fa-times text-xl"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div id="screenshotContentArea" class="flex-1 overflow-y-auto bg-gray-50 dark:bg-gray-700">
                    <p class="text-center text-gray-500 dark:text-gray-400 p-6">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...</p>
                </div>
                <div class="flex-shrink-0 px-6 py-4 bg-gray-100 dark:bg-gray-700 border-t border-gray-200 dark:border-gray-600 flex justify-end">
                    <button type="button" class="cancel-modal px-4 py-2 bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-200 rounded-md transition text-sm font-medium">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>`;
        document.body.appendChild(modal);
    }

    modalState = {};
    modal._modalState = modalState;
    modalState.closeModalFunction = closeModalFunction;

    modalState.titleEl = modal.querySelector('#screenshotViewerTitle');
    modalState.contentArea = modal.querySelector('#screenshotContentArea');
    modalState.gridBtn = modal.querySelector('#screenshotViewToggleGrid');
    modalState.listBtn = modal.querySelector('#screenshotViewToggleList');
    modalState.closeButtonX = modal.querySelector('#screenshotViewerCloseXBtn');
    modalState.closeButtonCancel = modal.querySelector('.cancel-modal');
    modalState.overlayElement = modal;

    if (!modalState.titleEl || !modalState.contentArea || !modalState.gridBtn || !modalState.listBtn || !modalState.closeButtonX || !modalState.closeButtonCancel) {
        return;
    }

    if (!isNewModal) {
        modalState.closeButtonX?.removeEventListener('click', modalState.closeButtonXClickHandler);
        modalState.closeButtonCancel?.removeEventListener('click', modalState.closeButtonCancelClickHandler);
        modalState.overlayElement?.removeEventListener('click', modalState.overlayClickHandler);
    }
    modalState.closeButtonXClickHandler = closeModalFunction;
    modalState.closeButtonCancelClickHandler = closeModalFunction;
    modalState.overlayClickHandler = (e) => { if (e.target === modalState.overlayElement) { closeModalFunction(); } };

    modalState.closeButtonX.addEventListener('click', modalState.closeButtonXClickHandler);
    modalState.closeButtonCancel.addEventListener('click', modalState.closeButtonCancelClickHandler);
    modalState.overlayElement.addEventListener('click', modalState.overlayClickHandler);

    const defaultTitle = `–°–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è ${algorithmId}`;
    modalState.titleEl.textContent = `${algorithmTitle || defaultTitle}`;
    modalState.titleEl.title = modalState.titleEl.textContent;
    modalState.contentArea.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400 p-6">–ó–∞–≥—Ä—É–∑–∫–∞...</p>';
    document.body.classList.add('overflow-hidden');
    modal.classList.remove('hidden');

    let currentView = 'grid';

    const updateViewButtons = () => {
        if (!modalState.gridBtn || !modalState.listBtn) return;
        const isGrid = currentView === 'grid';
        modalState.gridBtn.classList.toggle('bg-primary', isGrid);
        modalState.gridBtn.classList.toggle('text-white', isGrid);
        modalState.gridBtn.classList.toggle('bg-white', !isGrid);
        modalState.gridBtn.classList.toggle('dark:bg-gray-700', !isGrid);
        modalState.gridBtn.classList.toggle('text-gray-900', !isGrid);
        modalState.gridBtn.classList.toggle('dark:text-white', !isGrid);

        modalState.listBtn.classList.toggle('bg-primary', !isGrid);
        modalState.listBtn.classList.toggle('text-white', !isGrid);
        modalState.listBtn.classList.toggle('bg-white', isGrid);
        modalState.listBtn.classList.toggle('dark:bg-gray-700', isGrid);
        modalState.listBtn.classList.toggle('text-gray-900', isGrid);
        modalState.listBtn.classList.toggle('dark:text-white', isGrid);
    };

    const renderContent = () => {
        if (!modalState.contentArea) {
            return;
        }
        const existingImages = modalState.contentArea.querySelectorAll('img[data-object-url]');
        existingImages.forEach(img => {
            if (img.dataset.objectUrl) {
                try { URL.revokeObjectURL(img.dataset.objectUrl); } catch (e) { console.warn("Error revoking URL in renderContent", e); }
                delete img.dataset.objectUrl;
            }
        });
        modalState.contentArea.innerHTML = '';

        if (!screenshots || !Array.isArray(screenshots) || screenshots.length === 0) {
            modalState.contentArea.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400 p-6">–ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>';
            return;
        }
        const sortedScreenshots = [...screenshots].sort((a, b) => (a.id || 0) - (b.id || 0));
        const openLightboxHandler = (blobs, index) => {
            if (typeof openLightbox === 'function') {
                openLightbox(blobs, index);
            } else {
                showNotification("–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ª–∞–π—Ç–±–æ–∫—Å) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
            }
        };
        if (currentView === 'grid') {
            if (typeof renderScreenshotThumbnails === 'function') {
                renderScreenshotThumbnails(modalState.contentArea, sortedScreenshots, openLightboxHandler, modalState);
            } else {
                modalState.contentArea.innerHTML = '<p class="text-center text-red-500 dark:text-red-400 p-6">–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.</p>';
            }
        } else {
            if (typeof renderScreenshotList === 'function') {
                renderScreenshotList(modalState.contentArea, sortedScreenshots, openLightboxHandler, null, modalState);
            } else {
                modalState.contentArea.innerHTML = '<p class="text-center text-red-500 dark:text-red-400 p-6">–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.</p>';
            }
        }
    };

    if (!isNewModal && modalState.gridBtn && modalState.gridBtnClickHandler) {
        modalState.gridBtn.removeEventListener('click', modalState.gridBtnClickHandler);
    }
    if (!isNewModal && modalState.listBtn && modalState.listBtnClickHandler) {
        modalState.listBtn.removeEventListener('click', modalState.listBtnClickHandler);
    }

    modalState.gridBtnClickHandler = () => { if (currentView !== 'grid') { currentView = 'grid'; updateViewButtons(); renderContent(); } };
    modalState.listBtnClickHandler = () => { if (currentView !== 'list') { currentView = 'list'; updateViewButtons(); renderContent(); } };

    modalState.gridBtn.addEventListener('click', modalState.gridBtnClickHandler);
    modalState.listBtn.addEventListener('click', modalState.listBtnClickHandler);

    updateViewButtons();
    renderContent();
}


function renderScreenshotThumbnails(container, screenshots, onOpenLightbox, modalState = null) {
    if (!container) {
        console.error("[renderScreenshotThumbnails] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.");
        return [];
    }
    if (!Array.isArray(screenshots)) {
        console.error("[renderScreenshotThumbnails] 'screenshots' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º.");
        return [];
    }
    if (typeof onOpenLightbox !== 'function') {
        console.error("[renderScreenshotThumbnails] 'onOpenLightbox' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π.");
    }

    const createdObjectUrls = [];

    const existingImagesThumbs = container.querySelectorAll('img[data-object-url]');
    existingImagesThumbs.forEach(img => {
        if (img.dataset.objectUrl) {
            console.log("[renderScreenshotThumbnails] –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –û–±—ä–µ–∫—Ç–Ω—ã–π URL –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º:", img.dataset.objectUrl);
            try {
                URL.revokeObjectURL(img.dataset.objectUrl);
            } catch (e) {
                console.warn("–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è URL –≤ renderScreenshotThumbnails (pre-render cleanup)", e);
            }
            delete img.dataset.objectUrl;
        }
    });

    container.innerHTML = '';
    container.className = "grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4 p-4";

    const fragment = document.createDocumentFragment();
    const allBlobs = screenshots.map(s => s?.blob).filter(blob => blob instanceof Blob);

    screenshots.forEach((screenshot, index) => {
        if (!screenshot || !(screenshot.blob instanceof Blob) || typeof screenshot.id === 'undefined') {
            console.warn(`[renderScreenshotThumbnails] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ ${index}:`, screenshot);
            return;
        }

        const item = document.createElement('div');
        item.className = 'group relative aspect-video bg-gray-200 dark:bg-gray-700 rounded-lg overflow-hidden shadow hover:shadow-md transition cursor-pointer border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 dark:focus:ring-offset-gray-900';
        item.tabIndex = 0;
        item.title = `–°–∫—Ä–∏–Ω—à–æ—Ç ${screenshot.id || index + 1}`;

        const img = document.createElement('img');
        img.className = 'w-full h-full object-contain';
        img.alt = `–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ${screenshot.id || index + 1}`;
        img.loading = 'lazy';

        let objectURL = null;
        try {
            objectURL = URL.createObjectURL(screenshot.blob);
            createdObjectUrls.push(objectURL);
            img.dataset.objectUrl = objectURL;
            img.src = objectURL;

            img.onload = () => {
                console.log(`–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ ${screenshot.id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞.`);
            };

            img.onerror = () => {
                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã ${screenshot.id}`);
                if (img.dataset.objectUrl) {
                    try {
                        URL.revokeObjectURL(img.dataset.objectUrl);
                        console.log(`[renderScreenshotThumbnails] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω URL –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏: ${img.dataset.objectUrl}`);
                        const urlIndex = createdObjectUrls.indexOf(img.dataset.objectUrl);
                        if (urlIndex > -1) {
                            createdObjectUrls.splice(urlIndex, 1);
                        }
                    } catch (e) {
                        console.warn("–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è URL –ø—Ä–∏ onerror:", e);
                    }
                    delete img.dataset.objectUrl;
                }
                item.innerHTML = `<div class="flex items-center justify-center w-full h-full text-center text-red-500 text-xs p-1">–û—à–∏–±–∫–∞<br>–∑–∞–≥—Ä—É–∑–∫–∏</div>`;
                item.classList.add('bg-red-100', 'border-red-500');
                if (item._clickHandler) item.removeEventListener('click', item._clickHandler);
                if (item._keydownHandler) item.removeEventListener('keydown', item._keydownHandler);
                item._clickHandler = null;
                item._keydownHandler = null;
            };
        } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Object URL –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ${screenshot.id}:`, e);
            item.innerHTML = `<div class="flex items-center justify-center w-full h-full text-center text-red-500 text-xs p-1">–û—à–∏–±–∫–∞<br>—Å–æ–∑–¥–∞–Ω–∏—è URL</div>`;
            item.classList.add('bg-red-100', 'border-red-500');
        }

        const caption = document.createElement('div');
        caption.className = 'absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white text-xs p-1 truncate hidden group-hover:block';
        caption.textContent = `ID: ${screenshot.id}`;

        if (objectURL && !item.querySelector('div.text-red-500')) {
            item.appendChild(img);
            item.appendChild(caption);

            const currentBlobIndex = allBlobs.findIndex(b => b === screenshot.blob);

            if (item._clickHandler) item.removeEventListener('click', item._clickHandler);
            item._clickHandler = () => {
                if (typeof onOpenLightbox === 'function') {
                    if (currentBlobIndex !== -1) {
                        onOpenLightbox(allBlobs, currentBlobIndex);
                    } else {
                        console.error(`[renderScreenshotThumbnails] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Blob –≤ –º–∞—Å—Å–∏–≤–µ 'allBlobs' –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ${screenshot.id}. –õ–∞–π—Ç–±–æ–∫—Å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç.`);
                    }
                } else {
                    console.warn("[renderScreenshotThumbnails] –§—É–Ω–∫—Ü–∏—è 'onOpenLightbox' –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π.");
                }
            };
            item.addEventListener('click', item._clickHandler);

            if (item._keydownHandler) item.removeEventListener('keydown', item._keydownHandler);
            item._keydownHandler = (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    if (typeof onOpenLightbox === 'function') {
                        if (currentBlobIndex !== -1) {
                            onOpenLightbox(allBlobs, currentBlobIndex);
                        } else {
                            console.error(`[renderScreenshotThumbnails] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Blob –≤ –º–∞—Å—Å–∏–≤–µ 'allBlobs' –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ${screenshot.id} –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏. –õ–∞–π—Ç–±–æ–∫—Å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç.`);
                        }
                    } else {
                        console.warn("[renderScreenshotThumbnails] –§—É–Ω–∫—Ü–∏—è 'onOpenLightbox' –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π.");
                    }
                }
            };
            item.addEventListener('keydown', item._keydownHandler);
        }

        fragment.appendChild(item);
    });

    container.appendChild(fragment);

    console.log(`[renderScreenshotThumbnails] –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–∏–Ω–∏–∞—Ç—é—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ: ${fragment.childElementCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–Ω–æ URL: ${createdObjectUrls.length}`);
}


function renderScreenshotList(container, screenshots, onOpenLightbox, onItemClick = null, modalState = null) {
    if (!container) {
        console.error("[renderScreenshotList] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.");
        return;
    }
    if (!Array.isArray(screenshots)) {
        console.error("[renderScreenshotList] 'screenshots' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º.");
        container.innerHTML = '<div class="p-4 text-red-600 dark:text-red-400">–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.</div>';
        return;
    }
    if (typeof onOpenLightbox !== 'function') {
        console.error("[renderScreenshotList] 'onOpenLightbox' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π.");
    }

    container.innerHTML = '';
    container.className = "flex flex-col space-y-1 p-4";
    console.log(`[renderScreenshotList] –ù–∞—á–∞–ª–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞. –ü–µ—Ä–µ–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${screenshots.length}.`);

    if (screenshots.length === 0) {
        container.innerHTML = '<div class="p-4 text-gray-500 dark:text-gray-400 text-center">–°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—É—Å—Ç.</div>';
        console.log("[renderScreenshotList] –°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—É—Å—Ç.");
        return;
    }

    const fragment = document.createDocumentFragment();
    const validBlobsForLightbox = screenshots
        .map(s => (s && s.blob instanceof Blob ? s.blob : null))
        .filter(blob => blob !== null);
    let renderedCount = 0;

    screenshots.forEach((screenshot, index) => {
        if (!screenshot || typeof screenshot.id === 'undefined' || !(screenshot.blob instanceof Blob)) {
            console.warn(`[renderScreenshotList] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ ${index}:`, screenshot);
            return;
        }

        const item = document.createElement('div');
        item.dataset.screenshotId = screenshot.id;
        item.className = 'group flex items-center justify-between p-3 border-b border-gray-200 dark:border-gray-700 last:border-b-0 rounded transition-colors cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-1 dark:focus:ring-offset-gray-900';
        item.tabIndex = 0;
        item.setAttribute('role', 'button');
        item.setAttribute('aria-label', `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ ${screenshot.id}`);

        const infoDiv = document.createElement('div');
        infoDiv.className = 'flex flex-col text-sm';
        const nameSpan = document.createElement('span');
        nameSpan.className = 'font-medium text-gray-900 dark:text-gray-100';
        nameSpan.textContent = screenshot.name || `–°–∫—Ä–∏–Ω—à–æ—Ç ${screenshot.id}`;
        const sizeSpan = document.createElement('span');
        sizeSpan.className = 'text-gray-500 dark:text-gray-400';
        sizeSpan.textContent = screenshot.blob.size ? `${(screenshot.blob.size / 1024).toFixed(1)} KB` : '–†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
        infoDiv.appendChild(nameSpan);
        infoDiv.appendChild(sizeSpan);

        const viewButton = document.createElement('button');
        viewButton.type = 'button';
        viewButton.className = 'ml-4 px-3 py-1 bg-primary text-white text-xs font-medium rounded shadow-sm hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition';
        viewButton.textContent = '–ü—Ä–æ—Å–º–æ—Ç—Ä';
        viewButton.setAttribute('aria-label', `–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç ${screenshot.id}`);

        const blobIndexForLightbox = validBlobsForLightbox.findIndex(b => b === screenshot.blob);


        const itemClickHandler = (e) => {
            if (e.target === viewButton || viewButton.contains(e.target)) {
                return;
            }
            console.log(`[renderScreenshotList] –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞ ID: ${screenshot.id}`);
            if (typeof onItemClick === 'function') {
                onItemClick(screenshot, index);
            } else {
                if (typeof onOpenLightbox === 'function' && blobIndexForLightbox !== -1) {
                    onOpenLightbox(validBlobsForLightbox, blobIndexForLightbox);
                } else if (blobIndexForLightbox === -1) {
                    console.error(`[renderScreenshotList] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Blob –¥–ª—è ID ${screenshot.id} –≤ –º–∞—Å—Å–∏–≤–µ 'validBlobsForLightbox' –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç.`);
                }
            }
        };
        if (item._itemClickHandler) item.removeEventListener('click', item._itemClickHandler);
        item.addEventListener('click', itemClickHandler);
        item._itemClickHandler = itemClickHandler;

        const itemKeydownHandler = (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                itemClickHandler(e);
            }
        };
        if (item._itemKeydownHandler) item.removeEventListener('keydown', item._itemKeydownHandler);
        item.addEventListener('keydown', itemKeydownHandler);
        item._itemKeydownHandler = itemKeydownHandler;


        const buttonClickHandler = (e) => {
            e.stopPropagation();
            console.log(`[renderScreenshotList] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä" –¥–ª—è ID: ${screenshot.id}`);
            if (typeof onOpenLightbox === 'function') {
                if (blobIndexForLightbox !== -1) {
                    onOpenLightbox(validBlobsForLightbox, blobIndexForLightbox);
                } else {
                    console.error(`[renderScreenshotList] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Blob –¥–ª—è ID ${screenshot.id} –≤ –º–∞—Å—Å–∏–≤–µ 'validBlobsForLightbox' –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.`);
                }
            } else {
                console.warn("[renderScreenshotList] –§—É–Ω–∫—Ü–∏—è 'onOpenLightbox' –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π.");
            }
        };
        if (viewButton._buttonClickHandler) viewButton.removeEventListener('click', viewButton._buttonClickHandler);
        viewButton.addEventListener('click', buttonClickHandler);
        viewButton._buttonClickHandler = buttonClickHandler;

        item.appendChild(infoDiv);
        item.appendChild(viewButton);
        fragment.appendChild(item);
        renderedCount++;
    });

    container.appendChild(fragment);
    console.log(`[renderScreenshotList] –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ: ${renderedCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.`);
}


function formatExampleForTextarea(exampleData) {
    if (!exampleData) {
        return '';
    }

    if (typeof exampleData === 'object' && exampleData !== null && exampleData.type === 'list') {
        const intro = exampleData.intro ? String(exampleData.intro).trim() + '\n' : '';
        const items = Array.isArray(exampleData.items)
            ? exampleData.items.map(item => `- ${String(item).replace(/<[^>]*>/g, '').trim()}`).join('\n')
            : '';
        return (intro + items).trim();
    }

    if (typeof exampleData === 'string') {
        return exampleData.trim();
    }

    try {
        return JSON.stringify(exampleData, null, 2).trim();
    } catch {
        return '[–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–∞]';
    }
}


function escapeHtml(text) {
    if (typeof text !== 'string') return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}


async function showAlgorithmDetail(algorithm, section) {
    console.log(`[showAlgorithmDetail v11 - PDF Export Fix] –í—ã–∑–≤–∞–Ω–∞. –ê–ª–≥–æ—Ä–∏—Ç–º ID: ${algorithm?.id}, –°–µ–∫—Ü–∏—è: ${section}`);

    const algorithmModal = document.getElementById('algorithmModal');
    const modalTitleElement = document.getElementById('modalTitle');
    const algorithmStepsContainer = document.getElementById('algorithmSteps');
    const deleteAlgorithmBtn = document.getElementById('deleteAlgorithmBtn');
    const editAlgorithmBtnModal = document.getElementById('editAlgorithmBtn');

    if (!algorithmModal || !modalTitleElement || !algorithmStepsContainer) {
        console.error("[showAlgorithmDetail v11 Error] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞.");
        showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π.", "error");
        return;
    }
    if (!algorithm || typeof algorithm !== 'object') {
        console.error("[showAlgorithmDetail v11 Error] –ü–µ—Ä–µ–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞:", algorithm);
        showNotification("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.", "error");
        return;
    }
    const currentAlgorithmId = (section === 'main' || algorithm.id === 'main') ? 'main' : (algorithm.id || null);
    if (currentAlgorithmId === null) {
        console.error(`[showAlgorithmDetail v11 Error] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∞–ª–≥–æ—Ä–∏—Ç–º–∞.`);
        showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∞–ª–≥–æ—Ä–∏—Ç–º–∞.", "error");
        return;
    }

    algorithmModal.dataset.currentAlgorithmId = String(currentAlgorithmId);
    algorithmModal.dataset.currentSection = section;

    modalTitleElement.textContent = algorithm.title ?? "–î–µ—Ç–∞–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞";
    algorithmStepsContainer.innerHTML = '<p class="text-gray-500 dark:text-gray-400 text-center py-4">–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–≥–æ–≤...</p>';

    if (deleteAlgorithmBtn) deleteAlgorithmBtn.style.display = (section === 'main') ? 'none' : '';
    if (editAlgorithmBtnModal) editAlgorithmBtnModal.style.display = '';

    const headerControlsContainer = modalTitleElement.parentElement.querySelector('.flex.flex-wrap.gap-2.justify-end');
    if (headerControlsContainer) {
        let exportButtonContainer = headerControlsContainer.querySelector('.export-btn-placeholder-modal');
        if (!exportButtonContainer) {
            exportButtonContainer = document.createElement('div');
            exportButtonContainer.className = 'export-btn-placeholder-modal';
            const exportButton = document.createElement('button');
            exportButton.id = 'exportAlgorithmToPdfBtn';
            exportButton.type = 'button';
            exportButton.className = 'inline-block p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors align-middle';
            exportButton.title = '–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF';
            exportButton.innerHTML = '<i class="fas fa-file-pdf"></i>';
            exportButtonContainer.appendChild(exportButton);
            if (editAlgorithmBtnModal) {
                editAlgorithmBtnModal.insertAdjacentElement('beforebegin', exportButtonContainer);
            } else if (deleteAlgorithmBtn) {
                deleteAlgorithmBtn.insertAdjacentElement('beforebegin', exportButtonContainer);
            } else {
                headerControlsContainer.insertBefore(exportButtonContainer, headerControlsContainer.firstChild);
            }
        }
        const exportBtn = headerControlsContainer.querySelector('#exportAlgorithmToPdfBtn');
        if (exportBtn) {
            if (exportBtn._clickHandler) {
                exportBtn.removeEventListener('click', exportBtn._clickHandler);
            }
            exportBtn._clickHandler = () => {
                const content = document.getElementById('algorithmSteps');
                const title = document.getElementById('modalTitle').textContent;
                ExportService.exportElementToPdf(content, title, { type: 'algorithm', data: algorithm });
            };
            exportBtn.addEventListener('click', exportBtn._clickHandler);
        }

        let favButtonContainer = headerControlsContainer.querySelector('.fav-btn-placeholder-modal');
        if (!favButtonContainer) {
            favButtonContainer = document.createElement('div');
            favButtonContainer.className = 'fav-btn-placeholder-modal';
            if (editAlgorithmBtnModal) {
                editAlgorithmBtnModal.insertAdjacentElement('beforebegin', favButtonContainer);
            } else if (deleteAlgorithmBtn) {
                deleteAlgorithmBtn.insertAdjacentElement('beforebegin', favButtonContainer);
            } else {
                headerControlsContainer.insertBefore(favButtonContainer, headerControlsContainer.firstChild);
            }
        }

        if (section === 'main' || currentAlgorithmId === 'main') {
            favButtonContainer.innerHTML = '';
            console.log("[showAlgorithmDetail v11] –ö–Ω–æ–ø–∫–∞ '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' —Å–∫—Ä—ã—Ç–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.");
        } else {
            const itemType = 'algorithm';
            const itemId = currentAlgorithmId;
            const itemSection = section;
            const itemTitle = algorithm.title;
            const itemDesc = algorithm.steps?.[0]?.description || algorithm.steps?.[0]?.title || (algorithm.description || '');
            const isFav = isFavorite(itemType, itemId);
            favButtonContainer.innerHTML = getFavoriteButtonHTML(itemId, itemType, itemSection, itemTitle, itemDesc, isFav);
            console.log(`[showAlgorithmDetail v11] –ö–Ω–æ–ø–∫–∞ '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ID ${itemId} –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.`);
        }
    } else {
        console.warn("[showAlgorithmDetail v11] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —à–∞–ø–∫–µ –º–æ–¥–∞–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    const isMainAlgorithm = section === 'main';

    try {
        if (!algorithm.steps || !Array.isArray(algorithm.steps)) {
            throw new Error('–î–∞–Ω–Ω—ã–µ —à–∞–≥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.');
        }

        const stepHtmlPromises = algorithm.steps.map(async (step, index) => {
            if (!step || typeof step !== 'object') {
                console.warn(`[showAlgorithmDetail v11 Step Render Warn] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —à–∞–≥–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ ${index}:`, step);
                return `<div class="algorithm-step bg-red-100 dark:bg-red-900/30 border-l-4 border-red-500 p-4 mb-3 rounded shadow-sm text-red-700 dark:text-red-300">–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–≥–∞ ${index + 1}.</div>`;
            }

            let additionalInfoTopHTML = '';
            if (step.additionalInfoText && step.additionalInfoShowTop) {
                additionalInfoTopHTML = `
                    <div class="additional-info-top mb-2 p-2 border-l-4 border-blue-400 bg-blue-50 dark:bg-blue-900/30 text-sm text-gray-700 dark:text-gray-300 rounded break-words">
                        ${typeof linkify === 'function' ? linkify(step.additionalInfoText) : escapeHtml(step.additionalInfoText)}
                    </div>`;
            }

            let screenshotIconHtml = '';
            let iconContainerHtml = '';
            if (!isMainAlgorithm) {
                const hasSavedScreenshotIds = Array.isArray(step.screenshotIds) && step.screenshotIds.length > 0;
                if (typeof renderScreenshotIcon === 'function') {
                    screenshotIconHtml = renderScreenshotIcon(currentAlgorithmId, index, hasSavedScreenshotIds);
                    if (screenshotIconHtml) {
                        iconContainerHtml = `<div class="inline-block ml-2 align-middle">${screenshotIconHtml}</div>`;
                    }
                }
            }

            const descriptionHtml = `<p class="mt-1 text-base ${iconContainerHtml ? 'clear-both' : ''} break-words">${typeof linkify === 'function' ? linkify(step.description ?? '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.') : escapeHtml(step.description ?? '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.')}</p>`;
            let exampleHtml = '';
            if (step.example) {
                exampleHtml = `<div class="example-container mt-2 text-sm prose dark:prose-invert max-w-none break-words">`;
                if (typeof step.example === 'object' && step.example.type === 'list' && Array.isArray(step.example.items)) {
                    if (step.example.intro) exampleHtml += `<p class="italic mb-1">${typeof linkify === 'function' ? linkify(step.example.intro) : escapeHtml(step.example.intro)}</p>`;
                    exampleHtml += `<ul class="list-disc list-inside pl-5 space-y-0.5">`;
                    step.example.items.forEach(item => exampleHtml += `<li>${typeof linkify === 'function' ? linkify(String(item)) : escapeHtml(String(item))}</li>`);
                    exampleHtml += `</ul>`;
                } else if (typeof step.example === 'string') {
                    exampleHtml += `<strong>–ü—Ä–∏–º–µ—Ä:</strong><p class="mt-1">${typeof linkify === 'function' ? linkify(step.example) : escapeHtml(step.example)}</p>`;
                } else {
                    try {
                        exampleHtml += `<strong>–ü—Ä–∏–º–µ—Ä (–¥–∞–Ω–Ω—ã–µ):</strong><pre class="text-xs bg-gray-200 dark:bg-gray-600 p-2 rounded mt-1 overflow-x-auto font-mono whitespace-pre-wrap"><code>${escapeHtml(JSON.stringify(step.example, null, 2))}</code></pre>`;
                    } catch (e) { exampleHtml += `<div class="text-xs text-red-500 mt-1">[–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∏–º–µ—Ä–∞]</div>`; }
                }
                exampleHtml += `</div>`;
            }

            let additionalInfoBottomHTML = '';
            if (step.additionalInfoText && step.additionalInfoShowBottom) {
                additionalInfoBottomHTML = `
                    <div class="additional-info-bottom mt-3 p-2 border-t border-gray-200 dark:border-gray-600 pt-3 text-sm text-gray-700 dark:text-gray-300 rounded bg-gray-50 dark:bg-gray-700/50 break-words">
                       ${typeof linkify === 'function' ? linkify(step.additionalInfoText) : escapeHtml(step.additionalInfoText)}
                    </div>`;
            }

            const stepTitle = escapeHtml(step.title ?? `–®–∞–≥ ${index + 1}`);
            const stepHTML = `
                 <div class="algorithm-step bg-gray-50 dark:bg-gray-700 p-4 rounded-lg shadow-sm border-l-4 border-primary mb-3 relative">
                     ${additionalInfoTopHTML}
                     <h3 class="font-bold text-lg ${iconContainerHtml ? 'inline' : ''}" title="${stepTitle}">${stepTitle}</h3>
                     ${iconContainerHtml}
                     ${descriptionHtml}
                     ${exampleHtml}
                     ${additionalInfoBottomHTML}
                 </div>`;
            return stepHTML;
        });

        const stepsHtmlArray = await Promise.all(stepHtmlPromises);
        algorithmStepsContainer.innerHTML = stepsHtmlArray.join('');

        if (!isMainAlgorithm) {
            const newButtons = algorithmStepsContainer.querySelectorAll('.view-screenshot-btn');
            if (newButtons.length > 0) {
                newButtons.forEach(button => {
                    if (typeof handleViewScreenshotClick === 'function') {
                        button.removeEventListener('click', handleViewScreenshotClick);
                        button.addEventListener('click', handleViewScreenshotClick);
                    }
                });
            }
        }
    } catch (error) {
        console.error("[showAlgorithmDetail v11 Step Render Error]", error);
        algorithmStepsContainer.innerHTML = `<p class="text-red-500 p-4 text-center">–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —à–∞–≥–æ–≤: ${error.message}</p>`;
    }

    algorithmModal.classList.remove('hidden');
    document.body.classList.add('modal-open');
    console.log(`[showAlgorithmDetail v11 Info] –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ #${algorithmModal.id} –ø–æ–∫–∞–∑–∞–Ω–æ.`);
}


function initStepInteractions(stepElement) {
    const header = stepElement.querySelector('.step-header');
    const titleInput = stepElement.querySelector('.step-title');
    const titlePreview = stepElement.querySelector('.step-title-preview');

    if (!header || !titleInput || !titlePreview) {
        console.warn("initStepInteractions: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —à–∞–≥–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.", stepElement);
        return;
    }

    const updateTitlePreview = () => {
        titlePreview.value = titleInput.value || `–®–∞–≥ ${stepElement.querySelector('.step-number-label').textContent.replace('–®–∞–≥ ', '')}`;
    };

    titleInput.addEventListener('input', updateTitlePreview);
    updateTitlePreview();

    header.addEventListener('click', (event) => {
        if (event.target.closest('.step-drag-handle, .delete-step')) {
            return;
        }
        stepElement.classList.toggle('is-collapsed');
    });
}


function initCollapseAllButtons(container, stepsContainerSelector) {
    const titleElement = container.querySelector('.text-xl.font-bold');
    if (!titleElement) return;

    let controlsContainer = titleElement.parentElement.querySelector('.collapse-controls');
    if (!controlsContainer) {
        controlsContainer = document.createElement('div');
        controlsContainer.className = 'collapse-controls flex items-center gap-2 ml-4';
        titleElement.parentElement.insertBefore(controlsContainer, titleElement.nextSibling);
    }

    controlsContainer.innerHTML = `
        <button type="button" class="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 rounded hover:bg-gray-300" data-action="collapse-all">–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ</button>
        <button type="button" class="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 rounded hover:bg-gray-300" data-action="expand-all">–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ</button>
    `;

    controlsContainer.addEventListener('click', (event) => {
        const action = event.target.dataset.action;
        if (action === 'collapse-all' || action === 'expand-all') {
            const stepsContainer = container.querySelector(stepsContainerSelector);
            if (stepsContainer) {
                const steps = stepsContainer.querySelectorAll('.edit-step');
                steps.forEach(step => {
                    step.classList.toggle('is-collapsed', action === 'collapse-all');
                });
            }
        }
    });
}


function initViewToggles() {
    document.querySelectorAll('.view-toggle').forEach(button => {
        button.addEventListener('click', handleViewToggleClick);
    });
    loadViewPreferences();
}


async function loadViewPreferences() {
    try {
        const prefs = await getFromIndexedDB('preferences', 'viewPreferences');
        viewPreferences = prefs?.views || {};
        document.querySelectorAll('[data-section-id]').forEach(container => {
            const sectionId = container.dataset.sectionId;
            const defaultView = container.dataset.defaultView || 'cards';
            applyView(container, viewPreferences[sectionId] || defaultView);
        });
    } catch (error) {
        console.error("Error loading view preferences:", error);
        applyDefaultViews();
    }
}


function applyDefaultViews() {
    document.querySelectorAll('[data-section-id]').forEach(container => {
        applyView(container, container.dataset.defaultView || 'cards');
    });
}


async function saveViewPreference(sectionId, view) {
    viewPreferences[sectionId] = view;
    try {
        await saveToIndexedDB('preferences', { id: 'viewPreferences', views: viewPreferences });
    } catch (error) {
        console.error("Error saving view preference:", error);
    }
}


function handleViewToggleClick(event) {
    const clickedButton = event.currentTarget;
    const desiredView = clickedButton.dataset.view;

    const reglamentsListDiv = document.getElementById('reglamentsList');
    const isViewingReglamentsList = reglamentsListDiv && !reglamentsListDiv.classList.contains('hidden');

    let targetContainer;
    let sectionIdForPrefs;

    if (isViewingReglamentsList) {
        targetContainer = document.getElementById('reglamentsContainer');
    } else {
        const controlBlockSelectors = [
            '.actions-bar-container',
            '#bookmarksContent > div:first-child',
            '#linksContent > div:first-child',
            '#extLinksContent > div:first-child',
            '#programAlgorithms',
            '#skziAlgorithms',
            '#webRegAlgorithms',
            '#lk1cAlgorithms',
            '.bg-gray-100.dark\\:bg-gray-800.p-content.rounded-lg.shadow-md',
            '.bg-gray-100.dark\\:bg-gray-800',
            (currentSection === 'reglaments' && !isViewingReglamentsList ? '#globalReglamentActionsBar' : null)
        ].filter(Boolean);

        let viewControlsBlock = null;
        for (const selector of controlBlockSelectors) {
            viewControlsBlock = clickedButton.closest(selector);
            if (viewControlsBlock) break;
        }

        if (!viewControlsBlock) {
            viewControlsBlock = clickedButton.parentElement;
        }

        if (viewControlsBlock) {
            const parentOfViewControls = viewControlsBlock.parentElement;

            if (currentSection === 'reglaments' && !isViewingReglamentsList) {
                targetContainer = document.getElementById('reglamentCategoryGrid');
            } else if (parentOfViewControls) {
                let potentialContainer = viewControlsBlock.nextElementSibling;
                while (potentialContainer && !potentialContainer.matches('[data-section-id]')) {
                    potentialContainer = potentialContainer.nextElementSibling;
                }
                if (potentialContainer && potentialContainer.matches('[data-section-id]')) {
                    targetContainer = potentialContainer;
                } else {
                    targetContainer = parentOfViewControls.querySelector(`[data-section-id="${currentSection + 'Container'}"]`) ||
                        parentOfViewControls.querySelector(`[data-section-id="${currentSection + 'Algorithms'}"]`) ||
                        parentOfViewControls.querySelector(`[data-section-id]`);
                }
            }
        }
    }

    if (targetContainer) {
        sectionIdForPrefs = targetContainer.dataset.sectionId;
    } else {
        const activeTabContent = document.querySelector(`#${currentSection}Content`);
        if (activeTabContent) {
            targetContainer = activeTabContent.querySelector('[data-section-id]');
            if (targetContainer) {
                sectionIdForPrefs = targetContainer.dataset.sectionId;
            }
        }
    }

    if (!targetContainer || !sectionIdForPrefs || !desiredView) {
        console.warn("handleViewToggleClick: Could not find target container or sectionId.", {
            clickedButton: clickedButton.id,
            currentSection: currentSection,
            desiredView: desiredView,
            targetContainerId: targetContainer ? targetContainer.id : 'null',
            sectionIdForPrefs: sectionIdForPrefs,
            isViewingReglamentsList: isViewingReglamentsList
        });
        let fallbackContainerId = currentSection + 'Container';
        if (['program', 'skzi', 'webReg', 'lk1c'].includes(currentSection)) {
            fallbackContainerId = currentSection + 'Algorithms';
        } else if (currentSection === 'reglaments' && !isViewingReglamentsList) {
            fallbackContainerId = 'reglamentCategoryGrid';
        }

        const fallbackTargetContainer = document.getElementById(fallbackContainerId);
        if (fallbackTargetContainer && fallbackTargetContainer.dataset.sectionId && desiredView) {
            console.log(`handleViewToggleClick: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback-–ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${fallbackContainerId}`);
            targetContainer = fallbackTargetContainer;
            sectionIdForPrefs = fallbackTargetContainer.dataset.sectionId;
        } else {
            showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞.", "error");
            return;
        }
    }
    applyView(targetContainer, desiredView);
    saveViewPreference(sectionIdForPrefs, desiredView);
}


function applyView(container, view) {
    if (!container) {
        console.warn(`[applyView v6 TargetFix] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.`);
        return;
    }

    const sectionId = container.dataset.sectionId;
    let viewControlsContainer = null;

    if (sectionId === 'reglamentsContainer' || sectionId === 'reglamentCategoryGrid') {
        viewControlsContainer = document.getElementById('globalReglamentActionsBar');
    } else {
        const firstViewToggleButtonInSection = container.closest('.tab-content')?.querySelector(`.view-toggle[data-view]`);
        if (firstViewToggleButtonInSection) {
            viewControlsContainer = firstViewToggleButtonInSection.closest('.flex.items-center.gap-2, .flex.items-center.space-x-1.border, .flex.items-center.space-x-2, #globalReglamentActionsBar');
            if (!viewControlsContainer) {
                const sectionWrapper = container.closest('.bg-gray-100.dark\\:bg-gray-800.p-content');
                if (sectionWrapper) {
                    viewControlsContainer = sectionWrapper.querySelector('.flex.items-center.gap-2, .flex.items-center.space-x-1.border, .flex.items-center.space-x-2');
                }
            }
        }
    }

    const buttons = viewControlsContainer ? viewControlsContainer.querySelectorAll(`.view-toggle`) : document.querySelectorAll(`.view-toggle[data-view]`);
    let sectionSpecificButtons = [];
    if (buttons && buttons.length > 0) {
        const sectionRoot = container.closest('.tab-content');
        if (sectionRoot) {
            const buttonsWithinSection = sectionRoot.querySelectorAll('.view-toggle');
            if (buttonsWithinSection.length > 0) {
                sectionSpecificButtons = Array.from(buttonsWithinSection);
            } else {
                sectionSpecificButtons = Array.from(buttons);
            }
        } else {
            sectionSpecificButtons = Array.from(buttons);
        }
    }

    let items;
    if (sectionId === 'reglamentCategoryGrid') {
        items = container.querySelectorAll('.reglament-category');
    } else {
        items = container.querySelectorAll('.view-item');
    }

    if (sectionSpecificButtons.length > 0) {
        sectionSpecificButtons.forEach(btn => {
            const isTargetView = btn.dataset.view === view;
            btn.classList.toggle('bg-primary', isTargetView);
            btn.classList.toggle('text-white', isTargetView);
            const isGlobalReglamentBarButton = btn.closest('#globalReglamentActionsBar');
            if (isGlobalReglamentBarButton) {
                btn.classList.toggle('bg-white', !isTargetView);
                btn.classList.toggle('dark:bg-gray-700', !isTargetView);
                btn.classList.toggle('text-gray-900', !isTargetView);
                btn.classList.toggle('dark:text-white', !isTargetView);
            } else {
                btn.classList.toggle('bg-white', !isTargetView);
                btn.classList.toggle('dark:bg-gray-700', !isTargetView);
                btn.classList.toggle('text-gray-900', !isTargetView);
                btn.classList.toggle('dark:text-gray-300', !isTargetView);
            }
        });
    }

    const gridColsClassesBase = SECTION_GRID_COLS[sectionId] || SECTION_GRID_COLS.default;
    const gridColsClassesForCategoryGrid = SECTION_GRID_COLS.reglamentCategoryGrid || ['grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3'];

    container.classList.remove(
        ...CARD_CONTAINER_CLASSES, ...gridColsClassesBase, ...gridColsClassesForCategoryGrid,
        ...LIST_CONTAINER_CLASSES,
        'auto-rows-fr',
        'gap-1', 'gap-2', 'gap-3', 'gap-4'
    );

    if (view === 'cards') {
        container.classList.add(...CARD_CONTAINER_CLASSES);
        container.classList.add('auto-rows-fr');
        if (sectionId === 'reglamentCategoryGrid') {
            container.classList.add(...gridColsClassesForCategoryGrid);
        } else {
            container.classList.add(...gridColsClassesBase);
        }
        if (['bookmarksContainer', 'extLinksContainer', 'linksContainer'].includes(sectionId)) {
            container.classList.add('gap-4');
        } else if (sectionId === 'reglamentCategoryGrid') {
            container.classList.add('gap-content');
        }
    } else {
        container.classList.add(...LIST_CONTAINER_CLASSES);
        if (sectionId === 'linksContainer') {
            container.classList.add('gap-2');
        } else if (sectionId === 'reglamentCategoryGrid') {
            container.classList.remove(...gridColsClassesForCategoryGrid, ...gridColsClassesBase, 'auto-rows-fr');
            container.classList.add('grid-cols-1');
        }
    }

    items.forEach(item => {
        item.classList.remove(
            ...CARD_ITEM_BASE_CLASSES,
            ...ALGO_BOOKMARK_CARD_CLASSES,
            ...LINK_REGLAMENT_CARD_CLASSES,
            'bg-white', 'dark:bg-[#374151]', 'border', 'border-gray-200', 'dark:border-gray-700',
            'h-full', 'flex-col', 'justify-between',
            ...LIST_ITEM_BASE_CLASSES,
            ...LIST_HOVER_TRANSITION_CLASSES,
            'py-3', 'pl-5', 'pr-3', 'mb-1',
            'text-center', 'md:items-start', 'md:text-left'
        );
        item.style.borderColor = '';

        if (view === 'cards') {
            item.classList.add(...CARD_ITEM_BASE_CLASSES);
            item.classList.add('h-full');

            if (item.classList.contains('algorithm-card')) {
                item.classList.add(...ALGO_BOOKMARK_CARD_CLASSES);
            } else if (item.classList.contains('reglament-category')) {
                item.classList.add(...ALGO_BOOKMARK_CARD_CLASSES);
                item.classList.remove('bg-white', 'dark:bg-gray-700');
            } else if (item.classList.contains('bookmark-item') || item.classList.contains('ext-link-item') || item.classList.contains('cib-link-item')) {
                item.classList.add(...ALGO_BOOKMARK_CARD_CLASSES);
            }
        } else {
            item.classList.add(...LIST_ITEM_BASE_CLASSES, ...LIST_HOVER_TRANSITION_CLASSES);
            item.classList.remove('h-full');
            if (item.classList.contains('reglament-category')) {
                item.classList.remove('border-l-4');
            }
        }
    });
    console.log(`[applyView v7 - CIB Fix] –°—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∞ '${view}' –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ ${sectionId || container.id}.`);
}


function applyCurrentView(sectionId) {
    const container = document.getElementById(sectionId);
    if (container) {
        const currentView = viewPreferences[sectionId] || container.dataset.defaultView || 'cards';
        applyView(container, currentView);
    }
}


function createStepElementHTML(stepNumber, isMainAlgorithm, includeScreenshotsField) {
    const commonInputClasses = 'w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100';
    const commonTextareaClasses = `${commonInputClasses} resize-y`;

    const exampleInputHTML = isMainAlgorithm ? `
    <div class="mt-2">
        <label class="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300">–ü—Ä–∏–º–µ—Ä / –°–ø–∏—Å–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
        <textarea class="step-example ${commonTextareaClasses}" rows="4" placeholder="–ü—Ä–∏–º–µ—Ä: –¢–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–∞...\n–ò–õ–ò\n- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ 1\n- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ 2"></textarea>
        <p class="text-xs text-gray-500 mt-1">–î–ª—è —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Ñ–∏—Å (-) –∏–ª–∏ –∑–≤–µ–∑–¥–æ—á–∫—É (*) –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏. –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –¥–µ—Ñ–∏—Å–∞/–∑–≤–µ–∑–¥–æ—á–∫–∏ –±—É–¥–µ—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º.</p>
    </div>
` : '';

    const additionalInfoHTML = `
        <div class="mt-3 border-t border-gray-200 dark:border-gray-600 pt-3">
            <label class="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
            <textarea class="step-additional-info ${commonTextareaClasses}" rows="3" placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."></textarea>
            <div class="mt-2 flex items-center space-x-4">
                <label class="flex items-center text-sm text-gray-700 dark:text-gray-300 cursor-pointer">
                    <input type="checkbox" class="step-additional-info-pos-top form-checkbox h-4 w-4 text-primary focus:ring-primary border-gray-300 dark:border-gray-600 rounded">
                    <span class="ml-2">–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö—É</span>
                </label>
                <label class="flex items-center text-sm text-gray-700 dark:text-gray-300 cursor-pointer">
                    <input type="checkbox" class="step-additional-info-pos-bottom form-checkbox h-4 w-4 text-primary focus:ring-primary border-gray-300 dark:border-gray-600 rounded">
                    <span class="ml-2">–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑—É</span>
                </label>
            </div>
        </div>
    `;

    const screenshotHTML = includeScreenshotsField ? `
        <div class="mt-3 border-t border-gray-200 dark:border-gray-600 pt-3">
            <label class="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300">–°–∫—Ä–∏–Ω—à–æ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
             <p class="text-xs text-gray-500 dark:text-gray-400 mb-2">–î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –≤—Å—Ç–∞–≤–∫–æ–π –∏–∑ –±—É—Ñ–µ—Ä–∞.</p>
            <div id="screenshotThumbnailsContainer" class="flex flex-wrap gap-2 mb-2 min-h-[3rem]">
            </div>
            <div class="flex items-center gap-3">
                <button type="button" class="add-screenshot-btn px-3 py-1.5 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded-md transition">
                    <i class="fas fa-camera mr-1"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å/–î–æ–±–∞–≤–∏—Ç—å
                </button>
            </div>
            <input type="file" class="screenshot-input hidden" accept="image/png, image/jpeg, image/gif, image/webp" multiple>
        </div>
    ` : '';

    const isCopyableCheckboxHTML = isMainAlgorithm ? `
        <div class="mt-2">
            <label class="flex items-center text-sm text-gray-700 dark:text-gray-300 cursor-pointer">
                <input type="checkbox" class="step-is-copyable form-checkbox h-4 w-4 text-primary focus:ring-primary border-gray-300 dark:border-gray-600 rounded">
                <span class="ml-2">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–≥–∞ –ø–æ –∫–ª–∏–∫—É</span>
            </label>
        </div>
    ` : '';

    const noInnHelpCheckboxHTML = isMainAlgorithm ? `
        <div class="mt-2">
            <label class="flex items-center text-sm text-gray-700 dark:text-gray-300 cursor-pointer">
                <input type="checkbox" class="step-no-inn-help-checkbox form-checkbox h-4 w-4 text-primary focus:ring-primary border-gray-300 dark:border-gray-600 rounded">
                <span class="ml-2">–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–∑–≤–∞—Ç—å –ò–ù–ù?"</span>
            </label>
        </div>
    ` : '';

    return `
        <div class="step-header flex justify-between items-center mb-2 cursor-pointer bg-gray-100 dark:bg-gray-700/50 p-2 -m-2 rounded-t-lg">
            <div class="flex items-center flex-grow min-w-0">
                <i class="fas fa-grip-lines step-drag-handle text-gray-400 dark:text-gray-500 mr-3 cursor-grab" title="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç—å —à–∞–≥"></i>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 step-number-label mr-2">–®–∞–≥ ${stepNumber}</label>
                <span class="step-title-preview text-sm text-gray-800 dark:text-gray-200 truncate font-medium"></span>
            </div>
            <div class="flex items-center flex-shrink-0">
                <button type="button" class="delete-step text-red-500 hover:text-red-700 transition-colors duration-150 p-1 ml-2" aria-label="–£–¥–∞–ª–∏—Ç—å —à–∞–≥ ${stepNumber}">
                    <i class="fas fa-trash fa-fw" aria-hidden="true"></i>
                </button>
                <i class="fas fa-chevron-down step-toggle-icon ml-2 text-gray-500 dark:text-gray-400 transition-transform"></i>
            </div>
        </div>
        <div class="step-body pt-2">
            <div class="mb-2">
                <label class="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞</label>
                <input type="text" class="step-title ${commonInputClasses}" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫...">
            </div>
            <div>
                <label class="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea class="step-desc ${commonTextareaClasses}" rows="3" placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞..."></textarea>
            </div>
            ${exampleInputHTML}
            ${isCopyableCheckboxHTML} 
            ${noInnHelpCheckboxHTML}
            ${additionalInfoHTML}
            ${screenshotHTML}
        </div>
    `;
}


async function editAlgorithm(algorithmId, section = 'main') {
    let algorithm = null;
    initialEditState = null;

    const isMainAlgorithm = section === 'main';
    console.log(`[editAlgorithm v9 - Collapse Feature] –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ID=${algorithmId}, –°–µ–∫—Ü–∏—è=${section}`);

    try {
        if (isMainAlgorithm) {
            algorithm = algorithms.main;
        } else {
            if (algorithms[section] && Array.isArray(algorithms[section])) {
                algorithm = algorithms[section].find(a => String(a?.id) === String(algorithmId));
            }
        }
        if (!algorithm) {
            throw new Error(`–ê–ª–≥–æ—Ä–∏—Ç–º —Å ID ${algorithmId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ü–∏–∏ ${section}.`);
        }
        algorithm = JSON.parse(JSON.stringify(algorithm));
        algorithm.steps = algorithm.steps?.map(step => ({ ...step })) || [];
    } catch (error) {
        console.error(`[editAlgorithm v9] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞:`, error);
        showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞: ${error.message}`, "error");
        return;
    }

    const editModal = document.getElementById('editModal');
    const editModalTitle = document.getElementById('editModalTitle');
    const algorithmTitleInput = document.getElementById('algorithmTitle');
    const descriptionContainer = document.getElementById('algorithmDescriptionContainer');
    const algorithmDescriptionInput = document.getElementById('algorithmDescription');
    const editStepsContainerElement = document.getElementById('editSteps');
    const saveAlgorithmBtn = document.getElementById('saveAlgorithmBtn');

    if (!editModal || !editModalTitle || !algorithmTitleInput || !editStepsContainerElement || !saveAlgorithmBtn || !descriptionContainer || !algorithmDescriptionInput) {
        console.error("[editAlgorithm v9] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞.");
        return;
    }

    const actionsContainer = editModal.querySelector('.flex.justify-end.items-center');
    if (actionsContainer && !actionsContainer.querySelector('.collapse-all-btn')) {
        const collapseControls = document.createElement('div');
        collapseControls.className = 'mr-auto';
        collapseControls.innerHTML = `
            <button type="button" class="collapse-all-btn px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 rounded hover:bg-gray-300">–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ</button>
            <button type="button" class="expand-all-btn px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 rounded hover:bg-gray-300 ml-1">–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ</button>
        `;
        actionsContainer.insertBefore(collapseControls, actionsContainer.firstChild);

        actionsContainer.querySelector('.collapse-all-btn').addEventListener('click', () => {
            editStepsContainerElement.querySelectorAll('.edit-step').forEach(step => toggleStepCollapse(step, true));
        });
        actionsContainer.querySelector('.expand-all-btn').addEventListener('click', () => {
            editStepsContainerElement.querySelectorAll('.edit-step').forEach(step => toggleStepCollapse(step, false));
        });
    }

    try {
        descriptionContainer.style.display = isMainAlgorithm ? 'none' : 'block';
        editModalTitle.textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${algorithm.title ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`;
        algorithmTitleInput.value = algorithm.title ?? '';
        if (!isMainAlgorithm) {
            algorithmDescriptionInput.value = algorithm.description ?? '';
        }
        editStepsContainerElement.innerHTML = '';

        if (!Array.isArray(algorithm.steps) || algorithm.steps.length === 0) {
            const message = isMainAlgorithm
                ? "–í –≥–ª–∞–≤–Ω–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–≥–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥."
                : "–£ —ç—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –µ—â–µ –Ω–µ—Ç —à–∞–≥–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥.";
            editStepsContainerElement.innerHTML = `<p class="text-gray-500 dark:text-gray-400 text-center p-4">${message}</p>`;
        } else {
            const fragment = document.createDocumentFragment();
            const stepPromises = algorithm.steps.map(async (step, index) => {
                if (!step || typeof step !== 'object') {
                    console.warn(`–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —à–∞–≥–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ ${index} –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã.`);
                    return null;
                }
                const stepDiv = document.createElement('div');
                stepDiv.className = 'edit-step p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-800 shadow-sm mb-4';
                stepDiv.dataset.stepIndex = index;
                if (step.type) { stepDiv.dataset.stepType = step.type; }

                stepDiv.innerHTML = createStepElementHTML(index + 1, isMainAlgorithm, !isMainAlgorithm);

                const titleInput = stepDiv.querySelector('.step-title');
                const titlePreview = stepDiv.querySelector('.step-title-preview');
                const descInput = stepDiv.querySelector('.step-desc');
                const exampleTextarea = stepDiv.querySelector('.step-example');
                const additionalInfoTextarea = stepDiv.querySelector('.step-additional-info');
                const additionalInfoPosTopCheckbox = stepDiv.querySelector('.step-additional-info-pos-top');
                const additionalInfoPosBottomCheckbox = stepDiv.querySelector('.step-additional-info-pos-bottom');
                const isCopyableCheckbox = stepDiv.querySelector('.step-is-copyable');
                const noInnHelpCheckbox = stepDiv.querySelector('.step-no-inn-help-checkbox');

                if (titleInput) {
                    titleInput.value = step.title ?? '';
                    if (titlePreview) {
                        const previewText = step.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';
                        titlePreview.textContent = previewText;
                    }
                    titleInput.addEventListener('input', () => {
                        if (titlePreview) {
                            const previewText = titleInput.value || `–®–∞–≥ ${index + 1}`;
                            titlePreview.textContent = previewText;
                        }
                    });
                }
                if (descInput) { descInput.value = step.description ?? ''; }
                if (exampleTextarea) { exampleTextarea.value = formatExampleForTextarea(step.example); }
                if (additionalInfoTextarea) { additionalInfoTextarea.value = step.additionalInfoText || ''; }
                if (additionalInfoPosTopCheckbox) { additionalInfoPosTopCheckbox.checked = step.additionalInfoShowTop || false; }
                if (additionalInfoPosBottomCheckbox) { additionalInfoPosBottomCheckbox.checked = step.additionalInfoShowBottom || false; }
                if (isMainAlgorithm && isCopyableCheckbox) { isCopyableCheckbox.checked = step.isCopyable || false; }

                if (isMainAlgorithm && noInnHelpCheckbox) {
                    noInnHelpCheckbox.checked = step.showNoInnHelp || false;
                }

                if (!isMainAlgorithm) {
                    const thumbsContainer = stepDiv.querySelector('#screenshotThumbnailsContainer');
                    if (thumbsContainer) {
                        const existingIds = Array.isArray(step.screenshotIds) ? step.screenshotIds.filter(id => id !== null && id !== undefined) : [];
                        stepDiv.dataset.existingScreenshotIds = existingIds.join(',');

                        if (existingIds.length > 0 && typeof renderExistingThumbnail === 'function') {
                            const renderPromises = existingIds.map(screenshotId =>
                                renderExistingThumbnail(screenshotId, thumbsContainer, stepDiv)
                                    .catch(err => console.error(`[editAlgorithm v9] –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã ID ${screenshotId}:`, err))
                            );
                            await Promise.allSettled(renderPromises);
                        }
                        stepDiv._tempScreenshotBlobs = [];
                        stepDiv.dataset.screenshotsToDelete = '';
                        if (typeof attachScreenshotHandlers === 'function') {
                            attachScreenshotHandlers(stepDiv);
                        }
                    }
                }

                const deleteStepBtn = stepDiv.querySelector('.delete-step');
                if (deleteStepBtn && typeof attachStepDeleteHandler === 'function') {
                    attachStepDeleteHandler(deleteStepBtn, stepDiv, editStepsContainerElement, section, 'edit', isMainAlgorithm);
                }

                if (index > 0) {
                    toggleStepCollapse(stepDiv, true);
                }
                return stepDiv;
            });
            const stepDivs = (await Promise.all(stepPromises)).filter(Boolean);
            stepDivs.forEach(div => fragment.appendChild(div));

            editStepsContainerElement.appendChild(fragment);
            updateStepNumbers(editStepsContainerElement);
        }

        editStepsContainerElement.querySelectorAll('.step-header').forEach(header => {
            header.addEventListener('click', (e) => {
                if (e.target.closest('.delete-step, .step-drag-handle')) return;
                toggleStepCollapse(header.closest('.edit-step'));
            });
        });

        initStepSorting(editStepsContainerElement);

        editModal.dataset.algorithmId = String(algorithm.id);
        editModal.dataset.section = section;
        captureInitialEditState(algorithm, section);

    } catch (error) {
        console.error("[editAlgorithm v9] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã:", error);
        showNotification("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", "error");
        if (editStepsContainerElement) editStepsContainerElement.innerHTML = '<p class="text-red-500 p-4 text-center">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º—É.</p>';
        if (saveAlgorithmBtn) saveAlgorithmBtn.disabled = true;
        initialEditState = null;
        return;
    }

    const algorithmModalView = document.getElementById('algorithmModal');
    if (algorithmModalView) { algorithmModalView.classList.add('hidden'); }
    openAnimatedModal(editModal);
    setTimeout(() => algorithmTitleInput.focus(), 50);
}


function initStepSorting(containerElement) {
    if (!containerElement) {
        console.error("initStepSorting: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.");
        return;
    }
    if (typeof Sortable === 'undefined') {
        console.error("SortableJS –Ω–µ –Ω–∞–π–¥–µ–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
        showNotification("–û—à–∏–±–∫–∞: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.", "error");
        return;
    }

    if (containerElement.sortableInstance) {
        try {
            containerElement.sortableInstance.destroy();
        } catch (e) {
            console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ SortableJS:", e);
        }
    }

    containerElement.sortableInstance = new Sortable(containerElement, {
        animation: 150,
        handle: '.step-drag-handle',
        ghostClass: 'sortable-ghost',
        chosenClass: 'sortable-chosen',
        dragClass: 'sortable-drag',

        onEnd: function (evt) {
            if (typeof updateStepNumbers === 'function') {
                updateStepNumbers(containerElement);
            } else {
                console.error("–§—É–Ω–∫—Ü–∏—è updateStepNumbers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }
            const modal = containerElement.closest('#editModal, #addModal');
            if (modal) {
                if (modal.id === 'editModal') {
                    isUISettingsDirty = true;
                } else if (modal.id === 'addModal') {
                    if (typeof hasChanges === 'function' && hasChanges('add')) {
                        console.log("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–∫–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è.");
                    }
                }
            }
        },
    });

    console.log(`SortableJS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ #${containerElement.id}`);
}


function addEditStep() {
    const containerId = 'editSteps';
    const editStepsContainer = document.getElementById(containerId);
    if (!editStepsContainer) {
        console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #editSteps –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–∞.");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —à–∞–≥–æ–≤.", "error");
        return;
    }
    const editModal = document.getElementById('editModal');
    if (!editModal) {
        console.error("–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è #editModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", "error");
        return;
    }

    const section = editModal.dataset.section;
    if (!section) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ–∫—Ü–∏—é –≤ addEditStep (dataset.section –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–∞.", "error");
        return;
    }

    const isMainAlgorithm = section === 'main';
    console.log(`addEditStep: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –≤ —Å–µ–∫—Ü–∏—é ${section} (isMainAlgorithm: ${isMainAlgorithm})`);

    const stepCount = editStepsContainer.children.length;
    const stepDiv = document.createElement('div');
    stepDiv.className = 'edit-step p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-800 shadow-sm mb-4';
    stepDiv.dataset.stepIndex = stepCount;

    stepDiv.innerHTML = createStepElementHTML(stepCount + 1, isMainAlgorithm, !isMainAlgorithm);

    const deleteBtn = stepDiv.querySelector('.delete-step');
    if (deleteBtn) {
        if (typeof attachStepDeleteHandler === 'function') {
            attachStepDeleteHandler(deleteBtn, stepDiv, editStepsContainer, section, 'edit', isMainAlgorithm);
        } else {
            console.error("–§—É–Ω–∫—Ü–∏—è attachStepDeleteHandler –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ addEditStep!");
            deleteBtn.disabled = true;
            deleteBtn.title = "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
        }
    } else {
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–≥–∞ –≤ addEditStep.");
    }

    if (!isMainAlgorithm) {
        if (typeof attachScreenshotHandlers === 'function') {
            attachScreenshotHandlers(stepDiv);
        } else {
            console.error("–§—É–Ω–∫—Ü–∏—è attachScreenshotHandlers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ addEditStep!");
        }
    } else {
        console.log("–°–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, attachScreenshotHandlers –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è.");
    }

    const placeholder = editStepsContainer.querySelector('p.text-gray-500');
    if (placeholder) {
        placeholder.remove();
    }

    editStepsContainer.appendChild(stepDiv);

    if (typeof updateStepNumbers === 'function') {
        updateStepNumbers(editStepsContainer);
    } else {
        console.error("–§—É–Ω–∫—Ü–∏—è updateStepNumbers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ addEditStep!");
    }

    stepDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    const newTitleInput = stepDiv.querySelector('.step-title');
    if (newTitleInput) {
        setTimeout(() => newTitleInput.focus(), 100);
    }
    console.log("–®–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ hasChanges('edit').");
}


async function saveAlgorithm() {
    const editModal = document.getElementById('editModal');
    const algorithmIdStr = editModal?.dataset.algorithmId;
    const section = editModal?.dataset.section;
    const algorithmTitleInput = document.getElementById('algorithmTitle');
    const algorithmDescriptionInput = document.getElementById('algorithmDescription');
    const editStepsContainer = document.getElementById('editSteps');
    const saveButton = document.getElementById('saveAlgorithmBtn');

    if (!editModal || !algorithmIdStr || !section || !algorithmTitleInput || !editStepsContainer || !saveButton) {
        console.error("saveAlgorithm v7 (TX Fix): Missing required elements.");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã.", "error");
        return;
    }
    const isMainAlgo = section === 'main';
    if (!isMainAlgo && !algorithmDescriptionInput) {
        console.error("saveAlgorithm v7 (TX Fix): Missing description input for non-main.");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è.", "error");
        return;
    }
    console.log(`[Save Algorithm v7 (TX Fix)] Start. ID: ${algorithmIdStr}, Section: ${section}`);

    const finalTitle = algorithmTitleInput.value.trim();
    const newDescription = (!isMainAlgo && algorithmDescriptionInput) ? algorithmDescriptionInput.value.trim() : undefined;
    if (!finalTitle) {
        showNotification("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", "warning");
        algorithmTitleInput.focus(); return;
    }

    saveButton.disabled = true;
    saveButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';

    const { steps: newStepsBase, screenshotOps, isValid } = extractStepsDataFromEditForm(editStepsContainer, isMainAlgo);

    if (!isValid) {
        if (isMainAlgo && newStepsBase.length === 0 && editStepsContainer.querySelectorAll('.edit-step').length > 0) {
            showNotification("–ì–ª–∞–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —à–∞–≥–∏. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ.", "warning");
        } else if (!isMainAlgo) {
            showNotification("–ê–ª–≥–æ—Ä–∏—Ç–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ–ø—É—Å—Ç–æ–π —à–∞–≥.", "warning");
        } else {
            console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –±–µ–∑ —à–∞–≥–æ–≤ (–¥–æ–ø—É—Å—Ç–∏–º–æ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–∞ –∏–ª–∏ –≤—Å–µ —É–¥–∞–ª–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ).");
        }
        if (!isMainAlgo || (isMainAlgo && newStepsBase.length === 0 && editStepsContainer.querySelectorAll('.edit-step').length > 0 && isValid === false)) {
            saveButton.disabled = false; saveButton.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'; return;
        }
    }
    console.log(`[Save Algorithm v7] –ò–∑–≤–ª–µ—á–µ–Ω–æ: ${newStepsBase.length} —à–∞–≥–æ–≤, ${screenshotOps.length} —Å–∫—Ä–∏–Ω—à–æ—Ç-–æ–ø–µ—Ä–∞—Ü–∏–π.`);

    let transaction;
    let updateSuccessful = false;
    let oldAlgorithmData = null;
    let finalAlgorithmData = null;
    const algorithmIdForRefs = isMainAlgo ? 'main' : algorithmIdStr;
    let finalSteps = JSON.parse(JSON.stringify(newStepsBase));

    try {
        if (isMainAlgo) {
            oldAlgorithmData = algorithms?.main ? JSON.parse(JSON.stringify(algorithms.main)) : null;
        } else if (algorithms?.[section]) {
            oldAlgorithmData = algorithms[section].find(a => String(a?.id) === String(algorithmIdStr)) || null;
            if (oldAlgorithmData) oldAlgorithmData = JSON.parse(JSON.stringify(oldAlgorithmData));
        }
        if (oldAlgorithmData) console.log("[Save Algorithm v7] –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã.");
        else console.warn(`[Save Algorithm v7] –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${section}/${algorithmIdStr}.`);
    } catch (e) { console.error("[Save Algorithm v7] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", e); }


    try {
        if (!db) throw new Error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
        transaction = db.transaction(['algorithms', 'screenshots'], 'readwrite');
        const screenshotsStore = transaction.objectStore('screenshots');
        const algorithmsStore = transaction.objectStore('algorithms');
        console.log("[Save Algorithm v7 TX] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞.");

        const screenshotOpPromises = [];

        if (!isMainAlgo) {
            screenshotOps.forEach(op => {
                screenshotOpPromises.push(new Promise((resolve, reject) => {
                    try {
                        if (op.action === 'delete' && op.oldScreenshotId !== null && op.oldScreenshotId !== undefined) {
                            const request = screenshotsStore.delete(op.oldScreenshotId);
                            request.onsuccess = () => {
                                console.log(`[Save Algorithm v7 TX] Deleted screenshot ID: ${op.oldScreenshotId}`);
                                resolve({ success: true, action: 'delete', oldId: op.oldScreenshotId, stepIndex: op.stepIndex });
                            };
                            request.onerror = (e) => {
                                const error = e.target.error || new Error('Delete screenshot failed');
                                console.error(`[Save Algorithm v7 TX] Error deleting screenshot ID ${op.oldScreenshotId}:`, error);
                                reject({ success: false, action: 'delete', oldId: op.oldScreenshotId, stepIndex: op.stepIndex, error });
                            };
                        } else if (op.action === 'add' && op.blob instanceof Blob && typeof op.stepIndex === 'number' && finalSteps[op.stepIndex]) {
                            const tempName = `${finalTitle}, –∏–∑–æ–±—Ä. ${Date.now() + Math.random()}`;
                            const record = { blob: op.blob, parentId: algorithmIdForRefs, parentType: 'algorithm', stepIndex: op.stepIndex, name: tempName, uploadedAt: new Date().toISOString() };
                            const request = screenshotsStore.add(record);
                            request.onsuccess = e_add => {
                                const newId = e_add.target.result;
                                console.log(`[Save Algorithm v7 TX] Added screenshot, new ID: ${newId} for step ${op.stepIndex}`);
                                if (!finalSteps[op.stepIndex].screenshotIds) finalSteps[op.stepIndex].screenshotIds = [];
                                finalSteps[op.stepIndex].screenshotIds.push(newId);
                                resolve({ success: true, action: 'add', newId, stepIndex: op.stepIndex });
                            };
                            request.onerror = e_add_err => {
                                const error = e_add_err.target.error || new Error('Add screenshot failed');
                                console.error(`[Save Algorithm v7 TX] Error adding screenshot for step ${op.stepIndex}:`, error);
                                reject({ success: false, action: 'add', stepIndex: op.stepIndex, error });
                            };
                        } else {
                            console.warn(`[Save Algorithm v7 TX] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º:`, op);
                            resolve({ success: true, action: 'skip', message: 'Invalid operation data' });
                        }
                    } catch (opError) {
                        console.error(`[Save Algorithm v7 TX] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º:`, opError);
                        reject({ success: false, action: op.action, error: opError });
                    }
                }));
            });

            if (screenshotOpPromises.length > 0) {
                const screenshotResults = await Promise.all(screenshotOpPromises);
                const failedScreenshotOps = screenshotResults.filter(r => !r.success);
                if (failedScreenshotOps.length > 0) {
                    console.error(`[Save Algorithm v7 TX] –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ (${failedScreenshotOps.length} —à—Ç.). –ü–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞:`, failedScreenshotOps[0].error);
                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã: ${failedScreenshotOps[0].error.message || '–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º'}`);
                }
                console.log("[Save Algorithm v7 TX] –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
            }
        }

        if (!isMainAlgo) {
            let existingIdsToKeepMap = {};
            if (oldAlgorithmData?.steps) {
                const deletedIdsFromOps = new Set(
                    screenshotOps.filter(op => op.action === 'delete').map(op => op.oldScreenshotId)
                );
                oldAlgorithmData.steps.forEach((step, index) => {
                    if (Array.isArray(step.screenshotIds)) {
                        existingIdsToKeepMap[index] = step.screenshotIds.filter(id => !deletedIdsFromOps.has(id));
                    }
                });
            }

            finalSteps = finalSteps.map((step, index) => {
                const existingKeptIds = existingIdsToKeepMap[index] || [];
                const newlyAddedIds = (step.screenshotIds || []).filter(id => typeof id === 'number');

                const finalIds = [...new Set([...existingKeptIds, ...newlyAddedIds])];

                if (finalIds.length > 0) {
                    step.screenshotIds = finalIds;
                } else {
                    delete step.screenshotIds;
                }
                delete step._tempScreenshotBlobs;
                delete step._screenshotsToDelete;
                delete step.existingScreenshotIds;
                delete step.tempScreenshotsCount;
                delete step.deletedScreenshotIds;
                return step;
            });
        }
        console.log("[Save Algorithm v7 TX] –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.");

        let targetAlgorithmObject;
        const timestamp = new Date().toISOString();
        if (isMainAlgo) {
            if (!algorithms.main) algorithms.main = { id: 'main' };
            algorithms.main.title = finalTitle;
            algorithms.main.steps = finalSteps;
            algorithms.main.dateUpdated = timestamp;
            if (!algorithms.main.dateAdded) algorithms.main.dateAdded = timestamp;
            targetAlgorithmObject = algorithms.main;
            const mainTitleElement = document.querySelector('#mainContent h2');
            if (mainTitleElement) mainTitleElement.textContent = finalTitle;
        } else {
            if (!algorithms[section]) algorithms[section] = [];
            const algorithmIndex = algorithms[section].findIndex(a => String(a?.id) === String(algorithmIdStr));

            const algoDataBase = {
                id: algorithmIdForRefs,
                title: finalTitle,
                description: newDescription,
                steps: finalSteps,
                section: section,
                dateUpdated: timestamp
            };

            if (algorithmIndex !== -1) {
                algorithms[section][algorithmIndex] = {
                    ...(algorithms[section][algorithmIndex] || {}),
                    ...algoDataBase,
                    dateAdded: algorithms[section][algorithmIndex]?.dateAdded || oldAlgorithmData?.dateAdded || timestamp
                };
                targetAlgorithmObject = algorithms[section][algorithmIndex];
            } else {
                console.warn(`[Save Algorithm v7 TX] –ê–ª–≥–æ—Ä–∏—Ç–º ${algorithmIdStr} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏ ${section} –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ).`);
                targetAlgorithmObject = { ...algoDataBase, dateAdded: timestamp };
                algorithms[section].push(targetAlgorithmObject);
            }
        }
        finalAlgorithmData = JSON.parse(JSON.stringify(targetAlgorithmObject));
        console.log(`[Save Algorithm v7 TX] –û–±—ä–µ–∫—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ${algorithmIdStr} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç–∏.`);

        const algorithmContainerToSave = { section: 'all', data: algorithms };
        console.log("[Save Algorithm v7 TX] –ó–∞–ø—Ä–æ—Å put –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'algorithms'...");
        const putAlgoReq = algorithmsStore.put(algorithmContainerToSave);

        await new Promise((resolve, reject) => {
            putAlgoReq.onerror = (e) => reject(e.target.error || new Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ algorithms"));
            transaction.oncomplete = () => {
                console.log("[Save Algorithm v7 TX] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (oncomplete).");
                updateSuccessful = true;
                resolve();
            };
            transaction.onerror = (e) => {
                console.error("[Save Algorithm v7 TX] –û–®–ò–ë–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (onerror):", e.target.error);
                updateSuccessful = false;
                reject(e.target.error || new Error("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"));
            };
            transaction.onabort = (e) => {
                console.warn("[Save Algorithm v7 TX] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ü–†–ï–†–í–ê–ù–ê (onabort):", e.target.error);
                updateSuccessful = false;
                reject(e.target.error || new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞"));
            };
        });

    } catch (error) {
        console.error(`[Save Algorithm v7 (Robust TX)] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è ${algorithmIdStr}:`, error);
        if (transaction && transaction.readyState !== 'done' && transaction.abort && !transaction.error) {
            try { transaction.abort(); console.log("[Save Algorithm v7] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ catch."); }
            catch (e) { console.error("[Save Algorithm v7] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ catch:", e); }
        }
        updateSuccessful = false;
        if (oldAlgorithmData && typeof algorithms === 'object' && algorithms !== null) {
            console.warn("[Save Algorithm v7] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 'algorithms' –≤ –ø–∞–º—è—Ç–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...");
            if (isMainAlgo) {
                algorithms.main = oldAlgorithmData;
            } else if (algorithms[section]) {
                const indexToRestore = algorithms[section].findIndex(a => String(a?.id) === String(algorithmIdStr));
                if (indexToRestore !== -1) {
                    algorithms[section][indexToRestore] = oldAlgorithmData;
                } else if (oldAlgorithmData.id) {
                    algorithms[section].push(oldAlgorithmData);
                    console.warn(`[Save Algorithm v7] –°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º ${algorithmIdStr} –¥–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–∞–º—è—Ç—å, —Ç.–∫. –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.`);
                }
            }
            console.log("[Save Algorithm v7] –°–æ—Å—Ç–æ—è–Ω–∏–µ 'algorithms' –≤ –ø–∞–º—è—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞).");
        }
        showNotification(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message || error}`, "error");
    } finally {
        if (saveButton) {
            saveButton.disabled = false;
            saveButton.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        }
    }

    if (updateSuccessful) {
        console.log(`[Save Algorithm v7 (Robust TX)] –ê–ª–≥–æ—Ä–∏—Ç–º ${algorithmIdStr} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
        if (typeof updateSearchIndex === 'function' && finalAlgorithmData?.id) {
            const indexId = isMainAlgo ? 'main' : finalAlgorithmData.id;
            updateSearchIndex('algorithms', indexId, finalAlgorithmData, 'update', oldAlgorithmData)
                .then(() => console.log(`[Save Algorithm v7] –ò–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${indexId}.`))
                .catch(indexError => console.error(`[Save Algorithm v7] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è ${indexId}:`, indexError));
        } else {
            console.warn(`[Save Algorithm v7] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å –¥–ª—è ${algorithmIdStr} (—Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç).`);
        }
        try {
            if (isMainAlgo && typeof renderMainAlgorithm === 'function') { await renderMainAlgorithm(); }
            else if (!isMainAlgo && typeof renderAlgorithmCards === 'function') { renderAlgorithmCards(section); }
        } catch (renderError) {
            console.error("[Save Algorithm v7] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", renderError);
        }
        showNotification("–ê–ª–≥–æ—Ä–∏—Ç–º —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.");
        initialEditState = null;
        if (editModal) editModal.classList.add('hidden');
        if (getVisibleModals().length === 0) {
            document.body.classList.remove('modal-open');
        }
    } else {
        console.error(`[Save Algorithm v7 (Robust TX)] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ${algorithmIdStr} –ù–ï –£–î–ê–õ–û–°–¨.`);
    }
}


function extractStepsDataFromEditForm(containerElement, isMainAlgorithm = false) {
    const parseExample = (val) => {
        if (!val) return undefined;
        const lines = val.split('\n').map(l => l.trim()).filter(l => l);
        if (lines.length === 0) return undefined;

        const startsWithMarker = /^\s*[-*+‚Ä¢]/.test(lines[0]);
        const isListStrict = lines.length > 1 && lines.slice(1).every(l => /^\s*[-*+‚Ä¢]/.test(l));
        const potentialIntro = (lines.length > 0 && !startsWithMarker) ? lines[0] : null;
        const isListLikely = startsWithMarker || (potentialIntro && isListStrict);

        if (isListLikely) {

            const items = (potentialIntro ? lines.slice(1) : lines)
                .map(l => l.replace(/^\s*[-*+‚Ä¢]\s*/, '').trim())
                .filter(item => item);

            if (items.length > 0) {
                const listExample = { type: 'list', items: items };
                if (potentialIntro) {
                    listExample.intro = potentialIntro;
                }
                return listExample;
            } else if (potentialIntro) {

                return potentialIntro;
            } else {

                return undefined;
            }
        }
        return val;
    };

    const stepsData = {
        steps: [],
        screenshotOps: [],
        isValid: true
    };

    if (!containerElement) {
        console.error("extractStepsDataFromEditForm: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω.");
        stepsData.isValid = false;
        return stepsData;
    }

    const stepDivs = containerElement.querySelectorAll('.edit-step');

    stepDivs.forEach((stepDiv, formIndex) => {
        const titleInput = stepDiv.querySelector('.step-title');
        const descInput = stepDiv.querySelector('.step-desc');
        const exampleInput = stepDiv.querySelector('.step-example');
        const additionalInfoInput = stepDiv.querySelector('.step-additional-info');
        const additionalInfoPosTopCheckbox = stepDiv.querySelector('.step-additional-info-pos-top');
        const additionalInfoPosBottomCheckbox = stepDiv.querySelector('.step-additional-info-pos-bottom');
        const isCopyableCheckbox = isMainAlgorithm ? stepDiv.querySelector('.step-is-copyable') : null;
        const noInnHelpCheckbox = isMainAlgorithm ? stepDiv.querySelector('.step-no-inn-help-checkbox') : null;

        const title = titleInput ? titleInput.value.trim() : '';
        const description = descInput ? descInput.value.trim() : '';
        const additionalInfoText = additionalInfoInput ? additionalInfoInput.value.trim() : '';
        const additionalInfoShowTop = additionalInfoPosTopCheckbox ? additionalInfoPosTopCheckbox.checked : false;
        const additionalInfoShowBottom = additionalInfoPosBottomCheckbox ? additionalInfoPosBottomCheckbox.checked : false;
        const isCopyable = isMainAlgorithm && isCopyableCheckbox ? isCopyableCheckbox.checked : undefined;
        const showNoInnHelp = isMainAlgorithm && noInnHelpCheckbox ? noInnHelpCheckbox.checked : undefined;

        if (!isMainAlgorithm && !title && !description && !additionalInfoText) {
            const hasTempScreenshots = stepDiv._tempScreenshotBlobs && Array.isArray(stepDiv._tempScreenshotBlobs) && stepDiv._tempScreenshotBlobs.length > 0;
            const hasExistingScreenshots = stepDiv.dataset.existingScreenshotIds && stepDiv.dataset.existingScreenshotIds.split(',').filter(Boolean).length > 0;
            const hasPendingDeletions = stepDiv.dataset.screenshotsToDelete && stepDiv.dataset.screenshotsToDelete.split(',').filter(Boolean).length > 0;

            if (!hasTempScreenshots && !hasExistingScreenshots && !hasPendingDeletions) {
                console.warn(`–ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç–æ–≥–æ —à–∞–≥–∞ (–∏–Ω–¥–µ–∫—Å –≤ —Ñ–æ—Ä–º–µ ${formIndex + 1}) –¥–ª—è –Ω–µ-–≥–ª–∞–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.`);
                return;
            }
        }

        const stepIndexForOps = stepsData.steps.length;

        const step = {
            title,
            description,
            additionalInfoText,
            additionalInfoShowTop,
            additionalInfoShowBottom
        };

        if (isMainAlgorithm) {
            if (isCopyable !== undefined) step.isCopyable = isCopyable;
            if (showNoInnHelp !== undefined) step.showNoInnHelp = showNoInnHelp;
        }


        if (isMainAlgorithm && exampleInput) {
            const exampleValue = exampleInput.value.trim();
            const parsedExample = parseExample(exampleValue);
            if (parsedExample !== undefined) {
                step.example = parsedExample;
            }
        } else if (!isMainAlgorithm) {

            delete step.example;
        }


        if (stepDiv.dataset.stepType) {
            step.type = stepDiv.dataset.stepType;
        }

        if (!isMainAlgorithm) {

            if (stepDiv._tempScreenshotBlobs && Array.isArray(stepDiv._tempScreenshotBlobs)) {
                stepDiv._tempScreenshotBlobs.forEach((blobInfo, blobIndex) => {
                    if (blobInfo instanceof Blob) {
                        stepsData.screenshotOps.push({
                            stepIndex: stepIndexForOps,
                            action: 'add',
                            blob: blobInfo,
                            oldScreenshotId: null
                        });
                    } else {
                        console.warn(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ-Blob —ç–ª–µ–º–µ–Ω—Ç –≤ _tempScreenshotBlobs —à–∞–≥–∞ ${formIndex}, blobIndex ${blobIndex}:`, blobInfo);
                    }
                });
            }

            const idsToDeleteStr = stepDiv.dataset.screenshotsToDelete;
            if (idsToDeleteStr) {
                const idsToDelete = idsToDeleteStr.split(',')
                    .map(idStr => parseInt(idStr.trim(), 10))
                    .filter(idNum => !isNaN(idNum));

                idsToDelete.forEach(idToDelete => {
                    stepsData.screenshotOps.push({
                        stepIndex: stepIndexForOps,
                        action: 'delete',
                        blob: null,
                        oldScreenshotId: idToDelete
                    });
                });
            }

        }
        stepsData.steps.push(step);
    });

    if (!isMainAlgorithm && stepsData.steps.length === 0) {
        stepsData.isValid = false;
    }
    return stepsData;
}


function getSectionName(section) {
    switch (section) {
        case 'program': return '–ü—Ä–æ–≥—Ä–∞–º–º–∞ 1–°/–£–ü';
        case 'skzi': return '–°–ö–ó–ò';
        case 'lk1c': return '1–°–û –õ–ö';
        case 'webReg': return '–í–µ–±-–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
        default: return '–û—Å–Ω–æ–≤–Ω–æ–π';
    }
}


function addNewStep(isFirstStep = false) {
    const containerId = 'newSteps';
    const newStepsContainer = document.getElementById(containerId);
    if (!newStepsContainer) {
        console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #newSteps –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–∞.");
        return;
    }
    const addModal = document.getElementById('addModal');
    const section = addModal?.dataset.section;
    if (!section) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ–∫—Ü–∏—é –≤ addNewStep.");
        return;
    }

    const stepCount = newStepsContainer.children.length;

    const placeholder = newStepsContainer.querySelector('p.text-gray-500');
    if (placeholder) {
        placeholder.remove();
    }

    const stepDiv = document.createElement('div');
    stepDiv.className = 'edit-step p-4 border border-gray-200 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 shadow-sm mb-4';
    stepDiv.innerHTML = createStepElementHTML(stepCount + 1, false, true);
    stepDiv.dataset.stepIndex = stepCount;

    const header = stepDiv.querySelector('.step-header');
    if (header) {
        header.addEventListener('click', (e) => {
            if (e.target.closest('.delete-step, .step-drag-handle')) return;
            toggleStepCollapse(stepDiv);
        });
    }

    const titleInput = stepDiv.querySelector('.step-title');
    const titlePreview = stepDiv.querySelector('.step-title-preview');
    if (titleInput && titlePreview) {
        titlePreview.textContent = "–ù–æ–≤—ã–π —à–∞–≥";
        titleInput.addEventListener('input', () => {
            titlePreview.textContent = titleInput.value || "–ù–æ–≤—ã–π —à–∞–≥";
        });
    }

    const deleteBtn = stepDiv.querySelector('.delete-step');
    if (deleteBtn) {
        attachStepDeleteHandler(deleteBtn, stepDiv, newStepsContainer, section, 'add', false);
    }

    if (typeof attachScreenshotHandlers === 'function') {
        attachScreenshotHandlers(stepDiv);
    }

    if (!isFirstStep) {
        toggleStepCollapse(stepDiv, true);
    } else {
        toggleStepCollapse(stepDiv, false);
    }

    newStepsContainer.appendChild(stepDiv);

    updateStepNumbers(newStepsContainer);

    if (!isFirstStep) {
        stepDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    } else if (titleInput) {
        titleInput.focus();
    }

    console.log(`addNewStep (v2): –î–æ–±–∞–≤–ª–µ–Ω —à–∞–≥ ${stepCount + 1} –≤ —Å–µ–∫—Ü–∏—é ${section}.`);
}


function toggleStepCollapse(stepElement, forceCollapse) {
    if (!stepElement) {
        console.warn('toggleStepCollapse: stepElement –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.');
        return;
    }
    if (typeof forceCollapse === 'boolean') {
        stepElement.classList.toggle('is-collapsed', forceCollapse);
    } else {
        stepElement.classList.toggle('is-collapsed');
    }
}


function attachScreenshotHandlers(stepElement) {
    const addBtn = stepElement.querySelector('.add-screenshot-btn');
    const fileInput = stepElement.querySelector('.screenshot-input');
    const thumbnailsContainer = stepElement.querySelector('#screenshotThumbnailsContainer');

    if (!addBtn || !fileInput || !thumbnailsContainer) {
        console.warn("attachScreenshotHandlers: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –≤ —à–∞–≥–µ:", stepElement);
        return;
    }

    if (!stepElement._tempScreenshotBlobs) {
        stepElement._tempScreenshotBlobs = [];
    }
    if (stepElement.dataset.screenshotsToDelete === undefined) {
        stepElement.dataset.screenshotsToDelete = '';
    }

    const addBlobToStep = async (blob) => {
        if (!Array.isArray(stepElement._tempScreenshotBlobs)) { stepElement._tempScreenshotBlobs = []; }
        try {
            const processedBlob = await processImageFile(blob);
            if (!processedBlob) throw new Error("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.");

            const tempIndex = stepElement._tempScreenshotBlobs.length;
            stepElement._tempScreenshotBlobs.push(processedBlob);

            renderTemporaryThumbnail(processedBlob, tempIndex, thumbnailsContainer, stepElement);

            console.log(`–í—Ä–µ–º–µ–Ω–Ω—ã–π Blob (–∏–Ω–¥–µ–∫—Å ${tempIndex}) –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–∞.`);
            if (typeof isUISettingsDirty !== 'undefined') { isUISettingsDirty = true; } else if (typeof isDirty !== 'undefined') { isDirty = true; }
            else { console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π (isUISettingsDirty/isDirty –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)."); }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Blob –≤ addBlobToStep:", error);
            showNotification(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, "error");
        }
    };

    if (!addBtn.dataset.listenerAttached) {
        addBtn.addEventListener('click', () => { fileInput.click(); });
        addBtn.dataset.listenerAttached = 'true';
    }
    if (!fileInput.dataset.listenerAttached) {
        fileInput.addEventListener('change', (event) => {
            const files = event.target.files;
            if (files && files.length > 0) {
                Array.from(files).forEach(file => { handleImageFileForStepProcessing(file, addBlobToStep, addBtn); });
            }
            event.target.value = null;
        });
        fileInput.dataset.listenerAttached = 'true';
    }
    if (!stepElement.dataset.pasteListenerAttached) {
        stepElement.addEventListener('paste', (event) => {
            const items = event.clipboardData?.items;
            if (!items) return;
            let imageFile = null;
            for (let i = 0; i < items.length; i++) { if (items[i].kind === 'file' && items[i].type.startsWith('image/')) { imageFile = items[i].getAsFile(); break; } }
            if (imageFile) { event.preventDefault(); handleImageFileForStepProcessing(imageFile, addBlobToStep, addBtn); }
        });
        stepElement.dataset.pasteListenerAttached = 'true';
    }

    console.log(`–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è *–Ω–æ–≤—ã—Ö* —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —à–∞–≥–∞ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: #${thumbnailsContainer?.id || '?'}). Drag&Drop –æ—Ç–∫–ª—é—á–µ–Ω.`);
}


function renderTemporaryThumbnail(blob, tempIndex, container, stepEl) {
    if (!container || !stepEl) {
        console.error("[renderTemporaryThumbnail] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç (stepEl) –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.");
        return;
    }
    const thumbDiv = document.createElement('div');
    thumbDiv.className = 'relative w-16 h-12 group border-2 border-dashed border-green-500 dark:border-green-400 rounded overflow-hidden shadow-sm screenshot-thumbnail temporary';
    thumbDiv.dataset.tempIndex = tempIndex;
    const img = document.createElement('img');
    img.className = 'w-full h-full object-contain bg-gray-200 dark:bg-gray-600';
    img.alt = `–ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç ${tempIndex + 1}`;
    let objectURL = null;

    try {
        objectURL = URL.createObjectURL(blob);
        img.dataset.objectUrl = objectURL;
        console.log(`[renderTemporaryThumbnail] –°–æ–∑–¥–∞–Ω Object URL –¥–ª—è temp ${tempIndex}: ${objectURL}`);

        img.onload = () => {
            console.log(`[renderTemporaryThumbnail] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (temp ${tempIndex}) –∑–∞–≥—Ä—É–∂–µ–Ω–æ.`);
            img.dataset.objectUrlRevoked = 'false';
        };

        img.onerror = () => {
            console.error(`[renderTemporaryThumbnail] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (temp ${tempIndex}). URL: ${objectURL}`);
            img.alt = "–û—à–∏–±–∫–∞";
            if (img.dataset.objectUrl && img.dataset.objectUrlRevoked !== 'true') {
                try {
                    URL.revokeObjectURL(img.dataset.objectUrl);
                    console.log(`[renderTemporaryThumbnail] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω URL –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏: ${img.dataset.objectUrl}`);
                    img.dataset.objectUrlRevoked = 'true';
                } catch (e) {
                    console.warn("–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è URL –ø—Ä–∏ onerror:", e);
                }
                delete img.dataset.objectUrl;
            }
        };
        img.src = objectURL;

    } catch (e) {
        console.error(`[renderTemporaryThumbnail] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Object URL –¥–ª—è temp ${tempIndex}:`, e);
        img.alt = "–û—à–∏–±–∫–∞ URL";
        if (objectURL) {
            try { URL.revokeObjectURL(objectURL); } catch (revokeError) { console.warn("–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è URL –ø—Ä–∏ catch:", revokeError); }
            objectURL = null;
        }
    }

    const deleteBtn = document.createElement('button');
    deleteBtn.type = 'button';
    deleteBtn.className = 'absolute top-0 right-0 bg-red-600 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs leading-none opacity-0 group-hover:opacity-100 transition-opacity -mt-1 -mr-1 z-10 focus:outline-none focus:ring-1 focus:ring-white delete-temp-screenshot-btn';
    deleteBtn.title = '–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç';
    deleteBtn.innerHTML = '<i class="fas fa-times"></i>';

    deleteBtn.onclick = (e) => {
        e.stopPropagation();
        const indexToRemove = parseInt(thumbDiv.dataset.tempIndex, 10);
        if (!isNaN(indexToRemove) && stepEl._tempScreenshotBlobs && stepEl._tempScreenshotBlobs[indexToRemove] !== undefined) {
            stepEl._tempScreenshotBlobs.splice(indexToRemove, 1);
            console.log(`–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å tempIndex ${indexToRemove} –∏–∑ –º–∞—Å—Å–∏–≤–∞.`);

            const urlToRevoke = img.dataset.objectUrl;
            if (urlToRevoke && img.dataset.objectUrlRevoked !== 'true') {
                try {
                    URL.revokeObjectURL(urlToRevoke);
                    console.log(`[renderTemporaryThumbnail - deleteBtn] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω URL ${urlToRevoke}`);
                } catch (revokeError) {
                    console.warn("–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è URL –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–∏–Ω–∏–∞—Ç—é—Ä—ã:", revokeError);
                }
            }

            thumbDiv.remove();

            container.querySelectorAll('div.temporary[data-temp-index]').forEach((remainingThumb, newIndex) => {
                remainingThumb.dataset.tempIndex = newIndex;
            });

            if (typeof isUISettingsDirty !== 'undefined') { isUISettingsDirty = true; }
            else if (typeof isDirty !== 'undefined') { isDirty = true; }

        } else {
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç, –∏–Ω–¥–µ–∫—Å ${indexToRemove} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω.`);
            if (thumbDiv.parentNode === container) {
                thumbDiv.remove();
            }
        }
    };
    thumbDiv.appendChild(img);
    thumbDiv.appendChild(deleteBtn);
    container.appendChild(thumbDiv);
}


async function handleImageFileForStepProcessing(fileOrBlob, addCallback, buttonElement = null) {
    if (!(fileOrBlob instanceof Blob)) {
        console.error("handleImageFileForStepProcessing: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª–æ–º –∏–ª–∏ Blob.");
        if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.", "error");
        return;
    }
    if (typeof addCallback !== 'function') {
        console.error("handleImageFileForStepProcessing: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π addCallback.");
        if (typeof showNotification === 'function') showNotification("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞.", "error");
        return;
    }
    if (!fileOrBlob.type.startsWith('image/')) {
        console.warn(`handleImageFileForStepProcessing: –¢–∏–ø —Ñ–∞–π–ª–∞ '${fileOrBlob.type}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–µ—Ç –Ω–µ —É–¥–∞—Å—Ç—å—Å—è.`);
        if (typeof showNotification === 'function') showNotification("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.", "warning");
    }

    let originalButtonHTML = null;
    let wasButtonDisabled = false;

    if (buttonElement instanceof HTMLElement) {
        originalButtonHTML = buttonElement.innerHTML;
        wasButtonDisabled = buttonElement.disabled;
        buttonElement.disabled = true;
        buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> –û–±—Ä–∞–±–æ—Ç–∫–∞...';
        console.log(`[handleImageFileProcessing] –ö–Ω–æ–ø–∫–∞ ${buttonElement.className} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏–Ω–Ω–µ—Ä.`);
    }

    try {
        console.log("[handleImageFileProcessing] –í—ã–∑–æ–≤ addCallback...");
        await addCallback(fileOrBlob);
        console.log("[handleImageFileProcessing] addCallback —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.");

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ addCallback –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
        if (typeof showNotification === 'function') {
            showNotification(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, "error");
        }
    } finally {
        if (buttonElement instanceof HTMLElement) {
            buttonElement.disabled = wasButtonDisabled;
            buttonElement.innerHTML = originalButtonHTML;
            console.log(`[handleImageFileProcessing] –ö–Ω–æ–ø–∫–∞ ${buttonElement.className} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, HTML –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
        }
    }
}


function renderScreenshotIcon(algorithmId, stepIndex, hasScreenshots = false) {
    const safeAlgorithmId = typeof algorithmId === 'string' || typeof algorithmId === 'number' ? String(algorithmId).replace(/"/g, '') : 'unknown';
    const safeStepIndex = typeof stepIndex === 'number' ? String(stepIndex).replace(/"/g, '') : 'unknown';

    if (safeAlgorithmId === 'unknown' || safeStepIndex === 'unknown') {
        console.warn(`renderScreenshotIcon: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ ID –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (${algorithmId}) –∏–ª–∏ –∏–Ω–¥–µ–∫—Å —à–∞–≥–∞ (${stepIndex}). –ö–Ω–æ–ø–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`);
        return '';
    }

    const isDisabled = !hasScreenshots;
    const titleAttributeText = isDisabled ? "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞" : "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞";
    const iconHtml = '<i class="fas fa-images mr-1"></i>';
    const buttonText = "–í–∏–∑—É–∞–ª—å–Ω—ã–µ —à–∞–≥–∏";
    const disabledClasses = isDisabled
        ? 'opacity-50 cursor-not-allowed bg-gray-100 dark:bg-gray-700 text-gray-400 dark:text-gray-500 border-gray-200 dark:border-gray-600'
        : 'hover:text-blue-800 dark:hover:text-blue-300 hover:bg-blue-200 dark:hover:bg-blue-800/60 bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-400 border-blue-200 dark:border-blue-700';

    const buttonClasses = `
                                    view-screenshot-btn
                                    ml-2 px-2 py-1
                                    text-sm font-medium
                                    rounded-md border
                                    transition-colors duration-150 ease-in-out
                                    inline-flex items-center align-middle
                                    focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-blue-500
                                    ${disabledClasses}
                                `;

    return `
                    <button type="button"
                            class="${buttonClasses.replace(/\s+/g, ' ').trim()}"
                            data-algorithm-id="${safeAlgorithmId}"
                            data-step-index="${safeStepIndex}"
                            title="${titleAttributeText}"
                            ${isDisabled ? 'disabled' : ''}>
                        ${iconHtml}
                        <span>${buttonText}</span>
                    </button>
                `;
}


let notificationPermissionState = null;
let timerInterval = null;
const timerDefaultDuration = 110;
let timerCurrentSetDuration = timerDefaultDuration;
let targetEndTime = 0;
let timeLeftVisual = timerDefaultDuration;
let isTimerRunning = false;
let originalDocumentTitle = "";
const TIMER_STATE_KEY = 'appTimerStateCopilot1CO_v2';

let timerDisplayElement, timerToggleButton, timerResetButton, timerIncreaseButton, timerDecreaseButton;
let timerToggleIcon;

async function requestAppNotificationPermission() {
    if (!("Notification" in window)) {
        console.warn("–≠—Ç–æ—Ç –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
        notificationPermissionState = 'denied';
        return false;
    }

    const currentBrowserPermission = Notification.permission;
    console.log(`requestAppNotificationPermission: –¢–µ–∫—É—â–µ–µ Notification.permission = '${currentBrowserPermission}'`);

    if (currentBrowserPermission === "granted") {
        console.log("requestAppNotificationPermission: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.");
        if (notificationPermissionState !== "granted") {
            notificationPermissionState = "granted";
        }
        return true;
    }

    if (currentBrowserPermission === "denied") {
        console.log("requestAppNotificationPermission: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–æ —Ä–∞–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –±—Ä–∞—É–∑–µ—Ä–æ–º.");
        if (notificationPermissionState !== "denied") {
            notificationPermissionState = "denied";
        }
        return false;
    }

    console.log("requestAppNotificationPermission: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Notification.requestPermission)...");
    try {
        const permissionResult = await Notification.requestPermission();
        console.log(`requestAppNotificationPermission: –†–µ–∑—É–ª—å—Ç–∞—Ç Notification.requestPermission() = '${permissionResult}'`);
        notificationPermissionState = permissionResult;

        if (permissionResult === "granted") {
            console.log("requestAppNotificationPermission: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.");
            return true;
        } else if (permissionResult === "denied") {
            console.log("requestAppNotificationPermission: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å.");
            return false;
        } else {
            console.log("requestAppNotificationPermission: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–ª—Å—è 'default'.");
            return false;
        }
    } catch (error) {
        console.error("requestAppNotificationPermission: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Notification.requestPermission():", error);
        notificationPermissionState = 'denied';
        return false;
    }
}


function showAppNotification(title, body) {
    if (!("Notification" in window)) {
        console.warn("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ –±—Ä–∞—É–∑–µ—Ä –∏—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è alert.");
        const alertMessage = body ? `${title}\n${body}` : title;
        alert(alertMessage);
        return;
    }

    const currentBrowserPermission = Notification.permission;
    if (notificationPermissionState !== currentBrowserPermission) {
        console.log(`showAppNotification: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è notificationPermissionState. –°—Ç–∞—Ä–æ–µ: '${notificationPermissionState}', –ù–æ–≤–æ–µ (–∏–∑ Notification.permission): '${currentBrowserPermission}'.`);
        notificationPermissionState = currentBrowserPermission;
    }

    if (notificationPermissionState === "granted") {
        try {
            const iconLink = document.querySelector('link[rel="icon"]');
            const notificationOptions = {
                body: body || "",
                silent: true,
                requireInteraction: true
            };

            let iconUsedInThisAttempt = false;
            if (iconLink && iconLink.href) {
                try {
                    const fullIconUrl = new URL(iconLink.href, window.location.origin).href;
                    notificationOptions.icon = fullIconUrl;
                    iconUsedInThisAttempt = true;
                    console.log("–ò–∫–æ–Ω–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:", fullIconUrl);
                } catch (e) {
                    console.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∫–æ–Ω–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –±–µ–∑ –∏–∫–æ–Ω–∫–∏:", iconLink.href, e);
                }
            } else {
                console.log("–ò–∫–æ–Ω–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –±–µ–∑ –∏–∫–æ–Ω–∫–∏.");
            }

            console.log("showAppNotification: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –æ–ø—Ü–∏—è–º–∏:", JSON.stringify(notificationOptions));
            const notification = new Notification(title, notificationOptions);

            notification.onclick = () => {
                window.focus();
                notification.close();
                console.log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ –∏ –∑–∞–∫—Ä—ã—Ç–æ, —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–µ.");
            };

            notification.onshow = () => {
                console.log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ü–û–ö–ê–ó–ê–ù–û —Å–∏—Å—Ç–µ–º–æ–π:", title);
            };

            notification.onerror = (err) => {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π (–ø–µ—Ä–≤–∏—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞):", err);
                if (err && typeof err.message !== 'undefined') console.error("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–ø–µ—Ä–≤–∏—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞): ", err.message);
                if (err && typeof err.name !== 'undefined') console.error("–ò–º—è –æ—à–∏–±–∫–∏ (–ø–µ—Ä–≤–∏—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞): ", err.name);
                console.log("–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ (–ø–µ—Ä–≤–∏—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞):");
                console.dir(err);

                if (iconUsedInThisAttempt) {
                    console.warn("–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏–∫–æ–Ω–∫–æ–π. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ë–ï–ó –ò–ö–û–ù–ö–ò...");
                    const fallbackOptions = { ...notificationOptions };
                    delete fallbackOptions.icon;
                    console.log("showAppNotification: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–µ–∑ –∏–∫–æ–Ω–∫–∏) —Å –æ–ø—Ü–∏—è–º–∏:", JSON.stringify(fallbackOptions));

                    try {
                        const fallbackNotification = new Notification(title, fallbackOptions);
                        fallbackNotification.onclick = () => { window.focus(); fallbackNotification.close(); console.log("–†–µ–∑–µ—Ä–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–µ–∑ –∏–∫–æ–Ω–∫–∏) –Ω–∞–∂–∞—Ç–æ –∏ –∑–∞–∫—Ä—ã—Ç–æ."); };
                        fallbackNotification.onshow = () => { console.log("–†–µ–∑–µ—Ä–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–µ–∑ –∏–∫–æ–Ω–∫–∏) —É—Å–ø–µ—à–Ω–æ –ü–û–ö–ê–ó–ê–ù–û —Å–∏—Å—Ç–µ–º–æ–π:", title); };
                        fallbackNotification.onerror = (e2) => {
                            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –†–ï–ó–ï–†–í–ù–û–ì–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–±–µ–∑ –∏–∫–æ–Ω–∫–∏):", e2);
                            if (e2 && typeof e2.message !== 'undefined') console.error("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ): ", e2.message);
                            if (e2 && typeof e2.name !== 'undefined') console.error("–ò–º—è –æ—à–∏–±–∫–∏ (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ): ", e2.name);
                            console.log("–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ):");
                            console.dir(e2);

                            showNotification(
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–∞–∂–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –±–µ–∑ –∏–∫–æ–Ω–∫–∏). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –û–° (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –≤–Ω–∏–º–∞–Ω–∏—è' –≤ Windows).",
                                "error",
                                12000
                            );
                            const alertMessageError = body ? `${title}\n${body}\n(–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)` : `${title}\n(–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)`;
                            alert(alertMessageError);
                        };
                        console.log("–†–µ–∑–µ—Ä–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–µ–∑ –∏–∫–æ–Ω–∫–∏) —Å–æ–∑–¥–∞–Ω–æ. –û–∂–∏–¥–∞–Ω–∏–µ onshow/onerror...");
                        return;
                    } catch (e2_create) {
                        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –°–û–ó–î–ê–ù–ò–ò –†–ï–ó–ï–†–í–ù–û–ì–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–±–µ–∑ –∏–∫–æ–Ω–∫–∏):", e2_create);
                    }
                }

                console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ª–∏–±–æ –ø–µ—Ä–≤–∏—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ –∏–∫–æ–Ω–∫–∏, –ª–∏–±–æ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ alert.");
                showNotification(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –≤–Ω–∏–º–∞–Ω–∏—è' –≤ Windows –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π).",
                    "error",
                    10000
                );
                const alertMessageError = body ? `${title}\n${body}\n(–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)` : `${title}\n(–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)`;
                alert(alertMessageError);
            };

            console.log("–û–±—ä–µ–∫—Ç Notification —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (–æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞):", title);

        } catch (e_create) {
            console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –°–û–ó–î–ê–ù–ò–ò –æ–±—ä–µ–∫—Ç–∞ Notification (–æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞):", e_create);
            showNotification(
                `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${e_create.message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.`,
                "error",
                8000
            );
            const alertMessageCatch = body ? `${title}\n${body}` : title;
            alert(alertMessageCatch);
        }
    } else if (notificationPermissionState === "denied") {
        const alertMessage = body ? `${title}\n${body}` : title;
        console.warn(`–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã (—Å—Ç–∞—Ç—É—Å: ${notificationPermissionState}). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è alert: ${alertMessage}`);
        alert(alertMessage);
        showNotification(
            "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∞—Ç—å, –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (–æ–±—ã—á–Ω–æ, –∫–ª–∏–∫ –ø–æ –∑–∞–º–∫—É –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ) –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows (—Ä–∞–∑–¥–µ–ª '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è', '–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –≤–Ω–∏–º–∞–Ω–∏—è').",
            "warning",
            10000
        );
    } else {
        const alertMessage = body ? `${title}\n${body}` : title;
        console.warn(`–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ (—Å—Ç–∞—Ç—É—Å: ${notificationPermissionState}). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è alert: ${alertMessage}`);
        alert(alertMessage);
        showNotification(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –∏—Ö –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –∑–∞–ø—Ä–æ—Å–µ –±—Ä–∞—É–∑–µ—Ä–∞. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows.",
            "info",
            10000
        );
    }
}


function saveTimerState() {
    try {
        const timerState = {
            timerCurrentSetDuration,
            isTimerRunning,
            targetEndTime: isTimerRunning ? targetEndTime : null,
            timeLeftVisualOnPause: !isTimerRunning ? timeLeftVisual : null
        };
        localStorage.setItem(TIMER_STATE_KEY, JSON.stringify(timerState));
        console.log("Timer state saved:", timerState);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –≤ localStorage:", error);
    }
}


function loadTimerState() {
    try {
        const savedStateJSON = localStorage.getItem(TIMER_STATE_KEY);
        if (savedStateJSON) {
            const savedState = JSON.parse(savedStateJSON);
            console.log("Loaded timer state from localStorage:", savedState);

            timerCurrentSetDuration = (typeof savedState.timerCurrentSetDuration === 'number' && savedState.timerCurrentSetDuration >= 0)
                ? savedState.timerCurrentSetDuration
                : timerDefaultDuration;

            isTimerRunning = (typeof savedState.isTimerRunning === 'boolean') ? savedState.isTimerRunning : false;

            if (isTimerRunning && typeof savedState.targetEndTime === 'number' && savedState.targetEndTime > 0) {
                targetEndTime = savedState.targetEndTime;
                const now = Date.now();
                timeLeftVisual = Math.max(0, Math.round((targetEndTime - now) / 1000));
                if (timeLeftVisual === 0) {
                    isTimerRunning = false;
                }
            } else {
                isTimerRunning = false;
                targetEndTime = 0;
                timeLeftVisual = (typeof savedState.timeLeftVisualOnPause === 'number' && savedState.timeLeftVisualOnPause >= 0)
                    ? savedState.timeLeftVisualOnPause
                    : timerCurrentSetDuration;
            }
            if (timeLeftVisual <= 0 && isTimerRunning && savedState.targetEndTime > 0) {
                console.log("–¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫ –≤–æ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è, –≤—ã–∑—ã–≤–∞–µ–º handleTimerEnd.");
                isTimerRunning = false;
            } else if (timeLeftVisual <= 0 && !isTimerRunning) {
                timeLeftVisual = timerCurrentSetDuration;
            }


        } else {
            console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
            timerCurrentSetDuration = timerDefaultDuration;
            timeLeftVisual = timerCurrentSetDuration;
            isTimerRunning = false;
            targetEndTime = 0;
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –∏–∑ localStorage:", error);
        timerCurrentSetDuration = timerDefaultDuration;
        timeLeftVisual = timerCurrentSetDuration;
        isTimerRunning = false;
        targetEndTime = 0;
    }
    updateTimerDisplay();
}


function handleTimerEnd() {
    isTimerRunning = false;
    if (timerInterval) clearInterval(timerInterval);
    timerInterval = null;

    timeLeftVisual = 0;

    showAppNotification("–í–ï–†–ù–ò–°–¨ –ö –ö–õ–ò–ï–ù–¢–£!");
    if (originalDocumentTitle) {
        document.title = "‚è∞ –í–†–ï–ú–Ø! - " + originalDocumentTitle;
    } else {
        const currentTitle = document.title;
        if (!currentTitle.startsWith("‚è∞ –í–†–ï–ú–Ø! - ")) {
            document.title = "‚è∞ –í–†–ï–ú–Ø! - " + currentTitle;
        }
    }
    updateTimerDisplay();
    saveTimerState();
    console.log("–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.");
}


function startTimerInternal() {
    if (timerInterval) clearInterval(timerInterval);

    if (targetEndTime <= Date.now() && timeLeftVisual > 0) {
        targetEndTime = Date.now() + timeLeftVisual * 1000;
        console.log(`–¢–∞–π–º–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è/–≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è. –ù–æ–≤–æ–µ targetEndTime: ${new Date(targetEndTime).toLocaleTimeString()}`);
    } else if (timeLeftVisual <= 0) {
        console.log("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Å –Ω—É–ª–µ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º. –í—ã–∑–æ–≤ handleTimerEnd.");
        handleTimerEnd();
        return;
    }

    isTimerRunning = true;

    timerInterval = setInterval(() => {
        const now = Date.now();
        const newTimeLeftVisual = Math.max(0, Math.round((targetEndTime - now) / 1000));

        if (newTimeLeftVisual !== timeLeftVisual) {
            timeLeftVisual = newTimeLeftVisual;
            updateTimerDisplay();
        }

        if (timeLeftVisual <= 0) {
            handleTimerEnd();
        }
        saveTimerState();

    }, 1000);

    const initialTimeLeft = Math.max(0, Math.round((targetEndTime - Date.now()) / 1000));
    if (initialTimeLeft !== timeLeftVisual) {
        timeLeftVisual = initialTimeLeft;
    }
    updateTimerDisplay();
    saveTimerState();
    console.log("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª). targetEndTime:", new Date(targetEndTime).toLocaleTimeString());
}


function pauseTimer() {
    if (!isTimerRunning) return;
    isTimerRunning = false;
    if (timerInterval) clearInterval(timerInterval);
    timerInterval = null;

    updateTimerDisplay();
    saveTimerState();
    console.log("–¢–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", timeLeftVisual);
}


async function toggleTimer() {
    if (isTimerRunning) {
        console.log("toggleTimer: –ü–∞—É–∑–∞ —Ç–∞–π–º–µ—Ä–∞.");
        pauseTimer();
    } else {
        console.log("toggleTimer: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞.");

        if (timeLeftVisual <= 0 && timerCurrentSetDuration > 0) {
            timeLeftVisual = timerCurrentSetDuration;
            targetEndTime = 0;
            console.log(`toggleTimer: –í—Ä–µ–º—è –±—ã–ª–æ <= 0, —Å–±—Ä–æ—à–µ–Ω–æ –Ω–∞ ${timeLeftVisual}—Å –∏–∑ timerCurrentSetDuration.`);
        } else if (timeLeftVisual <= 0 && timerCurrentSetDuration <= 0) {
            timerCurrentSetDuration = timerDefaultDuration;
            timeLeftVisual = timerCurrentSetDuration;
            targetEndTime = 0;
            console.log(`toggleTimer: –í—Ä–µ–º—è –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—ã–ª–∏ <=0. –°–±—Ä–æ—à–µ–Ω–æ –Ω–∞ ${timerDefaultDuration}—Å.`);
        }

        let permissionObtainedForNotifications = (notificationPermissionState === 'granted');
        if (!permissionObtainedForNotifications) {
            const currentGlobalPermission = Notification.permission;
            if (currentGlobalPermission === 'granted') {
                notificationPermissionState = 'granted';
                permissionObtainedForNotifications = true;
                showNotification("–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.", "info");
            } else if (currentGlobalPermission === 'denied') {
                notificationPermissionState = 'denied';
                permissionObtainedForNotifications = false;
                showNotification("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows.", "info", 10000);
            } else {
                permissionObtainedForNotifications = await requestAppNotificationPermission();
                if (permissionObtainedForNotifications) {
                    showNotification("–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!", "success");
                } else {
                    if (notificationPermissionState === 'denied') {
                        showNotification("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows.", "info", 10000);
                    } else {
                        showNotification("–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.", "warning", 10000);
                    }
                }
            }
        }

        if (originalDocumentTitle && document.title.startsWith("‚è∞")) {
            document.title = originalDocumentTitle;
        }
        startTimerInternal();
        console.log("toggleTimer: –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω.");
    }
}


function resetTimer(event) {
    pauseTimer();

    if (event && event.ctrlKey) {
        timerCurrentSetDuration = 0;
        timeLeftVisual = 0;
        console.log("–¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω –≤ 00:00 (Ctrl+Click).");
    } else {
        timerCurrentSetDuration = timerDefaultDuration;
        timeLeftVisual = timerCurrentSetDuration;
        console.log(`–¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${timerDefaultDuration} —Å–µ–∫.`);
    }

    targetEndTime = 0;

    if (originalDocumentTitle && document.title.startsWith("‚è∞")) {
        document.title = originalDocumentTitle;
    }
    updateTimerDisplay();
    saveTimerState();
}


function adjustTimerDuration(secondsToAdd) {
    const minDuration = 10;
    const maxDuration = 3600;

    timerCurrentSetDuration = Math.max(minDuration, Math.min(maxDuration, timerCurrentSetDuration + secondsToAdd));

    if (isTimerRunning) {
        const newEffectiveTimeLeft = Math.max(0, timeLeftVisual + secondsToAdd);
        targetEndTime = Date.now() + newEffectiveTimeLeft * 1000;
        timeLeftVisual = newEffectiveTimeLeft;

        if (timeLeftVisual <= 0) {
            handleTimerEnd();
            return;
        }
    } else {
        timeLeftVisual = timerCurrentSetDuration;
        targetEndTime = 0;
    }
    updateTimerDisplay();
    saveTimerState();
    console.log(`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞. –ù–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è: ${timerCurrentSetDuration} —Å–µ–∫. –¢–µ–∫—É—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${timeLeftVisual} —Å–µ–∫.`);
}


function initTimerSystem() {
    originalDocumentTitle = document.title;

    timerDisplayElement = document.getElementById('timerDisplay');
    timerToggleButton = document.getElementById('timerToggleButton');
    timerResetButton = document.getElementById('timerResetButton');
    timerIncreaseButton = document.getElementById('timerIncreaseButton');
    timerDecreaseButton = document.getElementById('timerDecreaseButton');

    if (!timerDisplayElement || !timerToggleButton || !timerResetButton || !timerIncreaseButton || !timerDecreaseButton) {
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã.");
        return;
    }

    timerDisplayElement.innerHTML = `
        <span id="timerMinutesDisplay" class="timer-segment" tabindex="0" role="textbox" aria-label="–ú–∏–Ω—É—Ç—ã"></span>
        <span class="timer-colon" aria-hidden="true">:</span>
        <span id="timerSecondsDisplay" class="timer-segment" tabindex="0" role="textbox" aria-label="–°–µ–∫—É–Ω–¥—ã"></span>
    `;

    timerElements.minutesSpan = document.getElementById('timerMinutesDisplay');
    timerElements.secondsSpan = document.getElementById('timerSecondsDisplay');
    timerElements.colonSpan = timerDisplayElement.querySelector('.timer-colon');


    timerToggleIcon = timerToggleButton.querySelector('i');
    if (!timerToggleIcon) {
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ play/pause.");
        return;
    }

    const currentPermission = Notification.permission;
    if (currentPermission === "granted") {
        notificationPermissionState = "granted";
    } else if (currentPermission === "denied") {
        notificationPermissionState = "denied";
        NotificationService.add(
            "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–µ —É–≤–∏–¥–µ—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ Windows.",
            "warning", { duration: 10000 }
        );
    } else {
        notificationPermissionState = 'default';
    }

    loadTimerState();

    if (isTimerRunning) {
        const now = Date.now();
        if (targetEndTime > now) {
            timeLeftVisual = Math.max(0, Math.round((targetEndTime - now) / 1000));
            if (timeLeftVisual > 0) {
                startTimerInternal();
                console.log("–¢–∞–π–º–µ—Ä –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.");
            } else {
                isTimerRunning = false;
                handleTimerEnd();
                console.log("–¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫ –≤–æ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏/–±—Ä–∞—É–∑–µ—Ä–∞.");
            }
        } else {
            isTimerRunning = false;
            if (timeLeftVisual > 0 && targetEndTime > 0) {
                timeLeftVisual = 0;
            }
            if (timeLeftVisual <= 0) {
                handleTimerEnd();
            }
            console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ targetEndTime —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º. –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.");
        }
    } else {
        if (timeLeftVisual <= 0 && timerCurrentSetDuration > 0) {
            timeLeftVisual = timerCurrentSetDuration;
        } else if (timeLeftVisual <= 0 && timerCurrentSetDuration <= 0) {
            timeLeftVisual = timerDefaultDuration;
            timerCurrentSetDuration = timerDefaultDuration;
        }
        console.log("–¢–∞–π–º–µ—Ä –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ/—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.");
    }

    updateTimerDisplay();

    timerToggleButton.addEventListener('click', () => {
        if (activeEditingUnitElement) {
            commitTimerEdit(true);
        } else {
            toggleTimer();
        }
    });
    timerResetButton.addEventListener('click', (event) => {
        if (activeEditingUnitElement) {
            cancelTimerEdit();
        }
        resetTimer(event);
    });

    timerIncreaseButton.addEventListener('click', (event) => {
        if (activeEditingUnitElement) {
            cancelTimerEdit();
        }
        const amount = event.ctrlKey ? 5 : 30;
        adjustTimerDuration(amount);
    });
    timerDecreaseButton.addEventListener('click', (event) => {
        if (activeEditingUnitElement) {
            cancelTimerEdit();
        }
        const amount = event.ctrlKey ? -5 : -30;
        adjustTimerDuration(amount);
    });

    timerElements.minutesSpan.addEventListener('click', () => switchToEditMode(timerElements.minutesSpan, 'minutes'));
    timerElements.secondsSpan.addEventListener('click', () => switchToEditMode(timerElements.secondsSpan, 'seconds'));

    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && activeEditingUnitElement) {
            const inputElement = timerDisplayElement.querySelector('input.timer-input-active');
            if (inputElement && document.activeElement === inputElement) {
                cancelTimerEdit();
            }
        }
    });

    document.addEventListener("visibilitychange", () => {
        if (document.visibilityState === 'visible' && isTimerRunning) {
            console.log("–í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π, —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏.");
            const now = Date.now();
            const expectedTimeLeft = Math.max(0, Math.round((targetEndTime - now) / 1000));
            if (Math.abs(expectedTimeLeft - timeLeftVisual) > 2 && timeLeftVisual > 0) {
                console.warn(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–∫–∏. –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedTimeLeft}, –û—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å: ${timeLeftVisual}. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è.`);
                timeLeftVisual = expectedTimeLeft;
                if (timeLeftVisual <= 0) {
                    handleTimerEnd();
                } else {
                    updateTimerDisplay();
                    pauseTimer();
                    startTimerInternal();
                }
            } else if (timeLeftVisual <= 0 && targetEndTime > now) {
                timeLeftVisual = expectedTimeLeft;
                console.log("–¢–∞–π–º–µ—Ä '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' –ø–æ—Å–ª–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ targetEndTime –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.");
                updateTimerDisplay();
                if (!timerInterval) {
                    startTimerInternal();
                }
            }
        }
    });

    console.log("–°–∏—Å—Ç–µ–º–∞ —Ç–∞–π–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (v_editable_compact_css_driven).");
}


function switchToEditMode(unitSpanElement, unitType) {
    if (activeEditingUnitElement) {
        commitTimerEdit(false);
    }
    if (activeEditingUnitElement) return;


    activeEditingUnitElement = unitSpanElement;
    const currentValue = parseInt(unitSpanElement.textContent, 10);

    const input = document.createElement('input');
    input.type = 'text';
    input.className = 'timer-input-active';
    input.style.width = unitSpanElement.offsetWidth + 'px';
    input.style.height = unitSpanElement.offsetHeight + 'px';
    input.style.textAlign = 'center';
    input.style.fontFamily = 'monospace';
    input.style.fontSize = 'inherit';
    input.style.border = '1px solid var(--color-primary, #9333ea)';
    input.style.borderRadius = '3px';
    input.style.padding = '0 2px';
    input.style.boxSizing = 'border-box';
    input.style.backgroundColor = 'var(--input-bg-color, #fff)';
    input.style.color = 'var(--input-text-color, #000)';

    input.maxLength = 2;
    input.value = String(currentValue).padStart(2, '0');

    input.addEventListener('input', () => {
        input.value = input.value.replace(/\D/g, '');
    });

    input.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            event.preventDefault();
            commitTimerEdit(false);
        } else if (event.key === 'Escape') {
            event.preventDefault();
            cancelTimerEdit();
        }
    });

    input.addEventListener('blur', () => {
        setTimeout(() => {
            if (timerDisplayElement.contains(input) && activeEditingUnitElement === unitSpanElement) {
                commitTimerEdit(false);
            }
        }, 100);
    });

    unitSpanElement.style.display = 'none';
    unitSpanElement.parentNode.insertBefore(input, unitSpanElement.nextSibling);
    if (unitSpanElement === timerElements.minutesSpan && timerElements.colonSpan) {
        timerElements.colonSpan.style.display = 'none';
    } else if (unitSpanElement === timerElements.secondsSpan && timerElements.colonSpan) {
        timerElements.colonSpan.style.display = 'none';
    }
    input.focus();
    input.select();
}


function commitTimerEdit(triggerButtonAction = false) {
    if (!activeEditingUnitElement) return;

    const inputElement = timerDisplayElement.querySelector('input.timer-input-active');
    if (!inputElement) {
        cancelTimerEdit();
        return;
    }

    let value = parseInt(inputElement.value, 10);

    if (isNaN(value) || value < 0) {
        value = 0;
    } else if (value > 59) {
        value = 59;
    }

    const unitType = activeEditingUnitElement.id.includes('Minutes') ? 'minutes' : 'seconds';
    const wasTimerRunning = isTimerRunning;

    if (wasTimerRunning) {
        pauseTimer();
    }

    let currentMinutes = Math.floor(timeLeftVisual / 60);
    let currentSeconds = timeLeftVisual % 60;

    if (unitType === 'minutes') {
        currentMinutes = value;
    } else {
        currentSeconds = value;
    }

    timeLeftVisual = currentMinutes * 60 + currentSeconds;
    timerCurrentSetDuration = timeLeftVisual;

    inputElement.remove();
    activeEditingUnitElement.style.display = 'inline-block';
    if (timerElements.colonSpan) timerElements.colonSpan.style.display = 'inline-block';
    activeEditingUnitElement = null;

    updateTimerDisplay();
    saveTimerState();

    if (triggerButtonAction) {
        if (timeLeftVisual > 0) {
            if (!wasTimerRunning) {
                toggleTimer();
            } else {
                startTimerInternal();
            }
        } else if (timeLeftVisual === 0 && wasTimerRunning) {
            handleTimerEnd();
        }
    } else {
        if (wasTimerRunning && timeLeftVisual > 0) {
            isTimerRunning = false;
            updateTimerDisplay();
        } else if (timeLeftVisual === 0) {
            handleTimerEnd();
        }
    }
}


function cancelTimerEdit() {
    if (!activeEditingUnitElement) return;

    const inputElement = timerDisplayElement.querySelector('input.timer-input-active');
    if (inputElement) {
        inputElement.remove();
    }
    activeEditingUnitElement.style.display = 'inline-block';
    if (timerElements.colonSpan) timerElements.colonSpan.style.display = 'inline-block';
    activeEditingUnitElement = null;
    updateTimerDisplay();
}


function updateTimerDisplay() {
    if (!timerDisplayElement || !timerToggleIcon || !timerElements.minutesSpan || !timerElements.secondsSpan) {
        if (timerDisplayElement && (!timerElements.minutesSpan || !timerElements.secondsSpan)) {
            const minutes = Math.floor(timeLeftVisual / 60);
            const seconds = timeLeftVisual % 60;
            timerDisplayElement.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        }

        if (timerToggleIcon) {
            if (isTimerRunning) {
                timerToggleIcon.classList.remove('fa-play');
                timerToggleIcon.classList.add('fa-pause');
            } else {
                timerToggleIcon.classList.remove('fa-pause');
                timerToggleIcon.classList.add('fa-play');
            }
        }
        return;
    }

    const minutes = Math.floor(timeLeftVisual / 60);
    const seconds = timeLeftVisual % 60;

    if (activeEditingUnitElement !== timerElements.minutesSpan) {
        timerElements.minutesSpan.textContent = String(minutes).padStart(2, '0');
    }
    if (activeEditingUnitElement !== timerElements.secondsSpan) {
        timerElements.secondsSpan.textContent = String(seconds).padStart(2, '0');
    }

    if (isTimerRunning) {
        timerToggleIcon.classList.remove('fa-play');
        timerToggleIcon.classList.add('fa-pause');
    } else {
        timerToggleIcon.classList.remove('fa-pause');
        timerToggleIcon.classList.add('fa-play');
    }
}


function initSearchSystem() {
    const searchInput = document.getElementById('searchInput');
    const searchResultsContainer = document.getElementById('searchResults');
    const clearSearchBtn = document.getElementById('clearSearchBtn');
    const searchFieldFilters = document.querySelectorAll('.search-field-filter');

    if (!searchInput) {
        console.error("[initSearchSystem] Search input #searchInput not found. Search system not fully initialized.");
        return;
    }
    if (!searchResultsContainer) {
        console.warn("[initSearchSystem] Search results container #searchResults not found. Results display might be affected.");
    }

    if (typeof performSearch !== 'function') {
        console.error("[initSearchSystem] performSearch function not found!");
        return;
    }

    const debouncedSearch = debounce(async () => {
        try {

            if (!searchInput) {
                console.error("debouncedSearch: searchInput is null or undefined after debounce call!");
                if (searchResultsContainer) {
                    searchResultsContainer.innerHTML = '<div class="p-3 text-center text-red-500">–û—à–∏–±–∫–∞: –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.</div>';
                    searchResultsContainer.classList.remove('hidden');
                }
                return;
            }

            const searchQueryValue = sanitizeQuery(searchInput.value);

            console.log(`[initSearchSystem] Executing search for query: "${searchQueryValue}"`);

            if (searchQueryValue.length >= 1) {
                await performSearch(searchQueryValue);
            } else if (searchResultsContainer) {
                searchResultsContainer.innerHTML = '';
                searchResultsContainer.classList.add('hidden');
            }
        } catch (error) {
            console.error("[initSearchSystem] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞:", error);
            if (searchResultsContainer) {
                searchResultsContainer.innerHTML = '<div class="p-3 text-center text-red-500">–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.</div>';
                searchResultsContainer.classList.remove('hidden');
            }
        }
    }, 300);

    const handleInput = () => {
        debouncedSearch();
        if (clearSearchBtn) {
            clearSearchBtn.classList.toggle('hidden', searchInput.value.length === 0);
        }
    };

    const handleClickOutside = (event) => {
        if (searchResultsContainer && !searchResultsContainer.classList.contains('hidden') && searchInput) {
            const isClickInsideSearchInput = searchInput.contains(event.target);
            const isClickInsideSearchResults = searchResultsContainer.contains(event.target);
            const isClickInsideFilters = Array.from(searchFieldFilters).some(filter =>
                filter.contains(event.target) || filter.labels?.[0]?.contains(event.target));

            if (!isClickInsideSearchInput && !isClickInsideSearchResults && !isClickInsideFilters) {
                searchResultsContainer.classList.add('hidden');
            }
        }
    };

    const handleClearSearch = () => {
        if (searchInput) {
            searchInput.value = '';
            searchInput.focus();
        }
        if (searchResultsContainer) {
            searchResultsContainer.innerHTML = '';
            searchResultsContainer.classList.add('hidden');
        }
        if (clearSearchBtn) {
            clearSearchBtn.classList.add('hidden');
        }
    };

    searchInput.addEventListener('input', handleInput);
    document.addEventListener('click', handleClickOutside);

    if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', handleClearSearch);
        if (searchInput) {
            clearSearchBtn.classList.toggle('hidden', searchInput.value.length === 0);
        } else {
            clearSearchBtn.classList.add('hidden');
        }
    }

    document.addEventListener('keydown', (event) => {
        if (event.ctrlKey && event.key === 'k') {
            event.preventDefault();
            if (searchInput) searchInput.focus();
        }
    });

    console.log("[initSearchSystem] Search system initialized (v5.2 - query variable fix verified, Esc handler removed).");
}


function renderSearchResults(results, query) {
    console.log(`[renderSearchResults V3] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${results?.length ?? 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}"`);
    const searchResultsContainer = document.getElementById('searchResults');

    if (!searchResultsContainer) {
        console.warn("[renderSearchResults V3] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        if (typeof showNotification === 'function') {
            showNotification("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.", "error");
        }
        return;
    }

    searchResultsContainer.innerHTML = '';

    if (!results || results.length === 0) {
        const noResultsMessage = document.createElement('div');
        noResultsMessage.className = 'p-3 text-center text-gray-500 dark:text-gray-400';
        noResultsMessage.textContent = `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${escapeHtml(query)}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`;
        searchResultsContainer.appendChild(noResultsMessage);
        searchResultsContainer.classList.remove('hidden');
        return;
    }

    const ul = document.createElement('ul');
    ul.className = 'divide-y divide-gray-200 dark:divide-gray-600';

    results.forEach(result => {
        if (!result || typeof result !== 'object') {
            console.warn("[renderSearchResults V3] –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", result);
            return;
        }

        const li = document.createElement('li');
        li.className = 'p-3 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer search-result-item';
        li.tabIndex = 0;

        let iconClass = 'fa-question-circle';
        let typeText = result.type || '–ó–∞–ø–∏—Å—å';
        let resultSectionForDataset = result.section;


        switch (result.type) {
            case 'algorithm': iconClass = 'fa-sitemap'; typeText = '–ê–ª–≥–æ—Ä–∏—Ç–º'; break;
            case 'main': iconClass = 'fa-sitemap'; typeText = '–ì–ª–∞–≤–Ω–∞—è'; resultSectionForDataset = 'main'; break;
            case 'link': iconClass = 'fa-link'; typeText = '–°—Å—ã–ª–∫–∞ 1–°'; break;
            case 'bookmark': iconClass = 'fa-bookmark'; typeText = '–ó–∞–∫–ª–∞–¥–∫–∞ (URL)'; break;
            case 'bookmark_note': iconClass = 'fa-sticky-note'; typeText = '–ó–∞–º–µ—Ç–∫–∞'; break;
            case 'reglament': iconClass = 'fa-file-alt'; typeText = '–†–µ–≥–ª–∞–º–µ–Ω—Ç'; break;
            case 'extLink': iconClass = 'fa-external-link-square-alt'; typeText = '–í–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å'; break;
            case 'clientNote': iconClass = 'fa-user-edit'; typeText = '–ó–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞'; break;
            case 'bookmarkFolder': iconClass = 'fa-folder-open'; typeText = '–ü–∞–ø–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫'; break;
            case 'sedoInfoItem': iconClass = 'fa-info-circle'; typeText = '–ò–Ω—Ñ–æ –°–≠–î–û'; resultSectionForDataset = 'sedoTypes'; break;
            case 'sedoInfo': iconClass = 'fa-info-circle'; typeText = '–ò–Ω—Ñ–æ –°–≠–î–û (—Ä–∞–∑–¥–µ–ª)'; resultSectionForDataset = 'sedoTypes'; break;
            case 'uiSetting': iconClass = 'fa-palette'; typeText = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI'; resultSectionForDataset = 'uiSettingsControl'; break;
            case 'section_link': iconClass = 'fa-columns'; typeText = '–†–∞–∑–¥–µ–ª'; break;
            case 'telefony_row': iconClass = 'fa-phone-alt'; typeText = '–¢–µ–ª–µ—Ñ–æ–Ω—ã'; break;
            case 'shablony_block': iconClass = 'fa-file-invoice'; typeText = '–®–∞–±–ª–æ–Ω—ã'; break;
        }

        const titleContainer = document.createElement('div');
        titleContainer.className = 'flex items-center';

        const titleSpan = document.createElement('span');
        titleSpan.className = 'font-medium text-gray-900 dark:text-gray-100';

        const titleText = result.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';

        const highlightTerm = result.highlightTerm || query;

        if (highlightTerm && titleText.toLowerCase().includes(highlightTerm.toLowerCase())) {
            titleSpan.innerHTML = highlightTextInString(titleText, highlightTerm);
        } else {
            titleSpan.textContent = titleText;
        }
        titleContainer.appendChild(titleSpan);


        if (result.isDirectPvsoOrCodeMatch || result.isExactTitleMatch) {
            li.classList.add('exact-match-highlight', 'dark:exact-match-highlight-dark');

            const exactMatchBadge = document.createElement('span');
            exactMatchBadge.className = 'ml-2 px-1.5 py-0.5 text-xs font-semibold rounded-full';
            if (result.isDirectPvsoOrCodeMatch) {
                exactMatchBadge.classList.add('bg-green-100', 'text-green-700', 'dark:bg-green-700', 'dark:text-green-100');
                exactMatchBadge.textContent = '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ';
            } else {
                exactMatchBadge.classList.add('bg-blue-100', 'text-blue-700', 'dark:bg-blue-700', 'dark:text-blue-100');
                exactMatchBadge.textContent = '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ';
            }
            titleContainer.appendChild(exactMatchBadge);
        }


        const typeSpan = document.createElement('span');
        typeSpan.className = 'text-xs text-gray-500 dark:text-gray-400 ml-2';
        typeSpan.innerHTML = `<i class="fas ${iconClass} mr-1 opacity-75"></i>${typeText}`;
        titleContainer.appendChild(typeSpan);

        const descriptionSpan = document.createElement('p');
        descriptionSpan.className = 'text-sm text-gray-600 dark:text-gray-400 mt-0.5 truncate';

        const descriptionText = result.description || '';
        if (highlightTerm && descriptionText.toLowerCase().includes(highlightTerm.toLowerCase())) {
            descriptionSpan.innerHTML = highlightTextInString(descriptionText, highlightTerm);
        } else {
            descriptionSpan.textContent = descriptionText;
        }
        descriptionSpan.title = descriptionText;

        li.appendChild(titleContainer);
        if (result.description) {
            li.appendChild(descriptionSpan);
        }


        if (result.id) {
            li.dataset.id = result.id;
        }
        li.dataset.type = result.type;
        if (resultSectionForDataset) {
            li.dataset.section = resultSectionForDataset;
        }
        li.dataset.highlightTerm = highlightTerm;


        const handleResultClickLocal = () => {
            if (typeof handleSearchResultClick === 'function') {
                handleSearchResultClick(result);
            } else {
                console.error("renderSearchResults V3: –§—É–Ω–∫—Ü–∏—è handleSearchResultClick –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }
        };

        li.addEventListener('click', handleResultClickLocal);
        li.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                handleResultClickLocal();
            }
        });

        ul.appendChild(li);
    });

    searchResultsContainer.appendChild(ul);
    searchResultsContainer.classList.remove('hidden');
}


function highlightTextInString(text, searchTerm) {
    if (!text || !searchTerm) return escapeHtml(text);

    const escapedText = escapeHtml(text);
    const escapedTerm = escapeRegExp(searchTerm);
    const regex = new RegExp(`(${escapedTerm})`, 'gi');

    return escapedText.replace(regex, '<mark class="search-term-highlight">$1</mark>');
}


function highlightElement(element, searchTerm) {
    if (!element) return;


    document.querySelectorAll('.search-highlight-active').forEach(el => {
        if (el !== element) {
            el.classList.remove('search-highlight-active', 'search-highlight-pulse');
            if (el._highlightTimerId) clearTimeout(el._highlightTimerId); delete el._highlightTimerId;
            if (el._pulseTimerId) clearTimeout(el._pulseTimerId); delete el._pulseTimerId;



        }
    });

    if (element._highlightTimerId) clearTimeout(element._highlightTimerId);
    if (element._pulseTimerId) clearTimeout(element._pulseTimerId);
    element.classList.remove('search-highlight-active', 'search-highlight-pulse');

    element.classList.add('search-highlight-active');
    element.classList.add('search-highlight-pulse');

    element._pulseTimerId = setTimeout(() => {
        element.classList.remove('search-highlight-pulse');
        delete element._pulseTimerId;
    }, 1500);

    element._highlightTimerId = setTimeout(() => {
        element.classList.remove('search-highlight-active');
        delete element._highlightTimerId;
        console.log(`–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫–ª–∞—Å—Å—ã) —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:`, element);
    }, 5000);

    if (searchTerm && typeof searchTerm === 'string' && searchTerm.trim() !== "") {
        highlightTextInElement(element, searchTerm);
    }
}


function highlightTextInElement(element, searchTerm) {
    if (!element || !searchTerm || typeof searchTerm !== 'string' || searchTerm.trim() === "") {
        return;
    }

    if (element._textHighlightTimerId) {
        clearTimeout(element._textHighlightTimerId);
        delete element._textHighlightTimerId;
    }

    if (element.dataset.originalHtmlForHighlight) {
        element.innerHTML = element.dataset.originalHtmlForHighlight;
    }

    const currentCleanHtml = element.innerHTML;

    function walkTextNodes(node, callback) {
        if (node.nodeType === Node.TEXT_NODE) {
            callback(node);
        } else {
            for (let i = 0; i < node.childNodes.length; i++) {
                walkTextNodes(node.childNodes[i], callback);
            }
        }
    }

    const textNodes = [];
    walkTextNodes(element, node => {
        if (node.textContent.trim() !== '') {
            textNodes.push(node);
        }
    });

    let modified = false;
    const regex = new RegExp(`(${escapeRegExp(searchTerm)})`, 'gi');

    textNodes.forEach(node => {
        const text = node.textContent;
        if (regex.test(text)) {
            modified = true;
            regex.lastIndex = 0;
            const parts = text.split(regex);

            const fragment = document.createDocumentFragment();
            parts.forEach((part, index) => {
                if (index % 2 === 1) {
                    const mark = document.createElement('mark');
                    mark.className = 'search-term-highlight';
                    mark.textContent = part;
                    fragment.appendChild(mark);
                } else if (part) {
                    fragment.appendChild(document.createTextNode(part));
                }
            });
            node.parentNode.replaceChild(fragment, node);
        }
    });

    if (modified) {
        element.dataset.originalHtmlForHighlight = currentCleanHtml;
        element._textHighlightTimerId = setTimeout(() => {
            if (element.dataset.originalHtmlForHighlight) {
                element.innerHTML = element.dataset.originalHtmlForHighlight;
                delete element.dataset.originalHtmlForHighlight;
            }
            delete element._textHighlightTimerId;
            console.log(`–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (<mark>) —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:`, element);
        }, 5000);
    } else {
        if (element.dataset.originalHtmlForHighlight) {
            delete element.dataset.originalHtmlForHighlight;
        }
    }
}


function convertItemToSearchResult(ref, itemData, score) {
    const storeName = ref.store;
    const itemIdFromRef = ref.id;

    if (storeName === 'telefony') {
        const docId = itemIdFromRef;
        const rowIndex = ref.rowIndex;
        const allRows = originalTelefonyData || [];
        const rowData = allRows[rowIndex];

        if (rowData) {
            return {
                section: 'telefony',
                type: 'telefony_row',
                id: `${docId}_row_${rowIndex}`,
                title: Object.values(rowData).find(val => val && String(val).trim()) || `–°—Ç—Ä–æ–∫–∞ #${rowIndex + 1}`,
                description: Object.values(rowData).join(' | '),
                score: score || 0,
                rowIndex: rowIndex
            };
        }
        return null;
    }

    if (storeName === 'shablony') {
        const docId = itemIdFromRef;
        const blockIndex = ref.blockIndex;

        if (typeof blockIndex !== 'number') {
            console.warn(`[convertItemToSearchResult] –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ 'shablony' –±–µ–∑ blockIndex.`, ref);
            return null;
        }
        const allBlocks = parseShablonyContent(originalShablonyData || []);
        const blockData = allBlocks.find(b => b.originalIndex === blockIndex);

        if (blockData) {
            return {
                section: 'shablony',
                type: 'shablony_block',
                id: `${docId}_block_${blockIndex}`,
                title: blockData.title,
                description: truncateText(blockData.content, 150),
                score: score || 0,
                blockIndex: blockIndex
            };
        }
        console.warn(`[convertItemToSearchResult] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞ ${blockIndex} –≤ 'shablony'.`);
        return null;
    }

    if (!itemData) {
        console.warn(`[convertItemToSearchResult] –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è ${storeName}/${itemIdFromRef}`);
        return null;
    }

    let finalItemId = itemIdFromRef;
    let finalSection = storeName;

    const algoSectionsFromTabs = (typeof tabsConfig !== 'undefined' && Array.isArray(tabsConfig))
        ? tabsConfig.filter(t => t.id !== 'main' && t.id !== 'links' && t.id !== 'extLinks' && t.id !== 'reglaments' && t.id !== 'bookmarks' && t.id !== 'sedoTypes' && t.id !== 'uiSettingsControl').map(t => t.id)
        : ['program', 'skzi', 'webReg', 'lk1c'];

    if (storeName === 'algorithms') {
        if (itemIdFromRef === 'main') {
            finalSection = 'main';
            finalItemId = 'main';
        } else {
            let determinedSection = itemData.section && algoSectionsFromTabs.includes(itemData.section)
                ? itemData.section
                : algoSectionsFromTabs.find(prefix => String(itemData.id || itemIdFromRef).toLowerCase().startsWith(prefix.toLowerCase()));

            if (determinedSection) {
                finalSection = determinedSection;
            } else {
                finalSection = 'program';
                console.warn(`[convertItemToSearchResult] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ–∫—Ü–∏—é –¥–ª—è algorithm ID: ${itemData.id || itemIdFromRef}. Fallback –Ω–∞ '${finalSection}'.`);
            }
            finalItemId = itemData.id || itemIdFromRef;
        }
        if (itemData) {
            if (!itemData.id || String(itemData.id) !== String(finalItemId)) itemData.id = finalItemId;
            if (!itemData.section || itemData.section !== finalSection) itemData.section = finalSection;
        }
    } else if (storeName === 'clientData') {
        finalItemId = 'current';
        finalSection = 'main';
    } else if (storeName === 'bookmarkFolders') {
        finalItemId = String(itemData.id || itemIdFromRef);
        finalSection = 'bookmarks';
    } else if (storeName === 'preferences') {
        if (itemIdFromRef === SEDO_CONFIG_KEY) {
            finalSection = 'sedoTypes';
        } else if (itemIdFromRef === 'uiSettings') {
            finalSection = 'uiSettingsControl';
            finalItemId = 'customizeUIBtn';
        } else {
            finalSection = 'preferences';
        }
    } else if (storeName === 'blacklistedClients') {
        finalSection = 'blacklistedClients';
        finalItemId = String(itemData.id || itemIdFromRef);
    } else {
        finalSection = storeName;
        finalItemId = String(itemData.id || itemIdFromRef);
    }

    let result = {
        section: finalSection,
        type: '',
        id: finalItemId,
        title: itemData.title || itemData.name || '',
        description: itemData.description || '',
        score: score || 0,
    };

    switch (storeName) {
        case 'algorithms':
            result.type = (finalItemId === 'main') ? 'main' : 'algorithm';
            result.title = itemData.title || (finalItemId === 'main' ? '–ì–ª–∞–≤–Ω–∞—è' : `–ê–ª–≥–æ—Ä–∏—Ç–º ${finalItemId}`);
            result.description = itemData.description || itemData.steps?.[0]?.description || itemData.steps?.[0]?.title || '';
            if (result.type === 'algorithm' && itemData.section && typeof getSectionName === 'function') {
                result.description = `[${getSectionName(itemData.section)}] ${result.description}`;
            }
            break;
        case 'links':
            result.type = 'link';
            break;
        case 'bookmarks':
            result.type = itemData.url ? 'bookmark' : 'bookmark_note';
            break;
        case 'reglaments':
            result.type = 'reglament';
            result.description = `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${itemData.category ? (categoryDisplayInfo[itemData.category]?.title || itemData.category) : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}. ` + (itemData.content || '').substring(0, 100) + '...';
            break;
        case 'extLinks':
            result.type = 'extLink';
            break;
        case 'clientData':
            result.type = 'clientNote';
            result.title = '–ó–∞–º–µ—Ç–∫–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É';
            result.description = (itemData.notes || '').substring(0, 100) + '...';
            break;
        case 'bookmarkFolders':
            result.type = 'bookmarkFolder';
            result.title = `–ü–∞–ø–∫–∞: ${itemData.name}`;
            break;
        case 'blacklistedClients':
            result.type = 'blacklistedClient';
            result.title = itemData.organizationName || `–ó–∞–ø–∏—Å—å –ß–° #${finalItemId}`;
            result.description = `–ò–ù–ù: ${itemData.inn || '-'}, –¢–µ–ª: ${itemData.phone || '-'}`;
            break;
        case 'preferences':
            if (itemIdFromRef === SEDO_CONFIG_KEY) {
                const table = itemData.tables?.[ref.tableIndex];
                result.type = 'sedoInfoItem';
                result.sedoTableIndex = ref.tableIndex;
                result.sedoRowIndex = ref.rowIndex;
                result.sedoHighlightField = ref.field;
                if (table) {
                    const row = table.items?.[ref.rowIndex];
                    if (row) {
                        result.title = row.name || row.code || row.type || table.title;
                        result.description = `–í –ø–æ–ª–µ "${ref.field}": ` + truncateText(String(row[ref.field]), 100);
                    } else if (ref.field === 'tableTitle') {
                        result.title = table.title;
                        result.description = '–ù–∞–π–¥–µ–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ç–∞–±–ª–∏—Ü—ã';
                    } else {
                        result.title = table.title || '–≠–ª–µ–º–µ–Ω—Ç –°–≠–î–û';
                        result.description = '–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –°–≠–î–û';
                    }
                }
            } else if (itemIdFromRef === 'uiSettings') {
                result.type = 'uiSetting';
                result.title = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞';
            } else {
                result.type = 'preference';
            }
            break;
        default:
            result.type = storeName;
            break;
    }

    if (result.description) {
        result.description = result.description.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();
    }
    if (!result.title) {
        result.title = `(${result.type} ${result.id})`;
    }
    return result;
}


async function handleSearchResultClick(result) {
    console.log("[handleSearchResultClick V11 - Google Docs] Clicked on result:", JSON.parse(JSON.stringify(result)));
    const searchInput = document.getElementById('searchInput');
    const searchResultsContainer = document.getElementById('searchResults');

    if (searchInput) searchInput.value = '';
    if (searchResultsContainer) searchResultsContainer.classList.add('hidden');

    async function tryScrollAndHighlight(tabId, itemSelector, highlightTerm) {
        if (typeof setActiveTab === 'function' && currentSection !== tabId) {
            setActiveTab(tabId);
            await new Promise(resolve => setTimeout(resolve, 350));
        }
        return new Promise((resolve) => {
            requestAnimationFrame(() => {
                const element = document.querySelector(itemSelector);
                if (element) {
                    element.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    if (typeof highlightElement === 'function') highlightElement(element, highlightTerm);
                    resolve({ success: true, elementFound: true });
                } else {
                    console.warn(`[tryScrollAndHighlight] Element ${itemSelector} not found.`);
                    resolve({ success: false, elementFound: false });
                }
            });
        });
    }

    try {
        let tabId, itemSelector;
        switch (result.type) {
            case 'telefony_row':
                tabId = 'telefony';
                itemSelector = `#doc-content-telefony tr[data-row-index="${result.rowIndex}"]`;
                await tryScrollAndHighlight(tabId, itemSelector, result.highlightTerm || result.title);
                break;
            case 'shablony_block':
                tabId = 'shablony';
                itemSelector = `#doc-content-shablony div[data-block-index="${result.blockIndex}"]`;
                await tryScrollAndHighlight(tabId, itemSelector, result.highlightTerm || result.title);
                break;
            case 'algorithm':
            case 'main':
                const algoId = (result.type === 'main') ? 'main' : result.id;
                const algoSection = result.section;
                if (algoId !== 'main') {
                    await tryScrollAndHighlight(algoSection, `#${algoSection}Algorithms .algorithm-card[data-id="${algoId}"]`, result.highlightTerm || result.title);
                }
                const algoData = algoId === 'main' ? algorithms.main : algorithms[algoSection]?.find(a => String(a.id) === String(algoId));
                if (algoData) showAlgorithmDetail(algoData, algoSection);
                break;
            case 'bookmark':
            case 'bookmark_note':
                await tryScrollAndHighlight('bookmarks', `.bookmark-item[data-id="${result.id}"]`, result.highlightTerm || result.title);
                showBookmarkDetailModal(parseInt(result.id, 10));
                break;
            case 'reglament':
                const reglamentData = await getFromIndexedDB('reglaments', parseInt(result.id, 10));
                if (reglamentData && reglamentData.category) {
                    await setActiveTab('reglaments');
                    await showReglamentsForCategory(reglamentData.category);
                    await tryScrollAndHighlight(null, `.reglament-item[data-id="${result.id}"]`, result.highlightTerm || result.title);
                }
                showReglamentDetail(parseInt(result.id, 10));
                break;
            case 'sedoInfoItem':
                await setActiveTab('sedoTypes');
                await highlightAndScrollSedoItem(result.sedoTableIndex, result.sedoRowIndex, result.sedoHighlightField, result.highlightTerm || result.title);
                break;
            case 'clientNote':
                await setActiveTab('main');
                const textarea = document.getElementById('clientNotes');
                if (textarea) {
                    textarea.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    textarea.focus();
                    highlightElement(textarea, result.highlightTerm);
                }
                break;
            case 'section_link':
                if (result.section && typeof setActiveTab === 'function') {
                    setActiveTab(result.section);
                }
                break;
            default:
                if (result.section) {
                    await tryScrollAndHighlight(result.section, `[data-id="${result.id}"]`, result.highlightTerm || result.title);
                } else {
                    showNotification(`–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–∏–ø–∞ "${result.type}" –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ.`, "warning");
                }
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞:", error);
        showNotification("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.", "error");
    }
}


function escapeRegExp(string) {
    if (typeof string !== 'string') return '';
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}


async function executeSearch(query) {
    console.log(`[executeSearch] –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);
    try {
        await performSearch(query);
        console.log(`[executeSearch] –ü–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω (–∏–ª–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω).`);
    } catch (error) {
        console.error(`script.js:6135 Search failed: ${error.name}: ${error.message}`);
        showNotification(`–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${error.message}`, "error");
    }
}


function tokenize(text) {
    if (!text || typeof text !== 'string') {
        return [];
    }

    const normalizedText = text.toLowerCase()
        .replace(/—ë/g, '–µ')
        .replace(/[^a-z–∞-—è0-9\s]/g, c => (c === '-' || c === '_') ? c : ' ')
        .replace(/\s+/g, ' ')
        .trim();

    const words = normalizedText.split(/\s+/).filter(word => word.length > 0);
    const tokens = new Set();
    const MIN_TOKEN_LEN = 2;
    const MIN_PREFIX_LEN = 2;
    const MAX_PREFIX_LEN_FOR_TOKEN = 8;

    function addPrefixes(str, tokenSet) {
        if (!str || str.length < MIN_PREFIX_LEN) return;
        const maxPrefixLen = Math.min(str.length, MAX_PREFIX_LEN_FOR_TOKEN);
        for (let i = MIN_PREFIX_LEN; i <= maxPrefixLen; i++) {
            tokenSet.add(str.substring(0, i));
        }
    }

    words.forEach(word => {
        if (word.length >= MIN_TOKEN_LEN) {
            tokens.add(word);
            addPrefixes(word, tokens);
        }

        const partsByHyphenOrUnderscore = word.split(/[-_]/);
        if (partsByHyphenOrUnderscore.length > 1) {
            partsByHyphenOrUnderscore.forEach(part => {
                if (part.length >= MIN_TOKEN_LEN) {
                    tokens.add(part);
                    addPrefixes(part, tokens);
                }
            });
        }
    });
    console.log(`[tokenize NEW] Input: "${text.substring(0, 50)}...", Output tokens:`, Array.from(tokens));
    return Array.from(tokens);
}


function isExceptionShortToken(token) {
    const exceptions = new Set(['1—Å', '1c', '—Å—Ñ', '—Ñ–Ω', '—Ñ—Å']);
    return exceptions.has(token);
}


async function addToSearchIndex(word, type, id, field, weight = 1, originalRefDetails = null) {
    if (!db) {
        console.warn(`[addToSearchIndex V2] DB not ready. Word: ${word}, Type: ${type}, ID: ${id}`);
        return Promise.resolve();
    }

    if (!word || typeof word !== 'string' || word.trim() === "") {
        return Promise.resolve();
    }

    if (!type || typeof type !== 'string') {
        console.error(`[addToSearchIndex V2] Invalid type provided: ${type} (for word "${word}", id "${id}"). Skipping.`);
        return Promise.resolve();
    }

    if (id === undefined || id === null) {
        console.error(`[addToSearchIndex V2] Invalid ID provided: ${id} (for word "${word}", type "${type}"). Skipping.`);
        return Promise.resolve();
    }

    const normalizedWord = word.toLowerCase().replace(/—ë/g, '–µ');

    if (normalizedWord.length > 50) {
        console.warn(`[addToSearchIndex V2] Token too long, skipping: "${normalizedWord.substring(0, 20)}..." (length: ${normalizedWord.length})`);
        return Promise.resolve();
    }

    if (normalizedWord.length < MIN_TOKEN_LEN_FOR_INDEX && !isExceptionShortToken(normalizedWord)) {
        return Promise.resolve();
    }


    return new Promise((resolve, reject) => {
        let transaction;
        try {
            if (!db || typeof db.transaction !== 'function') {
                console.error(`[addToSearchIndex V2] DB object is invalid or transaction method is missing. Word: "${normalizedWord}"`);
                return reject(new Error("DB object invalid for transaction"));
            }
            transaction = db.transaction(['searchIndex'], 'readwrite');
        } catch (txError) {
            console.error(`[addToSearchIndex V2] Error creating transaction for word "${normalizedWord}":`, txError);
            return reject(txError);
        }

        const store = transaction.objectStore('searchIndex');

        transaction.onerror = (event) => {
            console.error(`[addToSearchIndex V2] Transaction error for word "${normalizedWord}". Error: ${event.target.error?.name} - ${event.target.error?.message}. Source: ${event.target.source?.name}.`);
            reject(event.target.error || new Error("Transaction error in addToSearchIndex"));
        };
        transaction.onabort = (event) => {
            console.warn(`[addToSearchIndex V2] Transaction aborted for word "${normalizedWord}". Error: ${event.target.error?.name} - ${event.target.error?.message}.`);
            reject(event.target.error || new Error("Transaction aborted in addToSearchIndex"));
        };

        const getRequest = store.get(normalizedWord);

        getRequest.onerror = e_get => {
            console.error(`[addToSearchIndex V2] Error getting entry for word "${normalizedWord}":`, e_get.target.error);
            reject(e_get.target.error || new Error("Failed to get entry from searchIndex"));
        };

        getRequest.onsuccess = e_get => {
            try {
                const existingEntry = e_get.target.result;
                const newRefData = {
                    type: type,
                    id: String(id),
                    field: field || 'unknown',
                    weight: Math.max(0.1, Math.min(10, parseFloat(weight) || 1)),
                    store: type
                };

                if (originalRefDetails && typeof originalRefDetails === 'object') {
                    if (typeof originalRefDetails.tableIndex === 'number') newRefData.tableIndex = originalRefDetails.tableIndex;
                    if (typeof originalRefDetails.rowIndex === 'number') newRefData.rowIndex = originalRefDetails.rowIndex;
                    if (typeof originalRefDetails.stepIndex === 'number') newRefData.stepIndex = originalRefDetails.stepIndex;
                    if (originalRefDetails.blockIndex !== undefined) newRefData.blockIndex = originalRefDetails.blockIndex;
                    if (originalRefDetails.title) newRefData.title = originalRefDetails.title;
                    if (originalRefDetails.description) newRefData.description = originalRefDetails.description;
                    if (originalRefDetails.field) newRefData.field = originalRefDetails.field;
                }

                let putRequest;
                if (existingEntry) {
                    const refExists = existingEntry.refs.some(existingRef =>
                        existingRef.id === newRefData.id &&
                        existingRef.type === newRefData.type &&
                        existingRef.field === newRefData.field &&
                        existingRef.tableIndex === newRefData.tableIndex &&
                        existingRef.rowIndex === newRefData.rowIndex &&
                        existingRef.stepIndex === newRefData.stepIndex &&
                        existingRef.blockIndex === newRefData.blockIndex
                    );

                    if (!refExists) {
                        if (existingEntry.refs.length < MAX_REFS_PER_WORD) {
                            existingEntry.refs.push(newRefData);
                            putRequest = store.put(existingEntry);
                        } else {
                            console.warn(`[addToSearchIndex V2] Too many refs for word "${normalizedWord}" (limit: ${MAX_REFS_PER_WORD}), skipping for ref:`, newRefData);
                            resolve();
                            return;
                        }
                    } else {
                        console.log(`[addToSearchIndex V2] Ref already exists for word "${normalizedWord}":`, newRefData);
                        resolve();
                        return;
                    }
                } else {
                    putRequest = store.put({ word: normalizedWord, refs: [newRefData] });
                }

                if (putRequest) {
                    putRequest.onerror = e_put => {
                        console.error(`[addToSearchIndex V2] Error putting entry for word "${normalizedWord}":`, e_put.target.error);
                        reject(e_put.target.error || new Error("Failed to put entry into searchIndex"));
                    };
                    putRequest.onsuccess = () => {
                        resolve();
                    };
                }
            } catch (processingError) {
                console.error(`[addToSearchIndex V2] Error processing entry for word "${normalizedWord}":`, processingError);
                reject(processingError);
            }
        };
    });
}


async function removeFromSearchIndex(itemId, itemType) {
    if (!db) {
        return;
    }

    const stringItemId = String(itemId);

    try {
        const transaction = db.transaction('searchIndex', 'readwrite');
        const store = transaction.objectStore('searchIndex');
        const request = store.openCursor();
        const updates = [];

        await new Promise((resolve, reject) => {
            request.onsuccess = event => {
                const cursor = event.target.result;
                if (cursor) {
                    const entry = cursor.value;
                    const initialRefCount = entry.refs.length;
                    entry.refs = entry.refs.filter(ref =>
                        !(String(ref.id) === stringItemId && ref.type === itemType)
                    );

                    if (entry.refs.length === 0) {
                        updates.push({ operation: 'delete', key: cursor.key });
                    } else if (entry.refs.length < initialRefCount) {
                        updates.push({ operation: 'put', data: entry });
                    }
                    cursor.continue();
                } else {
                    resolve();
                }
            };
            request.onerror = event => reject(event.target.error);
        });

        if (updates.length > 0) {
            const updateTransaction = db.transaction('searchIndex', 'readwrite');
            const updateStore = updateTransaction.objectStore('searchIndex');
            updates.forEach(update => {
                if (update.operation === 'delete') {
                    updateStore.delete(update.key);
                } else if (update.operation === 'put') {
                    updateStore.put(update.data);
                }
            });
            await new Promise((resolve, reject) => {
                updateTransaction.oncomplete = resolve;
                updateTransaction.onerror = (e) => reject(e.target.error);
                updateTransaction.onabort = (e) => reject(e.target.error || new Error("Transaction aborted"));
            });
        }
    } catch (error) {
        console.error(`[removeFromSearchIndex V6] Error for ${itemType}-${stringItemId}:`, error);
    }
}


function getAlgorithmText(algoData) {
    const texts = {};
    if (!algoData || typeof algoData !== 'object') {
        return texts;
    }
    const cleanHtml = (text) => typeof text === 'string' ? text.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim() : '';

    if (algoData.title && typeof algoData.title === 'string') {
        const cleanedTitle = cleanHtml(algoData.title);
        if (cleanedTitle) texts.title = cleanedTitle;
    }

    let descriptionText = '';
    if (algoData.description && typeof algoData.description === 'string') {
        descriptionText = cleanHtml(algoData.description);
    }

    if (algoData.section && typeof getSectionName === 'function') {
        const sectionNameText = getSectionName(algoData.section);
        if (sectionNameText && sectionNameText !== "–û—Å–Ω–æ–≤–Ω–æ–π" && (!descriptionText || !descriptionText.toLowerCase().includes(sectionNameText.toLowerCase()))) {
            if (descriptionText) {
                descriptionText += ` ${sectionNameText}`;
            } else {
                descriptionText = sectionNameText;
            }
            texts.sectionNameForAlgo = sectionNameText;
        }
        if (algoData.section !== 'main') {
            texts.sectionIdForAlgo = algoData.section;
        }
    }

    if (descriptionText) {
        texts.description = descriptionText;
    }

    const stepsTextParts = [];
    if (algoData.steps && Array.isArray(algoData.steps)) {
        algoData.steps.forEach((step) => {
            if (!step || typeof step !== 'object') return;

            if (step.title && typeof step.title === 'string') {
                const cleanedStepTitle = cleanHtml(step.title);
                if (cleanedStepTitle) stepsTextParts.push(cleanedStepTitle);
            }

            if (step.description) {
                if (typeof step.description === 'string') {
                    const cleanedStepDesc = cleanHtml(step.description);
                    if (cleanedStepDesc) stepsTextParts.push(cleanedStepDesc);
                } else if (typeof step.description === 'object' && step.description.type === 'list') {
                    if (step.description.intro && typeof step.description.intro === 'string') {
                        const cleanedIntro = cleanHtml(step.description.intro);
                        if (cleanedIntro) stepsTextParts.push(cleanedIntro);
                    }
                    if (Array.isArray(step.description.items)) {
                        step.description.items.forEach(item => {
                            let itemText = '';
                            if (typeof item === 'string') {
                                itemText = cleanHtml(item);
                            } else if (item && typeof item.text === 'string') {
                                itemText = cleanHtml(item.text);
                            } else if (item && typeof item === 'object') {
                                try { itemText = cleanHtml(JSON.stringify(item)); } catch (e) { }
                            }
                            if (itemText) stepsTextParts.push(itemText);
                        });
                    }
                }
            }

            if (step.example) {

                const exampleAsText = formatExampleForTextarea(step.example);
                if (exampleAsText && typeof exampleAsText === 'string') {
                    const cleanedExample = cleanHtml(exampleAsText);
                    if (cleanedExample) stepsTextParts.push(cleanedExample);
                }
            }

            if (step.additionalInfoText && typeof step.additionalInfoText === 'string') {
                const cleanedAddInfo = cleanHtml(step.additionalInfoText);
                if (cleanedAddInfo) stepsTextParts.push(cleanedAddInfo);
            }
        });
    }
    const aggregatedStepsText = stepsTextParts.filter(part => part && part.length > 0).join(' ');
    if (aggregatedStepsText) {
        texts.steps = aggregatedStepsText;
    }

    for (const key in algoData) {
        if (Object.prototype.hasOwnProperty.call(algoData, key) && typeof algoData[key] === 'string') {
            const excludedKeys = ['id', 'title', 'description', 'section', 'dateAdded', 'dateUpdated', 'type', 'aggregated_steps_content'];
            if (!excludedKeys.includes(key) && texts[key] === undefined && !key.startsWith('_')) {
                const cleanedValue = cleanHtml(algoData[key]);
                if (cleanedValue) {
                    texts[key] = cleanedValue;
                }
            }
        }
    }
    return texts;
}


async function performSearch(query) {
    const searchResultsContainer = document.getElementById('searchResults');
    const MIN_SEARCH_LENGTH = 1;
    const loadingIndicatorHTML = '<div class="p-3 text-center text-gray-500 dark:text-gray-400"><i class="fas fa-spinner fa-spin mr-2"></i>–ò–¥–µ—Ç –ø–æ–∏—Å–∫...</div>';

    const noResultsHTML = (q) => `<div class="p-3 text-center text-gray-500 dark:text-gray-400">–ü–æ –∑–∞–ø—Ä–æ—Å—É "${escapeHtml(q)}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</div>`;
    const errorHTML = '<div class="p-3 text-center text-red-500">–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞.</div>';
    const dbErrorHTML = '<div class="p-3 text-center text-red-500">–û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.</div>';

    const startTime = performance.now();

    if (!db) {
        console.error("[performSearch] DB not ready");
        if (searchResultsContainer) searchResultsContainer.innerHTML = dbErrorHTML;
        return;
    }
    if (!searchResultsContainer) {
        console.error("[performSearch] searchResultsContainer not found");
        return;
    }

    if (!query) {
        searchResultsContainer.innerHTML = '';
        searchResultsContainer.classList.add('hidden');
        return;
    }

    if (query.length < MIN_SEARCH_LENGTH) {
        const minLengthHTML = `<div class="p-3 text-center text-gray-500 dark:text-gray-400">–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º ${MIN_SEARCH_LENGTH} —Å–∏–º–≤–æ–ª...</div>`;
        searchResultsContainer.innerHTML = minLengthHTML;
        searchResultsContainer.classList.remove('hidden');
        return;
    }

    searchResultsContainer.innerHTML = loadingIndicatorHTML;
    searchResultsContainer.classList.remove('hidden');
    console.log(`[performSearch] –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);

    try {

        const searchContext = determineSearchContext(query);
        const queryTokens = tokenize(query).filter(word => word.length >= 2);
        const sectionMatches = findSectionMatches(query);

        if (queryTokens.length === 0) {
            renderSearchResults(sectionMatches, query);
            if (sectionMatches.length === 0) {
                searchResultsContainer.innerHTML = noResultsHTML(query);
            }
            return;
        }

        let candidateDocs = await searchCandidates(queryTokens, searchContext, query);

        const filteredCandidateDocs = new Map();
        for (const [key, value] of candidateDocs.entries()) {
            if (value.ref.store !== 'blacklistedClients') {
                filteredCandidateDocs.set(key, value);
            }
        }
        candidateDocs = filteredCandidateDocs;

        const finalResults = await processSearchResults(candidateDocs, query, query);

        const combinedResults = [...sectionMatches, ...finalResults];
        const sortedResults = sortSearchResults(combinedResults);
        const limitedResults = sortedResults.slice(0, 15);
        const endTime = performance.now();
        const executionTime = endTime - startTime;

        if (typeof trackSearchMetrics === 'function') {

            trackSearchMetrics(query, limitedResults.length, executionTime, searchContext);
        }

        console.log(`[performSearch] –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${executionTime.toFixed(2)}ms, –Ω–∞–π–¥–µ–Ω–æ ${limitedResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);

        if (limitedResults.length === 0) {
            searchResultsContainer.innerHTML = noResultsHTML(query);
        } else {
            renderSearchResults(limitedResults, query);
        }

    } catch (error) {
        console.error('[performSearch] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        searchResultsContainer.innerHTML = errorHTML;

        if (typeof showNotification === 'function') {
            showNotification(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`, "error");
        }
    }
}


function determineSearchContext(normalizedQuery) {
    const FNS_KEYWORDS = new Set(['—Ñ–Ω—Å', '–Ω–∞–ª–æ–≥', '–∏—Ñ–Ω—Å', '–µ–≥—Ä—é–ª', '–µ–≥—Ä–∏–ø', '–µ–≥—Ä–Ω', '–∫–Ω–¥', '–¥–µ–∫–ª–∞—Ä–∞—Ü']);
    const SEDO_KEYWORDS = new Set(['—Å—ç–¥–æ', '–ø–≤—Å–æ', '—Å—Ñ—Ä', '—Ñ—Å—Å', '–∏–∑–≤–µ—â–µ–Ω–∏–µ', '—ç–ª–Ω', '—Å–æ–æ–±—â–µ–Ω–∏–µ']);
    const PFR_KEYWORDS = new Set(['–ø—Ñ—Ä', '–ø–µ–Ω—Å–∏–æ–Ω', '—Å–Ω–∏–ª—Å', '—Å–∑–≤', '–æ–ø—Å']);
    const SKZI_KEYWORDS = new Set(['—Å–∫–∑–∏', '–∫—Ä–∏–ø—Ç–æ', '—à–∏—Ñ—Ä', '—ç—Ü–ø', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å', '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç']);

    if (FNS_KEYWORDS.has(normalizedQuery)) return 'fns';
    if (SEDO_KEYWORDS.has(normalizedQuery)) return 'sedo';
    if (PFR_KEYWORDS.has(normalizedQuery)) return 'pfr';
    if (SKZI_KEYWORDS.has(normalizedQuery)) return 'skzi';

    const queryWords = normalizedQuery.split(/\s+/);
    for (const word of queryWords) {
        if (FNS_KEYWORDS.has(word)) return 'fns';
        if (SEDO_KEYWORDS.has(word)) return 'sedo';
        if (PFR_KEYWORDS.has(word)) return 'pfr';
        if (SKZI_KEYWORDS.has(word)) return 'skzi';
    }
    return 'general';
}


async function searchCandidates(queryTokens, searchContext, normalizedQuery) {
    const candidateDocs = new Map();
    try {
        const transaction = db.transaction(['searchIndex'], 'readonly');
        const indexStore = transaction.objectStore('searchIndex');

        for (const queryToken of queryTokens) {
            const range = IDBKeyRange.bound(queryToken, queryToken + '\uffff');

            await new Promise((resolve, reject) => {
                const request = indexStore.openCursor(range);
                request.onsuccess = e => {
                    const cursor = e.target.result;
                    if (cursor) {
                        const indexEntry = cursor.value;
                        const actualToken = indexEntry.word;

                        if (indexEntry.refs && Array.isArray(indexEntry.refs)) {
                            indexEntry.refs.forEach(ref => {
                                if (!ref.store || !ref.id) return;

                                if (!isRelevantForContext(ref, searchContext, actualToken)) {
                                    return;
                                }

                                const docKey = generateDocKey(ref);
                                if (!candidateDocs.has(docKey)) {
                                    candidateDocs.set(docKey, {
                                        ref: ref,
                                        score: 0,
                                        matchedTokens: new Set(),
                                        context: searchContext
                                    });
                                }

                                const candidate = candidateDocs.get(docKey);
                                candidate.score += calculateTokenScore(actualToken, queryToken, ref);
                                candidate.matchedTokens.add(queryToken);
                            });
                        }
                        cursor.continue();
                    } else {
                        resolve();
                    }
                };
                request.onerror = e => reject(e.target.error);
            });
        }
    } catch (error) {
        console.error('[searchCandidates] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', error);
        throw error;
    }

    return candidateDocs;
}


function isRelevantForContext(ref, searchContext, actualToken) {
    if (searchContext === 'general') {
        return true;
    }

    switch (searchContext) {
        case 'skzi':
            if (ref.store === 'algorithms' && ref.id && typeof ref.id === 'string' && ref.id.startsWith('skzi')) {
                return true;
            }

            return false;

        case 'sedo':
            if (ref.store === 'preferences' && String(ref.id) === SEDO_CONFIG_KEY) {
                return true;
            }
            return false;

        case 'fns':
            return false;

        case 'pfr':
            return false;

        default:
            console.warn(`isRelevantForContext: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π searchContext "${searchContext}"`);
            return false;
    }
}


function generateDocKey(ref) {
    let docKey = `${ref.store}:${ref.id}`;
    if (ref.tableIndex !== undefined) docKey += `#t${ref.tableIndex}`;
    if (ref.rowIndex !== undefined) docKey += `#r${ref.rowIndex}`;
    if (ref.blockIndex !== undefined) docKey += `#b${ref.blockIndex}`;

    if (ref.field) docKey += `#f${String(ref.field).replace(/[:#]/g, '_')}`;
    return docKey;
}


function calculateTokenScore(actualToken, queryToken, ref) {
    let score = 1.0 + Math.pow(actualToken.length, 0.6);

    if (actualToken === queryToken) {
        score += 100 * queryToken.length;
    } else if (actualToken.startsWith(queryToken)) {
        score += 15 * queryToken.length;
    }

    const fieldWeight = ref.weight || 1;
    score *= fieldWeight;

    return score;
}


function sortSearchResults(results) {
    return results.sort((a, b) => {
        if (a.type === 'section_link' && b.type !== 'section_link') return -1;
        if (a.type !== 'section_link' && b.type === 'section_link') return 1;
        if (a.type === 'section_link' && b.type === 'section_link') {
            if (a.score !== undefined && b.score !== undefined && Math.abs(b.score - a.score) > 0.01) return b.score - a.score;
            return (a.title || '').localeCompare(b.title || '');
        }
        if (a.isDirectPvsoOrCodeMatch && !b.isDirectPvsoOrCodeMatch) return -1;
        if (!a.isDirectPvsoOrCodeMatch && b.isDirectPvsoOrCodeMatch) return 1;
        if (a.isExactTitleMatch && !b.isExactTitleMatch) return -1;
        if (!a.isExactTitleMatch && b.isExactTitleMatch) return 1;
        if (Math.abs(b.score - a.score) > 0.01) {
            return b.score - a.score;
        }

        const aIsAlgo = a.type === 'algorithm' || a.type === 'main';
        const bIsAlgo = b.type === 'algorithm' || b.type === 'main';
        if (aIsAlgo && !bIsAlgo) return -1;
        if (!aIsAlgo && bIsAlgo) return 1;

        return (a.title || '').localeCompare(b.title || '');
    });
}


const searchCache = new Map();
const CACHE_TTL = 300000;


function getCachedResults(query) {
    const cached = searchCache.get(query);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
        return cached.results;
    }
    return null;
}


function cacheResults(query, results) {
    searchCache.set(query, {
        results: results,
        timestamp: Date.now()
    });

    if (searchCache.size > 100) {
        const entries = Array.from(searchCache.entries());
        const toDelete = entries
            .filter(([, data]) => Date.now() - data.timestamp > CACHE_TTL)
            .slice(0, 50);
        toDelete.forEach(([key]) => searchCache.delete(key));
    }
}


function sanitizeQuery(query) {
    if (typeof query !== 'string') {

        console.warn(`[sanitizeQuery] –û–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞, –ø–æ–ª—É—á–µ–Ω ${typeof query}. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.`);
        return '';
    }

    let sanitized = query.replace(/[<>\"'&]/g, '').trim();

    sanitized = sanitized.toLowerCase().replace(/—ë/g, '–µ');

    const MAX_QUERY_LENGTH = 200;
    if (sanitized.length > MAX_QUERY_LENGTH) {
        console.warn(`[sanitizeQuery] –ó–∞–ø—Ä–æ—Å "${sanitized.substring(0, 50)}..." (${sanitized.length} —Å–∏–º–≤–æ–ª–æ–≤) –±—ã–ª —É—Å–µ—á–µ–Ω –¥–æ ${MAX_QUERY_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.`);
        sanitized = sanitized.substring(0, MAX_QUERY_LENGTH);
    }
    return sanitized;
}


function trackSearchMetrics(query, resultsCount, executionTime, context) {
    const metrics = {
        query: query,
        resultsCount: resultsCount,
        executionTime: Math.round(executionTime),
        context: context,
        timestamp: new Date().toISOString()
    };

    console.log('[Search Metrics]', metrics);

    try {
        const searchHistory = JSON.parse(localStorage.getItem('searchMetrics') || '[]');
        searchHistory.push(metrics);


        if (searchHistory.length > 1000) {
            searchHistory.splice(0, 100);
        }

        localStorage.setItem('searchMetrics', JSON.stringify(searchHistory));
    } catch (error) {
        console.warn('[trackSearchMetrics] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:', error);
    }
}


async function processSearchResults(candidateDocs, normalizedQuery, originalQuery) {
    const startTime = performance.now();
    console.log(`[processSearchResults V4 - Final Grouping Fix] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${candidateDocs.size} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${originalQuery}"`);

    const finalDocEntries = Array.from(candidateDocs.values())
        .filter(candidate => candidate.matchedTokens.size > 0);
    console.log(`[processSearchResults V4] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ matchedTokens.size > 0: ${finalDocEntries.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.`);

    const filteredEntries = applyFieldFilters(finalDocEntries);
    console.log(`[processSearchResults V4] –ü–æ—Å–ª–µ applyFieldFilters: ${filteredEntries.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.`);

    const fullResults = await loadFullDataForResults(filteredEntries);
    console.log(`[processSearchResults V4] –ü–æ—Å–ª–µ loadFullDataForResults: ${fullResults.length} –ø–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.`);

    const groupedByActualItem = new Map();
    fullResults.forEach(entry => {
        if (!entry || !entry.ref || !entry.itemData || entry.ref.id === undefined) {
            console.warn("[processSearchResults V4] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ entry –ø—Ä–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ:", entry);
            return;
        }

        let groupKey;
        const ref = entry.ref;
        const itemData = entry.itemData;

        if (ref.store === 'telefony' && ref.rowIndex !== undefined) {
            groupKey = `telefony:${ref.id}:${ref.rowIndex}`;
        } else if (ref.store === 'shablony' && ref.blockIndex !== undefined) {
            groupKey = `shablony:${ref.id}:${ref.blockIndex}`;
        } else {
            let actualItemIdValue;
            if (ref.store === 'clientData') {
                actualItemIdValue = 'current';
            } else if (ref.store === 'algorithms' && itemData.id === 'main') {
                actualItemIdValue = 'main';
            } else {
                actualItemIdValue = String(itemData.id || ref.id);
            }
            groupKey = `${ref.store}:${actualItemIdValue}`;
        }

        if (!groupedByActualItem.has(groupKey)) {
            groupedByActualItem.set(groupKey, {
                itemData: entry.itemData,
                totalScore: 0,
                matchedTokensUnion: new Set(),
                context: entry.context,
                refsForConversion: []
            });
        }
        const group = groupedByActualItem.get(groupKey);
        group.refsForConversion.push(entry.ref);
        group.totalScore += entry.score;
        entry.matchedTokens.forEach(token => group.matchedTokensUnion.add(token));
    });
    console.log(`[processSearchResults V4] –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ ${groupedByActualItem.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.`);

    const searchResults = [];
    for (const [groupKey, group] of groupedByActualItem.entries()) {
        if (!group.refsForConversion || group.refsForConversion.length === 0) {
            console.warn(`[processSearchResults V4] –ì—Ä—É–ø–ø–∞ ${groupKey} –Ω–µ –∏–º–µ–µ—Ç refsForConversion, –ø—Ä–æ–ø—É—Å–∫.`);
            continue;
        }

        const representativeRef = group.refsForConversion[0];
        const result = convertItemToSearchResult(representativeRef, group.itemData, group.totalScore);

        if (result) {
            result.highlightTerm = normalizedQuery;
            result.query = originalQuery;

            const lowerOriginalQuery = originalQuery.toLowerCase();

            if (group.itemData && group.itemData.id === SEDO_CONFIG_KEY && representativeRef.store === 'preferences') {
                let sedoCodeMatchFound = false;
                if (group.itemData.tables && Array.isArray(group.itemData.tables)) {
                    for (const table of group.itemData.tables) {
                        if (table.items && Array.isArray(table.items) && table.codeField) {
                            for (const rowItem of table.items) {
                                if (rowItem && typeof rowItem === 'object') {
                                    const codeFieldValue = String(rowItem[table.codeField] || '').toLowerCase();
                                    if (codeFieldValue === lowerOriginalQuery) {
                                        sedoCodeMatchFound = true;
                                        break;
                                    }
                                }
                            }
                        }
                        if (sedoCodeMatchFound) break;
                        if (!table.codeField && table.items && Array.isArray(table.items) && table.columns && table.columns[0]) {
                            const firstColNameLower = table.columns[0].toLowerCase();
                            if (firstColNameLower.includes('–∫–æ–¥') || firstColNameLower.includes('—Ç–∏–ø')) {
                                for (const rowItem of table.items) {
                                    if (rowItem && typeof rowItem === 'object') {
                                        const keys = Object.keys(rowItem);
                                        if (keys.length > 0) {
                                            const firstColValue = String(rowItem[keys[0]] || '').toLowerCase();
                                            if (firstColValue === lowerOriginalQuery) {
                                                sedoCodeMatchFound = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (sedoCodeMatchFound) break;
                    }
                }
                if (sedoCodeMatchFound) {
                    result.isDirectPvsoOrCodeMatch = true;
                    result.score = (result.score || 0) + 100000;
                }
            } else {
                let itemTitleOrName = result.title || '';

                if (itemTitleOrName.toLowerCase() === lowerOriginalQuery) {
                    result.isExactTitleMatch = true;
                    result.score = (result.score || 0) + 50000;
                }
            }
            searchResults.push(result);
        } else {
            console.warn(`[processSearchResults V4] convertItemToSearchResult –≤–µ—Ä–Ω—É–ª null –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupKey}`, group);
        }
    }
    const endTime = performance.now();
    console.log(`[processSearchResults V4] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${(endTime - startTime).toFixed(2)}ms. –§–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResults.length}.`);
    return searchResults;
}


function applyFieldFilters(docEntries) {
    const searchFieldCheckboxes = document.querySelectorAll('.search-field-filter:checked');
    if (searchFieldCheckboxes.length === 0 || searchFieldCheckboxes.length >= 3) {
        return docEntries;
    }

    const selectedFields = new Set(Array.from(searchFieldCheckboxes).map(cb => cb.value));

    return docEntries.filter(entry => {
        const ref = entry.ref;

        for (const field of selectedFields) {
            if (isFieldMatch(ref, field)) {
                return true;
            }
        }
        return false;
    });
}


function isFieldMatch(ref, selectedField) {
    const fieldMapping = {
        'title': ['title', 'name', 'tableTitle'],
        'description': ['description', 'notes', 'content'],
        'steps': ['steps', 'stepTitle']
    };

    const matchingFields = fieldMapping[selectedField] || [selectedField];
    return matchingFields.some(field =>
        ref.field === field || ref.field?.includes(field)
    );
}


async function loadFullDataForResults(docEntries) {
    const storeGroups = new Map();

    docEntries.forEach(entry => {
        const storeName = entry.ref.store;
        if (!storeGroups.has(storeName)) {
            storeGroups.set(storeName, new Set());
        }
        storeGroups.get(storeName).add(entry.ref.id);
    });

    const loadedData = new Map();

    for (const [storeName, ids] of storeGroups.entries()) {
        const storeData = new Map();
        loadedData.set(storeName, storeData);

        try {
            if (storeName === 'telefony' || storeName === 'shablony') {
                ids.forEach(id => {
                    storeData.set(String(id), { id: id, _isPlaceholder: true });
                });
                console.log(`[loadFullDataForResults] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ IndexedDB –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${storeName}`);
                continue;
            }

            if (storeName === 'algorithms') {
                const algoContainer = await getFromIndexedDB('algorithms', 'all');
                if (algoContainer?.data) {

                    if (algoContainer.data.main) {
                        storeData.set('main', algoContainer.data.main);
                    }

                    Object.keys(algoContainer.data).forEach(sectionKey => {
                        if (sectionKey !== 'main' && Array.isArray(algoContainer.data[sectionKey])) {
                            algoContainer.data[sectionKey].forEach(algo => {
                                if (algo?.id) {
                                    storeData.set(String(algo.id), algo);
                                }
                            });
                        }
                    });
                }
            } else if (storeName === 'clientData') {
                const clientData = await getFromIndexedDB('clientData', 'current');
                if (clientData) {
                    storeData.set('current', clientData);
                }
            } else {

                const items = await getAllFromIndexedDB(storeName);
                items.forEach(item => {
                    if (item?.id !== undefined) {
                        storeData.set(String(item.id), item);
                    }
                });
            }
        } catch (error) {
            console.error(`[loadFullDataForResults] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${storeName}:`, error);
        }
    }

    const resultsWithData = [];

    docEntries.forEach(entry => {
        const storeData = loadedData.get(entry.ref.store);
        if (storeData) {
            const itemData = storeData.get(String(entry.ref.id));
            if (itemData) {
                resultsWithData.push({
                    ...entry,
                    itemData: itemData
                });
            }
        }
    });

    return resultsWithData;
}


async function performSearchWithErrorHandling(query) {
    const startTime = performance.now();
    try {
        await performSearch(query);
    } catch (error) {
        const endTime = performance.now();
        console.error('[Search Error]', error);

        if (typeof trackSearchMetrics === 'function') {
            trackSearchMetrics(query, 0, endTime - startTime, 'search_failure_wrapper');
        }

        try {
            await performFallbackSearch(query);
        } catch (fallbackError) {
            console.error('[Fallback Search Error]', fallbackError);

            if (typeof showSearchError === 'function') {
                showSearchError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            } else if (typeof showNotification === 'function') {
                showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
            }
        }
    }
}


async function performFallbackSearch(query) {
    const sectionMatches = findSectionMatches(query.trim().toLowerCase());
    renderSearchResults(sectionMatches, query);
}


let searchTimeout;

function debouncedSearch(query, delay = 300) {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
        performSearch(query);
    }, delay);
}


function addSearchResultSummary(results, query, context, isExactMatch) {
    const summary = document.createElement('div');
    summary.className = 'search-summary p-2 text-sm text-gray-600 dark:text-gray-400 border-b';

    let summaryText = `–ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç${results.length === 1 ? '' : (results.length < 5 ? '–∞' : '–æ–≤')}`;
    if (isExactMatch && context !== 'general') {
        summaryText += ` –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é "${query}" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${getContextName(context)}`;
    }
    summary.textContent = summaryText;
    return summary;
}


function getContextName(context) {
    const names = {
        'fns': '–§–ù–° –∏ –Ω–∞–ª–æ–≥–∏',
        'sedo': '–°–≠–î–û',
        'pfr': '–ü–§–† –∏ –ø–µ–Ω—Å–∏–∏',
        'skzi': '–°–ö–ó–ò –∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è'
    };
    return names[context] || '–û–±—â–∏–π –ø–æ–∏—Å–∫';
}


const synonyms = {
    '—Å—ç–¥–æ': ['–ø–≤—Å–æ', '—Å—Ñ—Ä', '—Ñ—Å—Å'],
    '—ç–ª–Ω': ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ª–∏—Å—Ç–æ–∫', '–±–æ–ª—å–Ω–∏—á–Ω—ã–π'],
    '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ': ['–∏–∑–≤–µ—â–µ–Ω–∏–µ', '—Å–æ–æ–±—â–µ–Ω–∏–µ']
};

function expandQueryWithSynonyms(query) {
    const words = query.toLowerCase().split(/\s+/);
    const expanded = new Set(words);

    words.forEach(word => {
        if (synonyms[word]) {
            synonyms[word].forEach(syn => expanded.add(syn));
        }

        for (const [key, syns] of Object.entries(synonyms)) {
            if (syns.includes(word)) {
                expanded.add(key);
            }
        }
    });
    return Array.from(expanded);
}


function isRegexQuery(query) {
    return query.startsWith('/') && query.endsWith('/');
}


async function searchWithRegex(regexStr) {
    const regex = new RegExp(regexStr.slice(1, -1), 'i');
    const results = [];
    const stores = ['algorithms', 'links', 'bookmarks', 'reglaments', 'extLinks'];

    for (const storeName of stores) {
        const items = await getAllFromIndexedDB(storeName);
        items.forEach(item => {
            const texts = getTextForItem(storeName, item);
            for (const text of Object.values(texts)) {
                if (regex.test(text)) {
                    results.push({
                        ...item,
                        originalType: storeName,
                        matchType: 'regex'
                    });
                    break;
                }
            }
        });
    }
    return results;
}


const searchAnalytics = {
    queries: new Map(),

    logQuery(query, resultCount) {
        const normalized = query.toLowerCase().trim();
        const existing = this.queries.get(normalized) || { count: 0, results: [] };
        existing.count++;
        existing.results.push({
            timestamp: Date.now(),
            resultCount
        });
        this.queries.set(normalized, existing);
    },

    getTopQueries(limit = 10) {
        return Array.from(this.queries.entries())
            .sort((a, b) => b[1].count - a[1].count)
            .slice(0, limit)
            .map(([query, data]) => ({
                query,
                count: data.count,
                avgResults: data.results.reduce((sum, r) => sum + r.resultCount, 0) / data.results.length
            }));
    }
};


function getTextForItem(storeName, itemData) {
    if (!itemData || typeof itemData !== 'object') {
        return {};
    }
    let textsByField = {};
    const MAIN_SEDO_GLOBAL_CONTENT_FIELD = "mainSedoGlobalContent";

    const cleanHtml = (text) => {
        if (typeof text !== 'string') return '';
        return text.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();
    };

    switch (storeName) {
        case 'telefony':
            const headers = Object.keys(itemData).filter(key => !key.startsWith('_'));
            const firstColumnKey = headers[0];
            const otherColumnKeys = headers.slice(1);
            const isSectionHeader = itemData[firstColumnKey] && otherColumnKeys.every(key => !itemData[key] || String(itemData[key]).trim() === '');

            if (isSectionHeader) {
                textsByField.header = itemData[firstColumnKey];
            } else {
                textsByField.cell = Object.values(itemData).filter(val => typeof val === 'string' && val.trim() !== '' && !val.startsWith('_')).join(' ');
            }
            break;
        case 'shablony':
            if (itemData.title) {
                textsByField[`h${itemData.level || 3}`] = itemData.title;
            }
            if (itemData.content) {
                textsByField.content = itemData.content;
            }
            break;
        case 'algorithms':
            textsByField = getAlgorithmText(itemData);
            break;
        case 'links':
            if (itemData.title) textsByField.title = cleanHtml(itemData.title);
            if (itemData.link) textsByField.link_path = itemData.link;
            if (itemData.description) textsByField.description = cleanHtml(itemData.description);
            break;
        case 'bookmarks':
            if (itemData.title) textsByField.title = cleanHtml(itemData.title);
            if (itemData.description) textsByField.description = cleanHtml(itemData.description);

            if (itemData.url) {
                textsByField.url_original = itemData.url;
                try {
                    let fullUrl = itemData.url;
                    if (!fullUrl.match(/^([a-zA-Z][a-zA-Z0-9+.-]*:)/i) && fullUrl.includes('.')) {
                        if (!fullUrl.startsWith('//')) {
                            fullUrl = "https://" + fullUrl;
                        } else {
                            fullUrl = "https:" + fullUrl;
                        }
                    } else if (!fullUrl.match(/^([a-zA-Z][a-zA-Z0-9+.-]*:)/i) && !fullUrl.includes('.')) {
                        textsByField.url_fallback_text = fullUrl.replace(/[.:/?=&#%@_]/g, ' ');
                    }

                    const urlObj = new URL(fullUrl);
                    if (urlObj.hostname) {
                        textsByField.url_hostname = urlObj.hostname.replace(/^www\./, '');
                    }
                    if (urlObj.pathname && urlObj.pathname !== '/') {
                        const pathParts = urlObj.pathname.split(/[\/\-_.]+/).filter(p => p && p.length > 2);
                        pathParts.forEach((part, i) => {
                            textsByField[`url_path_${i}`] = part;
                        });
                    }
                    if (urlObj.search) {
                        const searchParamsText = Array.from(urlObj.searchParams.entries())
                            .map(([key, value]) => `${key} ${value}`)
                            .join(' ');
                        if (searchParamsText.trim()) {
                            textsByField.url_query_params = searchParamsText.replace(/[=&#%_]/g, ' ');
                        }
                    }
                } catch (e) {
                    console.warn(`[getTextForItem] Could not parse URL for bookmark indexing: ${itemData.url}`, e);
                    textsByField.url_fallback_text = itemData.url.replace(/[.:/?=&#%@_]/g, ' ');
                }
            }
            if (itemData._folderNameForIndex) {
                textsByField.folderName = cleanHtml(itemData._folderNameForIndex);
            }
            break;
        case 'reglaments':
            if (itemData.title) textsByField.title = cleanHtml(itemData.title);
            if (itemData.content) textsByField.content = cleanHtml(itemData.content);
            if (itemData.category && typeof categoryDisplayInfo === 'object' && categoryDisplayInfo[itemData.category]) {
                textsByField.categoryName = cleanHtml(categoryDisplayInfo[itemData.category].title);
            } else if (itemData.category) {
                textsByField.categoryName = cleanHtml(itemData.category);
            }
            break;
        case 'extLinks':
            if (itemData.title) textsByField.title = cleanHtml(itemData.title);
            if (itemData.url) textsByField.url_full = itemData.url;
            try {
                let fullUrlExt = itemData.url;
                if (!fullUrlExt.match(/^([a-zA-Z][a-zA-Z0-9+.-]*:)/i) && fullUrlExt.includes('.')) {
                    if (!fullUrlExt.startsWith('//')) {
                        fullUrlExt = "https://" + fullUrlExt;
                    } else {
                        fullUrlExt = "https:" + fullUrlExt;
                    }
                }
                const urlObjExt = new URL(fullUrlExt);
                if (urlObjExt.hostname) {
                    textsByField.url_hostname = urlObjExt.hostname.replace(/^www\./, '');
                }
            } catch (e) {
                console.warn(`[getTextForItem] Could not parse URL for extLink indexing: ${itemData.url}`, e);
                textsByField.url_fallback_text = itemData.url.replace(/[.:/?=&#%@_]/g, ' ');
            }
            if (itemData.description) textsByField.description = cleanHtml(itemData.description);
            if (itemData.category && typeof extLinkCategoryInfo === 'object' && extLinkCategoryInfo[itemData.category]) {
                textsByField.categoryName = cleanHtml(extLinkCategoryInfo[itemData.category].name);
            }
            break;
        case 'clientData':
            if (itemData.notes) {
                textsByField.notes = cleanHtml(itemData.notes);
            }
            break;
        case 'bookmarkFolders':
            if (itemData.name) textsByField.name = cleanHtml(itemData.name);
            break;
        case 'preferences':
            const sedoKey = typeof SEDO_CONFIG_KEY !== 'undefined' ? SEDO_CONFIG_KEY : 'sedoTypesConfigGlobal_fallback';
            if (itemData.id === sedoKey) {
                textsByField.name = "–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –°–≠–î–û –°–§–† –§–°–°";
                let allSedoTextParts = [
                    "—Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å—ç–¥–æ", "—Å—Ñ—Ä", "—Ñ—Å—Å", "–ø–≤—Å–æ", "–∏–∑–≤–µ—â–µ–Ω–∏–µ", "—ç–ª–Ω", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                    "–∑–∞–ø—Ä–æ—Å", "–æ—Ç–≤–µ—Ç", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–æ–±–∏–π",
                    "–ø—Ä—è–º—ã–µ –≤—ã–ø–ª–∞—Ç—ã", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥", "–≤—Ö–æ–¥—è—â–∏–µ", "–∏—Å—Ö–æ–¥—è—â–∏–µ"
                ];

                if (itemData.articleLinks && Array.isArray(itemData.articleLinks)) {
                    itemData.articleLinks.forEach(linkItem => {
                        if (linkItem && typeof linkItem === 'object') {
                            if (linkItem.url && typeof linkItem.url === 'string' && linkItem.url.trim()) {
                                allSedoTextParts.push(linkItem.url.trim().toLowerCase().replace(/[.:/?=&#%@_]/g, ' '));
                            }
                            if (linkItem.text && typeof linkItem.text === 'string' && linkItem.text.trim()) {
                                allSedoTextParts.push(linkItem.text.trim().toLowerCase());
                            }
                        } else if (typeof linkItem === 'string' && linkItem.trim()) {
                            allSedoTextParts.push(linkItem.trim().toLowerCase().replace(/[.:/?=&#%@_]/g, ' '));
                        }
                    });
                }

                if (itemData.tables && Array.isArray(itemData.tables)) {
                    itemData.tables.forEach((table, tableIndex) => {
                        if (table.title) {
                            textsByField[`tableTitle_t${tableIndex}`] = table.title.toLowerCase();
                        }
                        if (Array.isArray(table.columns)) {
                            allSedoTextParts.push(...table.columns.map(c => String(c).toLowerCase()));
                        }
                        if (Array.isArray(table.items)) {
                            table.items.forEach((rowItem, rowIndex) => {
                                if (table.isStaticList && typeof rowItem === 'string') {
                                    textsByField[`staticListItem_t${tableIndex}_r${rowIndex}`] = rowItem.toLowerCase();
                                } else if (typeof rowItem === 'object' && rowItem !== null) {
                                    Object.entries(rowItem).forEach(([key, cellValue]) => {
                                        if (cellValue !== null && cellValue !== undefined && String(cellValue).trim() !== '') {
                                            textsByField[`tableCell_t${tableIndex}_r${rowIndex}_f${key}`] = String(cellValue).toLowerCase();
                                        }
                                    });
                                }
                            });
                        }
                    });
                }
                const uniqueLowercaseParts = Array.from(new Set(allSedoTextParts.map(part => String(part).trim()).filter(part => part.length > 0)));
                textsByField[MAIN_SEDO_GLOBAL_CONTENT_FIELD] = uniqueLowercaseParts.join(' ');

            } else if (itemData.id === 'uiSettings') {
                textsByField.name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Ç–µ–º–∞ —Ü–≤–µ—Ç —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç –ø–∞–Ω–µ–ª–∏";
            } else if (itemData.id === CATEGORY_INFO_KEY) {
                textsByField.name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤";
                if (itemData.data && typeof itemData.data === 'object') {
                    Object.values(itemData.data).forEach(catInfo => {
                        if (catInfo && catInfo.title) {
                            textsByField[`category_title_${catInfo.title.toLowerCase().replace(/\s/g, '_')}`] = catInfo.title;
                        }
                    });
                }
            }
            break;
        default:
            Object.keys(itemData).forEach(key => {
                const excludedKeys = ['id', 'category', 'section', 'color', 'icon', 'link', 'url', '_originalStore', '_sectionKey', 'blob', 'parentId', 'parentType', 'stepIndex', 'screenshotIds', 'folder'];
                if (typeof itemData[key] === 'string' && !excludedKeys.includes(key) && !key.toLowerCase().includes('date') && !key.toLowerCase().includes('timestamp')) {
                    const cleanedValue = cleanHtml(itemData[key]);
                    if (cleanedValue && textsByField[key] === undefined) {
                        textsByField[key] = cleanedValue;
                    }
                }
            });
            if (itemData.title && textsByField.title === undefined) textsByField.title = cleanHtml(itemData.title);
            if (itemData.name && textsByField.name === undefined) textsByField.name = cleanHtml(itemData.name);
            if (itemData.description && textsByField.description === undefined) textsByField.description = cleanHtml(itemData.description);
            if (itemData.content && textsByField.content === undefined) textsByField.content = cleanHtml(itemData.content);
            break;
    }
    return textsByField;
}


function findSectionMatches(normalizedQuery) {
    const sectionMatches = [];
    if (typeof tabsConfig === 'undefined' || !Array.isArray(tabsConfig)) {
        console.warn("[findSectionMatches] tabsConfig is not defined or not an array. Cannot find section matches.");
        return sectionMatches;
    }

    tabsConfig.forEach(tab => {
        const tabNameLower = (tab.name || '').toLowerCase().replace(/—ë/g, '–µ');
        const tabIdLower = (tab.id || '').toLowerCase();
        const queryFoundInId = tabIdLower.includes(normalizedQuery);
        const queryFoundInName = tabNameLower.includes(normalizedQuery);

        if (queryFoundInId || queryFoundInName) {
            let sectionScore = 10000;
            if (tabIdLower === normalizedQuery || tabNameLower === normalizedQuery) {
                sectionScore += 5000;
            }

            sectionMatches.push({
                section: tab.id,
                type: 'section_link',
                id: `section-${tab.id}`,
                title: `–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª "${tab.name}"`,
                description: `–û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É ${tab.name}`,
                score: sectionScore
            });
        }
    });
    return sectionMatches;
}


async function updateSearchIndex(storeName, itemId, newItemData, operation, oldItemData = null) {
    const LOG_PREFIX_USI = `[updateSearchIndex V4 - Google Docs Logic]`;

    if (storeName === 'telefony' || storeName === 'shablony') {
        const docId = itemId;
        console.log(`${LOG_PREFIX_USI} –ù–∞—á–∞–ª–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–ª—è Google Doc: ${storeName} (ID: ${docId})`);

        await removeFromSearchIndex(docId, storeName);
        console.log(`${LOG_PREFIX_USI} –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è ${docId} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∏–Ω–¥–µ–∫—Å–∞.`);

        if (operation !== 'delete' && Array.isArray(newItemData)) {
            if (storeName === 'telefony') {
                const rows = newItemData;
                for (let i = 0; i < rows.length; i++) {
                    const row = rows[i];
                    await updateSearchIndexForItem({ ...row, _internal_row_index: i }, 'telefony', docId);
                }
            } else if (storeName === 'shablony') {
                const blocks = newItemData;
                for (let i = 0; i < blocks.length; i++) {
                    const block = blocks[i];
                    await updateSearchIndexForItem({ ...block, _internal_block_index: block.originalIndex }, 'shablony', docId);
                }
            }
        }
        console.log(`${LOG_PREFIX_USI} –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–ª—è ${storeName} (ID: ${docId}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
        return;
    }

    if (storeName === 'blacklistedClients') {
        console.log(`${LOG_PREFIX_USI} Indexing of 'blacklistedClients' is disabled. Skipping operation for ${storeName}:${itemId}.`);
        return;
    }

    if (!db) {
        console.warn(`${LOG_PREFIX_USI} DB not ready. Index for ${storeName}:${itemId} (op: ${operation}) not updated.`);
        return;
    }
    if (storeName === 'searchIndex') {
        console.log(`${LOG_PREFIX_USI} Attempt to index 'searchIndex' store. Skipping.`);
        return;
    }

    console.log(`${LOG_PREFIX_USI} Operation: ${operation}, Store: ${storeName}, ItemID: ${itemId}`);

    if ((operation === 'add' || operation === 'update') && !newItemData) {
        console.error(`${LOG_PREFIX_USI} newItemData is required for '${operation}' operation on ${storeName}:${itemId}. Index not updated.`);
        return;
    }

    let refItemId;
    if (storeName === 'clientData') {
        refItemId = 'current';
    } else if (storeName === 'preferences' && itemId === (typeof SEDO_CONFIG_KEY !== 'undefined' ? SEDO_CONFIG_KEY : null)) {
        refItemId = (typeof SEDO_CONFIG_KEY !== 'undefined' ? SEDO_CONFIG_KEY : null);
        if (refItemId === null) {
            console.error(`${LOG_PREFIX_USI} SEDO_CONFIG_KEY is not defined. Cannot process SEDO preferences for indexing.`);
            return;
        }
    } else if (itemId === undefined || itemId === null) {
        if (newItemData && newItemData.id !== undefined) {
            refItemId = String(newItemData.id);
        } else {
            console.error(`${LOG_PREFIX_USI} itemId is undefined/null and newItemData.id is also undefined for store '${storeName}'. Operation: ${operation}. Index not updated.`);
            return;
        }
    }
    else {
        const storeConfig = storeConfigs.find(sc => sc.name === storeName);
        if (storeConfig && storeConfig.options && storeConfig.options.autoIncrement) {
            refItemId = Number(itemId);
            if (isNaN(refItemId)) {
                console.error(`${LOG_PREFIX_USI} Cannot convert itemId '${itemId}' to number for autoIncrement store '${storeName}'.`);
                return;
            }
        } else {
            refItemId = String(itemId);
        }
    }

    try {
        if (operation === 'delete') {
            await removeFromSearchIndex(refItemId, storeName);
            console.log(`${LOG_PREFIX_USI} Index entries removed for ${storeName}:${refItemId}`);
        } else if (operation === 'add' || operation === 'update') {
            let dataForIndexing = { ...newItemData };
            if (dataForIndexing.id === undefined && refItemId !== undefined) {
                dataForIndexing.id = refItemId;
            }

            if (storeName === 'bookmarks' && dataForIndexing.folder && dataForIndexing.folder !== ARCHIVE_FOLDER_ID) {
                try {
                    const folderIdToFetch = parseInt(dataForIndexing.folder, 10);
                    if (!isNaN(folderIdToFetch)) {
                        const folderData = await getFromIndexedDB('bookmarkFolders', folderIdToFetch);
                        if (folderData && folderData.name) {
                            dataForIndexing._folderNameForIndex = folderData.name;
                            console.log(`${LOG_PREFIX_USI} Added folder name '${folderData.name}' for indexing bookmark ${refItemId}.`);
                        } else {
                            console.warn(`${LOG_PREFIX_USI} Folder data not found for bookmark ${refItemId}, folder ID ${folderIdToFetch}.`);
                        }
                    } else {
                        console.warn(`${LOG_PREFIX_USI} Invalid folder ID '${dataForIndexing.folder}' for bookmark ${refItemId}. Cannot fetch folder name.`);
                    }
                } catch (e) {
                    console.warn(`${LOG_PREFIX_USI} Could not fetch folder name for bookmark ${refItemId}, folder ID ${dataForIndexing.folder}: ${e.message}`);
                }
            }

            if (storeName === 'bookmarks') {
                const isNewItemArchived = dataForIndexing && dataForIndexing.folder === ARCHIVE_FOLDER_ID;
                const isOldItemArchived = oldItemData && oldItemData.folder === ARCHIVE_FOLDER_ID;

                if (operation === 'add') {
                    if (isNewItemArchived) {
                        console.log(`${LOG_PREFIX_USI} Bookmark ${dataForIndexing.id} (new) is archived. Not indexing.`);
                    } else {
                        console.log(`${LOG_PREFIX_USI} Indexing new non-archived bookmark ${dataForIndexing.id}.`);
                        await updateSearchIndexForItem(dataForIndexing, storeName);
                    }
                } else if (operation === 'update') {
                    if (!isNewItemArchived && oldItemData) {
                        await removeFromSearchIndex(refItemId, storeName);
                    }

                    if (isNewItemArchived && !isOldItemArchived) {
                        console.log(`${LOG_PREFIX_USI} Bookmark ${dataForIndexing.id} moved TO archive. Ensuring removal from index.`);
                        await removeFromSearchIndex(refItemId, storeName);
                    } else if (!isNewItemArchived && isOldItemArchived) {
                        console.log(`${LOG_PREFIX_USI} Bookmark ${dataForIndexing.id} moved FROM archive. Indexing.`);
                        await updateSearchIndexForItem(dataForIndexing, storeName);
                    } else if (!isNewItemArchived && !isOldItemArchived) {
                        console.log(`${LOG_PREFIX_USI} Updating non-archived bookmark ${dataForIndexing.id} in index.`);
                        await updateSearchIndexForItem(dataForIndexing, storeName);
                    } else {
                        console.log(`${LOG_PREFIX_USI} Bookmark ${dataForIndexing.id} updated within archive. Ensuring it's not in index.`);
                        await removeFromSearchIndex(refItemId, storeName);
                    }
                }
            } else {
                if (operation === 'update' && oldItemData) {
                    await removeFromSearchIndex(refItemId, storeName);
                }
                await updateSearchIndexForItem(dataForIndexing, storeName);
            }
            console.log(`${LOG_PREFIX_USI} Index processing finished for ${storeName}:${refItemId}`);
        } else {
            console.warn(`${LOG_PREFIX_USI} Unknown operation type: ${operation}. Index not updated for ${storeName}:${itemId}.`);
        }
    } catch (error) {
        console.error(`${LOG_PREFIX_USI} Error during index operation '${operation}' for ${storeName}:${refItemId}:`, error);
        if (typeof showNotification === 'function') {
            showNotification(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è ${storeName}.`, "error");
        }
    }
}


async function cleanAndRebuildSearchIndex() {
    console.log("[cleanAndRebuildSearchIndex] –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞...");
    try {
        await clearIndexedDBStore('searchIndex');
        console.log("[cleanAndRebuildSearchIndex] –ò–Ω–¥–µ–∫—Å –æ—á–∏—â–µ–Ω.");
        await saveToIndexedDB('preferences', {
            id: 'searchIndexStatus',
            built: false,
            version: DB_VERSION,
            timestamp: Date.now()
        });

        await checkAndBuildIndex(true);
        console.log("[cleanAndRebuildSearchIndex] –ò–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω.");

    } catch (error) {
        console.error("[cleanAndRebuildSearchIndex] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞:", error);
        if (typeof showNotification === 'function') {
            showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞.", "error");
        }
    }
}


async function checkAndBuildIndex(forceRebuild = false, externalProgressCallback = null, context = 'normal') {
    if (!db) {
        console.warn("checkAndBuildIndex: DB not initialized.");
        if (externalProgressCallback) externalProgressCallback(0, 0, true);
        return;
    }
    console.log(`checkAndBuildIndex: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞. –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context}`);

    const REINDEX_MESSAGE = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ";

    try {
        const indexStatus = await getFromIndexedDB('preferences', 'searchIndexStatus');
        const needsRebuild = !indexStatus || !indexStatus.built || indexStatus.version !== DB_VERSION || indexStatus.error || forceRebuild;

        if (needsRebuild) {
            const dbJustUpgraded = sessionStorage.getItem('dbJustUpgraded') === 'true';

            if (context === 'import') {
                console.log("[checkAndBuildIndex] –ö–æ–Ω—Ç–µ–∫—Å—Ç 'import'. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
                if (loadingOverlayManager && loadingOverlayManager.updateProgress) {
                    loadingOverlayManager.updateProgress(
                        loadingOverlayManager.currentProgressValue || 45,
                        REINDEX_MESSAGE
                    );
                }
            } else if (dbJustUpgraded) {
                console.log("[checkAndBuildIndex] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
                if (loadingOverlayManager && loadingOverlayManager.updateProgress) {
                    loadingOverlayManager.updateProgress(
                        loadingOverlayManager.currentProgressValue || 45,
                        REINDEX_MESSAGE
                    );
                }
                sessionStorage.removeItem('dbJustUpgraded');
            }

            if (forceRebuild) console.log("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞.");
            else if (!indexStatus) console.log("–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            else if (!indexStatus.built) console.log("–ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –±—ã–ª –ø–æ—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω —Å –æ—à–∏–±–∫–æ–π: " + (indexStatus.error || 'N/A'));
            else if (indexStatus.version !== DB_VERSION) console.log(`–í–µ—Ä—Å–∏—è –∏–Ω–¥–µ–∫—Å–∞ (${indexStatus.version}) —É—Å—Ç–∞—Ä–µ–ª–∞, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ë–î (${DB_VERSION}).`);
            else if (indexStatus.error) console.log(`–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π: ${indexStatus.error}`);

            const searchProgressEl = !externalProgressCallback ? document.getElementById('search-index-progress') : null;
            const searchProgressTextEl = !externalProgressCallback ? document.getElementById('search-index-progress-text') : null;

            if (searchProgressEl && searchProgressTextEl) {
                searchProgressEl.style.display = 'inline-block';
                searchProgressTextEl.style.display = 'inline';
                searchProgressEl.value = 0;
                searchProgressTextEl.textContent = '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: 0%';
            }

            const actualProgressCallback = externalProgressCallback || ((processed, total, error) => {
                if (searchProgressEl && searchProgressTextEl) {
                    if (error) {
                        searchProgressTextEl.textContent = '–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏!';
                        searchProgressEl.value = 100;
                        return;
                    }
                    if (total > 0) {
                        const percentage = Math.round((processed / total) * 100);
                        searchProgressTextEl.textContent = `–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: ${percentage}% (${processed}/${total})`;
                        searchProgressEl.value = percentage;
                        searchProgressEl.max = 100;
                    } else if (processed === 0 && total === 0) {
                        searchProgressTextEl.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.';
                        searchProgressEl.value = 100;
                    }
                }
            });

            await buildInitialSearchIndex(actualProgressCallback);

            if (searchProgressEl && searchProgressTextEl) {
                setTimeout(() => {
                    if (searchProgressEl) searchProgressEl.style.display = 'none';
                    if (searchProgressTextEl) searchProgressTextEl.style.display = 'none';
                }, 3000);
            }

        } else {
            console.log("–ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫—Ç—É–∞–ª–µ–Ω –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è.");
            if (externalProgressCallback) externalProgressCallback(1, 1, false);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–ª–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞:", error);
        if (typeof showNotification === 'function') {
            showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º.", "error", 10000);
        }
        if (externalProgressCallback) externalProgressCallback(0, 0, true);
    }
}


function truncateText(text, maxLength) {
    if (!text || typeof text !== 'string') return '';
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '‚Ä¶';
}


function highlightText(text, tokensToHighlight) {
    if (!text) return '';
    if (!tokensToHighlight || tokensToHighlight.length === 0) return escapeHTML(text);

    const escapedTokens = tokensToHighlight.map(token => token.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));

    escapedTokens.sort((a, b) => b.length - a.length);

    const regex = new RegExp(`(${escapedTokens.join('|')})`, 'gi');

    return escapeHTML(text).replace(regex, '<mark>$1</mark>');
}


async function buildInitialSearchIndex(progressCallback) {
    const LOG_PREFIX_BUILD = "[SearchIndexBuild V13 - Batch Optimized]";
    if (!db) {
        console.error(`${LOG_PREFIX_BUILD} Cannot build search index: DB not initialized.`);
        if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
        try {
            if (typeof saveToIndexedDB === 'function') {
                await saveToIndexedDB('preferences', { id: 'searchIndexStatus', built: false, error: "DB not initialized", version: DB_VERSION, timestamp: Date.now() });
            }
        } catch (e) { console.error(`${LOG_PREFIX_BUILD} Error saving failed searchIndexStatus:`, e); }
        if (progressCallback) progressCallback(0, 0, true);
        return;
    }
    console.log(`${LOG_PREFIX_BUILD} Starting to build initial search index with BATCHING...`);

    let overallSuccess = true;
    let processedItems = 0;
    let totalItemsToEstimate = 0;
    const indexData = new Map();

    try {
        console.log(`${LOG_PREFIX_BUILD} Clearing existing search index...`);
        await clearIndexedDBStore('searchIndex');
        console.log(`${LOG_PREFIX_BUILD} Existing search index cleared.`);

        const sourcesToProcess = [
            { name: 'algorithms', type: 'algorithms' },
            { name: 'reglaments', type: 'reglaments' },
            { name: 'links', type: 'links' },
            { name: 'extLinks', type: 'extLinks' },
            { name: 'bookmarks', type: 'bookmarks' },
            { name: 'bookmarkFolders', type: 'bookmarkFolders' },
            { name: 'clientData', type: 'clientData' },
            { name: 'preferences', type: 'preferences', keyForSpecificItem: (typeof SEDO_CONFIG_KEY !== 'undefined' ? SEDO_CONFIG_KEY : null) }
        ];

        for (const source of sourcesToProcess) {
            try {
                if (source.name === 'algorithms') {
                    const algoContainer = await getFromIndexedDB('algorithms', 'all');
                    if (algoContainer && algoContainer.data) {
                        if (algoContainer.data.main) totalItemsToEstimate++;
                        Object.keys(algoContainer.data).forEach(key => {
                            if (key !== 'main' && Array.isArray(algoContainer.data[key])) {
                                totalItemsToEstimate += algoContainer.data[key].length;
                            }
                        });
                    }
                } else if (source.keyForSpecificItem && source.name === 'preferences' && source.keyForSpecificItem) {
                    const specificItem = await getFromIndexedDB(source.name, source.keyForSpecificItem);
                    if (specificItem) totalItemsToEstimate++;
                } else {
                    const count = await performDBOperation(source.name, "readonly", store => store.count());
                    totalItemsToEstimate += count;
                }
            } catch (e) { console.warn(`${LOG_PREFIX_BUILD} Could not count items in ${source.name}: ${e.message}`); }
        }
        totalItemsToEstimate += 2;
        console.log(`${LOG_PREFIX_BUILD} Estimated total items for indexing: ${totalItemsToEstimate}`);
        if (progressCallback) progressCallback(processedItems, totalItemsToEstimate, false);


        let bookmarkFoldersMap = new Map();
        try {
            const folders = await getAllFromIndexedDB('bookmarkFolders');
            folders.forEach(folder => bookmarkFoldersMap.set(String(folder.id), folder.name));
        } catch (e) { console.warn(`${LOG_PREFIX_BUILD} Could not pre-fetch bookmark folder names: ${e.message}`); }

        const processItemInMemory = (itemData, storeName) => {
            const textsByField = getTextForItem(storeName, itemData);
            let indexableId = itemData.id;
            if (storeName === 'clientData') indexableId = 'current';
            if (storeName === 'algorithms' && itemData.id === 'main') indexableId = 'main';

            if (Object.keys(textsByField).length === 0) return;

            for (const [fieldKey, textContent] of Object.entries(textsByField)) {
                if (!textContent || typeof textContent !== 'string' || textContent.trim() === "") continue;

                const tokens = tokenize(textContent);
                const storeWeights = FIELD_WEIGHTS[storeName] || FIELD_WEIGHTS.default;
                const fieldWeight = storeWeights[fieldKey] || 1.0;

                const refDetails = { store: storeName, type: storeName, id: String(indexableId), field: fieldKey, weight: fieldWeight };

                if (storeName === 'preferences' && itemData.id === SEDO_CONFIG_KEY) {
                    const parts = fieldKey.split('_');
                    if (parts.length >= 3) {
                        if (parts[0] === 'tableCell') {
                            refDetails.tableIndex = parseInt(parts[1].substring(1));
                            refDetails.rowIndex = parseInt(parts[2].substring(1));
                            refDetails.field = parts[3]?.substring(1) || fieldKey;
                        } else if (parts[0] === 'staticListItem') {
                            refDetails.tableIndex = parseInt(parts[1].substring(1));
                            refDetails.rowIndex = parseInt(parts[2].substring(1));
                            refDetails.field = 'staticListItem';
                        }
                    }
                }

                for (const token of tokens) {
                    if (token.length < MIN_TOKEN_LEN_FOR_INDEX && !isExceptionShortToken(token)) continue;
                    if (!indexData.has(token)) indexData.set(token, []);
                    const refs = indexData.get(token);
                    if (refs.length < MAX_REFS_PER_WORD) {
                        refs.push(refDetails);
                    }
                }
            }
        };

        for (const source of sourcesToProcess) {
            console.log(`${LOG_PREFIX_BUILD} Processing source: ${source.name}`);
            if (source.name === 'algorithms') {
                const algoContainer = await getFromIndexedDB('algorithms', 'all');
                if (algoContainer && algoContainer.data) {
                    if (algoContainer.data.main) {
                        processItemInMemory(algoContainer.data.main, 'algorithms');
                        processedItems++;
                        if (progressCallback) progressCallback(processedItems, totalItemsToEstimate, false);
                    }
                    for (const sectionKey in algoContainer.data) {
                        if (sectionKey !== 'main' && Array.isArray(algoContainer.data[sectionKey])) {
                            for (const item of algoContainer.data[sectionKey]) {
                                if (item && typeof item.id !== 'undefined') {
                                    processItemInMemory(item, 'algorithms');
                                    processedItems++;
                                    if (progressCallback) progressCallback(processedItems, totalItemsToEstimate, false);
                                }
                            }
                        }
                    }
                }
            } else if (source.keyForSpecificItem && source.name === 'preferences' && source.keyForSpecificItem) {
                const specificItem = await getFromIndexedDB(source.name, source.keyForSpecificItem);
                if (specificItem) {
                    processItemInMemory(specificItem, 'preferences');
                    processedItems++;
                    if (progressCallback) progressCallback(processedItems, totalItemsToEstimate, false);
                }
            } else {
                const items = await getAllFromIndexedDB(source.name);
                for (const item of items) {
                    if (item && (item.id !== undefined || source.name === 'clientData')) {
                        if (source.name === 'bookmarks') {
                            if (item.folder === ARCHIVE_FOLDER_ID) {
                                processedItems++; if (progressCallback) progressCallback(processedItems, totalItemsToEstimate, false);
                                continue;
                            }
                            if (item.folder && bookmarkFoldersMap.has(String(item.folder))) {
                                item._folderNameForIndex = bookmarkFoldersMap.get(String(item.folder));
                            }
                        }
                        processItemInMemory(item, source.type);
                        processedItems++;
                        if (progressCallback) progressCallback(processedItems, totalItemsToEstimate, false);
                    }
                }
            }
        }

        const googleDocSources = [
            { name: 'telefony', docId: TELEFONY_DOC_ID },
            { name: 'shablony', docId: SHABLONY_DOC_ID }
        ];

        for (const gdSource of googleDocSources) {
            try {
                const results = await fetchGoogleDocs([gdSource.docId], false);
                const data = results?.[0]?.content?.data || [];
                if (gdSource.name === 'telefony') {
                    data.forEach((row, i) => processItemInMemory({ ...row, _internal_row_index: i }, 'telefony'));
                } else if (gdSource.name === 'shablony') {
                    const blocks = parseShablonyContent(data);
                    blocks.forEach(block => processItemInMemory({ ...block, _internal_block_index: block.originalIndex }, 'shablony'));
                }
            } catch (error) { console.error(`${LOG_PREFIX_BUILD} Error processing Google Doc ${gdSource.name}:`, error); overallSuccess = false; }
            finally { processedItems++; if (progressCallback) progressCallback(processedItems, totalItemsToEstimate, false); }
        }

        console.log(`${LOG_PREFIX_BUILD} In-memory index created with ${indexData.size} unique tokens. Starting batch write to IndexedDB.`);
        const transaction = db.transaction(['searchIndex'], 'readwrite');
        const store = transaction.objectStore('searchIndex');
        let writePromises = [];

        for (const [word, refs] of indexData.entries()) {
            const request = store.put({ word, refs });
            writePromises.push(new Promise((resolve, reject) => {
                request.onsuccess = resolve;
                request.onerror = (e) => reject(`Failed to put word '${word}': ${e.target.error}`);
            }));
        }

        await Promise.all(writePromises);
        console.log(`${LOG_PREFIX_BUILD} All put requests have been sent within the transaction.`);

        await new Promise((resolve, reject) => {
            transaction.oncomplete = resolve;
            transaction.onerror = (e) => reject(`Transaction failed: ${e.target.error}`);
            transaction.onabort = (e) => reject(`Transaction aborted: ${e.target.error}`);
        });

        if (!overallSuccess) {
            await saveToIndexedDB('preferences', { id: 'searchIndexStatus', built: false, error: "One or more items failed to index", version: DB_VERSION, timestamp: Date.now() });
            console.error(`${LOG_PREFIX_BUILD} One or more items failed during in-memory processing.`);
        } else {
            await saveToIndexedDB('preferences', { id: 'searchIndexStatus', built: true, version: DB_VERSION, timestamp: Date.now(), error: null });
            console.log(`${LOG_PREFIX_BUILD} Initial search index built successfully.`);
        }

        if (progressCallback) progressCallback(totalItemsToEstimate, totalItemsToEstimate, !overallSuccess);

    } catch (error) {
        console.error(`${LOG_PREFIX_BUILD} Critical error building initial search index:`, error);
        if (typeof showNotification === 'function') { showNotification(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞: ${error.message || String(error)}`, "error", 10000); }
        try {
            await saveToIndexedDB('preferences', { id: 'searchIndexStatus', built: false, error: String(error.message || error), version: DB_VERSION, timestamp: Date.now() });
        } catch (e) { console.error(`${LOG_PREFIX_BUILD} Error saving failed searchIndexStatus after build error:`, e); }
        if (progressCallback) progressCallback(processedItems, totalItemsToEstimate, true);
    }
}


async function updateSearchIndexForItem(itemData, storeName, docId = null) {
    const LOG_PREFIX_USI_ITEM = `[updateSearchIndexForItem V6 - Google Docs Logic]`;

    if (!itemData || typeof itemData !== 'object') {
        console.warn(`${LOG_PREFIX_USI_ITEM} –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ itemData –¥–ª—è ${storeName}. –ü—Ä–æ–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.`, itemData);
        return;
    }

    if (storeName === 'telefony' || storeName === 'shablony') {
        const textsByField = getTextForItem(storeName, itemData);
        if (Object.keys(textsByField).length === 0) return;

        const blockOrRowIndex = itemData.originalIndex ?? itemData._internal_row_index ?? itemData._internal_block_index;

        if (blockOrRowIndex === undefined) {
            console.error(`${LOG_PREFIX_USI_ITEM} –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å –±–ª–æ–∫–∞/—Å—Ç—Ä–æ–∫–∏ –¥–ª—è ${storeName}`, itemData);
            return;
        }

        if (!docId) {
            console.error(`${LOG_PREFIX_USI_ITEM} –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç docId –¥–ª—è ${storeName}. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.`);
            return;
        }

        const promises = [];
        for (const [fieldKey, textContent] of Object.entries(textsByField)) {
            if (!textContent || typeof textContent !== 'string' || textContent.trim() === "") continue;

            const tokens = tokenize(textContent);
            const weights = FIELD_WEIGHTS[storeName] || FIELD_WEIGHTS.default;
            const fieldWeight = weights[fieldKey] || 1.0;

            const refDetails = {
                field: fieldKey,
                ...(storeName === 'telefony' && { rowIndex: blockOrRowIndex }),
                ...(storeName === 'shablony' && {
                    blockIndex: blockOrRowIndex,
                    title: itemData.title,
                    description: truncateText(itemData.content, 150)
                })
            };

            for (const token of tokens) {
                promises.push(addToSearchIndex(token, storeName, docId, fieldKey, fieldWeight, refDetails));
            }
        }
        await Promise.all(promises);
        return;
    }

    const textsByField = getTextForItem(storeName, itemData);

    if (Object.keys(textsByField).length === 0) {
        console.log(`${LOG_PREFIX_USI_ITEM} –î–ª—è ${storeName} ID: ${itemData.id || 'N/A'} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ getTextForItem.`);
        return;
    }

    let indexableId;
    if (storeName === 'clientData' && itemData.id === 'current') {
        indexableId = 'current';
    } else if (storeName === 'algorithms' && itemData.id === 'main') {
        indexableId = 'main';
    } else if (itemData.id !== undefined && itemData.id !== null) {
        indexableId = String(itemData.id);
    } else {
        console.warn(`${LOG_PREFIX_USI_ITEM} –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å indexableId –¥–ª—è ${storeName}, itemData:`, itemData, `. –ü—Ä–æ–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞.`);
        return;
    }

    const promises = [];

    for (const [fieldKeyFromGetText, textContent] of Object.entries(textsByField)) {
        if (!textContent || typeof textContent !== 'string' || textContent.trim() === "") {
            continue;
        }

        const tokens = tokenize(textContent);

        const storeFieldWeightsConfig = FIELD_WEIGHTS[storeName] || FIELD_WEIGHTS.default;

        let baseFieldForWeightLookup = fieldKeyFromGetText;
        let originalFieldKeyForWeight = null;

        if (fieldKeyFromGetText.startsWith('tableCell_')) {
            baseFieldForWeightLookup = 'tableCell';
            const fieldNamePart = fieldKeyFromGetText.split('_f')[1];
            if (fieldNamePart) originalFieldKeyForWeight = fieldNamePart;
        } else if (fieldKeyFromGetText.startsWith('tableTitle_')) {
            baseFieldForWeightLookup = 'tableTitle';
        } else if (fieldKeyFromGetText.startsWith('staticListItem_')) {
            baseFieldForWeightLookup = 'staticListItem';
        } else if (storeName === 'algorithms' && fieldKeyFromGetText.startsWith('step_')) {
            const stepPart = fieldKeyFromGetText.substring(fieldKeyFromGetText.lastIndexOf('_') + 1);
            if (storeFieldWeightsConfig && storeFieldWeightsConfig[stepPart] !== undefined) {
                baseFieldForWeightLookup = stepPart;
            }
        } else if (fieldKeyFromGetText === 'mainSedoGlobalContent' && storeName === 'preferences') {
            baseFieldForWeightLookup = 'mainSedoGlobalContent';
        }

        let fieldWeight = 1.0;
        if (originalFieldKeyForWeight && storeFieldWeightsConfig && storeFieldWeightsConfig[originalFieldKeyForWeight] !== undefined) {
            fieldWeight = storeFieldWeightsConfig[originalFieldKeyForWeight];
        } else if (storeFieldWeightsConfig && storeFieldWeightsConfig[baseFieldForWeightLookup] !== undefined) {
            fieldWeight = storeFieldWeightsConfig[baseFieldForWeightLookup];
        } else if (FIELD_WEIGHTS.default && FIELD_WEIGHTS.default[baseFieldForWeightLookup] !== undefined) {
            fieldWeight = FIELD_WEIGHTS.default[baseFieldForWeightLookup];
        } else {
            if (storeFieldWeightsConfig && storeFieldWeightsConfig[fieldKeyFromGetText] !== undefined) {
                fieldWeight = storeFieldWeightsConfig[fieldKeyFromGetText];
            } else if (FIELD_WEIGHTS.default && FIELD_WEIGHTS.default[fieldKeyFromGetText] !== undefined) {
                fieldWeight = FIELD_WEIGHTS.default[fieldKeyFromGetText];
            }
        }

        let refDetails = { field: fieldKeyFromGetText };

        if (storeName === 'preferences' && itemData.id === SEDO_CONFIG_KEY) {
            const parts = fieldKeyFromGetText.split('_');
            if (parts[0] === 'tableTitle' && parts[1]?.startsWith('t')) {
                refDetails.tableIndex = parseInt(parts[1].substring(1), 10);
                refDetails.field = 'tableTitle';
            } else if (parts[0] === 'tableCell' && parts[1]?.startsWith('t') && parts[2]?.startsWith('r')) {
                refDetails.tableIndex = parseInt(parts[1].substring(1), 10);
                refDetails.rowIndex = parseInt(parts[2].substring(1), 10);
                refDetails.field = parts[3]?.startsWith('f') ? parts[3].substring(1) : parts[3] || fieldKeyFromGetText;
            } else if (parts[0] === 'staticListItem' && parts[1]?.startsWith('t') && parts[2]?.startsWith('r')) {
                refDetails.tableIndex = parseInt(parts[1].substring(1), 10);
                refDetails.rowIndex = parseInt(parts[2].substring(1), 10);
                refDetails.field = 'staticListItem';
            } else if (fieldKeyFromGetText === 'mainSedoGlobalContent') {
                refDetails.field = 'mainSedoGlobalContent';
            } else {
                refDetails.field = fieldKeyFromGetText;
            }
        } else if (storeName === 'algorithms' && fieldKeyFromGetText.startsWith('step_')) {
            const parts = fieldKeyFromGetText.split('_');
            if (parts.length === 3 && !isNaN(parseInt(parts[1]))) {
                refDetails.stepIndex = parseInt(parts[1]);
                refDetails.field = parts[2];
            } else if (fieldKeyFromGetText === 'steps') {
                refDetails.field = 'steps';
            } else {
                const stepIndexMatch = fieldKeyFromGetText.match(/step_(\d+)/);
                if (stepIndexMatch && stepIndexMatch[1]) {
                    refDetails.stepIndex = parseInt(stepIndexMatch[1], 10);
                }
                refDetails.field = fieldKeyFromGetText;
            }
        } else {
            refDetails.field = fieldKeyFromGetText;
        }

        for (const token of tokens) {
            promises.push(
                addToSearchIndex(token, storeName, indexableId, refDetails.field, fieldWeight, refDetails)
            );
        }
    }

    try {
        await Promise.all(promises);
        console.log(`${LOG_PREFIX_USI_ITEM} –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–ª—è ${storeName} ID: ${indexableId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${promises.length} (–ø—Ä–∏–º–µ—Ä–Ω–æ).`);
    } catch (error) {
        console.error(`${LOG_PREFIX_USI_ITEM} –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ${storeName} ID: ${indexableId}:`, error);
    }
}


async function populateBookmarkFoldersForSelect(selectElementId = 'bookmarkFolderFilter') {
    const folderSelect = document.getElementById(selectElementId);
    if (!folderSelect) return;

    const currentValue = folderSelect.value;
    folderSelect.innerHTML = '<option value="">–í—Å–µ –ø–∞–ø–∫–∏</option>';

    const archiveOpt = document.createElement('option');
    archiveOpt.value = ARCHIVE_FOLDER_ID;
    archiveOpt.textContent = ARCHIVE_FOLDER_NAME;
    folderSelect.appendChild(archiveOpt);

    const folders = await getAllFromIndexedDB('bookmarkFolders');
    if (folders && folders.length > 0) {
        const sortedFolders = [...folders].sort((a, b) => (a.name || '').localeCompare(b.name || ''));
        sortedFolders.forEach(folder => {
            const option = document.createElement('option');
            option.value = folder.id;
            option.textContent = folder.name;
            folderSelect.appendChild(option);
        });
    }
    if (currentValue && Array.from(folderSelect.options).some(opt => opt.value === currentValue)) {
        folderSelect.value = currentValue;
    } else {
        folderSelect.value = "";
    }
}


async function debug_checkIndex(token) {
    if (!db) {
        console.log("DB not ready");
        return;
    }
    if (!token || typeof token !== 'string') {
        console.log("Please provide a token (string) to check.");
        return;
    }
    const normalizedToken = token.toLowerCase().replace(/—ë/g, '–µ');
    console.log(`Checking index for token: "${normalizedToken}"`);
    try {
        const transaction = db.transaction(['searchIndex'], 'readonly');
        const store = transaction.objectStore('searchIndex');
        const request = store.get(normalizedToken);

        await new Promise((resolve, reject) => {
            request.onerror = e => {
                console.error("Error getting token:", e.target.error);
                reject(e.target.error);
            };
            request.onsuccess = e => {
                const result = e.target.result;
                if (result) {
                    console.log(`Found entry for token "${normalizedToken}":`, JSON.parse(JSON.stringify(result)));
                    console.log(`  References (${result.refs?.length || 0}):`, JSON.parse(JSON.stringify(result.refs)));
                    const targetRef = result.refs?.find(ref => ref.store === 'algorithms' && String(ref.id) === 'skzi1');
                    if (targetRef) {
                        console.log(`>>> SUCCESS: Found reference to algorithms/skzi1 for this token!`);
                    } else {
                        console.warn(`>>> WARNING: Reference to algorithms/skzi1 NOT FOUND for this token.`);
                    }
                } else {
                    console.log(`--- Token "${normalizedToken}" not found in searchIndex ---`);
                }
                resolve();
            };
        });
    } catch (error) {
        console.error("Error accessing searchIndex:", error);
    }
}


async function saveClientData() {
    const clientDataToSave = getClientData();
    let oldData = null;
    let savedToDB = false;

    if (db) {
        try {
            oldData = await getFromIndexedDB('clientData', clientDataToSave.id);
            await saveToIndexedDB('clientData', clientDataToSave);
            console.log("Client data saved to IndexedDB");
            savedToDB = true;

            if (typeof updateSearchIndex === 'function') {
                await updateSearchIndex('clientData', clientDataToSave.id, clientDataToSave, 'update', oldData);
                console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è clientData (${clientDataToSave.id}) –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ.`);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –≤ IndexedDB:", error);
            showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞", "error");

        }
    }

    if (!savedToDB) {
        try {
            localStorage.setItem('clientData', JSON.stringify(clientDataToSave));
            console.warn("–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage (–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î).");

            if (db) {
                showNotification("–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ), –Ω–æ –Ω–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.", "warning");
            }
        } catch (lsError) {
            console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∏ –≤ –ë–î, –Ω–∏ –≤ localStorage!", lsError);
            showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞.", "error");
        }
    }
}


function getClientData() {
    const notesValue = document.getElementById('clientNotes')?.value ?? '';
    return {
        id: 'current',
        notes: notesValue,
        timestamp: new Date().toISOString()
    };
}


async function exportClientDataToTxt() {
    const notes = document.getElementById('clientNotes')?.value ?? '';
    if (!notes.trim()) {
        showNotification("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "error");
        return;
    }

    const now = new Date();
    const timestamp = now.toISOString().slice(0, 19).replace('T', '_').replace(/:/g, '-');
    const filename = `–û–±—Ä–∞—â–µ–Ω–∏–µ_1–°_${timestamp}.txt`;
    const blob = new Blob([notes], { type: 'text/plain;charset=utf-8' });

    if (window.showSaveFilePicker) {
        try {
            const handle = await window.showSaveFilePicker({
                suggestedName: filename,
                types: [{
                    description: '–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã',
                    accept: { 'text/plain': ['.txt'] },
                }],
            });
            const writable = await handle.createWritable();
            await writable.write(blob);
            await writable.close();
            showNotification("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
            console.log("–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ File System Access API –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
        } catch (err) {
            if (err.name === 'AbortError') {
                console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
                showNotification("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", "info");
            } else {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ File System Access API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', err);
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = filename;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(link.href);
                showNotification("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (fallback)");
                console.log("–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ data URI (fallback) –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
            }
        }
    } else {
        console.log("File System Access API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback.");
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(link.href);
        showNotification("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
        console.log("–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ data URI –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
    }
}


function loadClientData(data) {
    if (!data) return;
    const clientNotes = document.getElementById('clientNotes');
    if (clientNotes) {
        clientNotes.value = data.notes ?? '';
    }
}


function clearClientData() {
    const LOG_PREFIX = "[ClearClientData V2]";
    const clientNotes = document.getElementById('clientNotes');
    if (clientNotes) {
        clientNotes.value = '';
        saveClientData();
        showNotification("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");

        console.log(`${LOG_PREFIX} –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞...`);

        for (const notificationId of activeToadNotifications.values()) {
            NotificationService.dismissImportant(notificationId);
        }

        lastKnownInnCounts.clear();
        activeToadNotifications.clear();

        console.log(`${LOG_PREFIX} –°–æ—Å—Ç–æ—è–Ω–∏—è 'lastKnownInnCounts' –∏ 'activeToadNotifications' –æ—á–∏—â–µ–Ω—ã.`);
    }
}


const themeToggleBtn = document.getElementById('themeToggle');
themeToggleBtn?.addEventListener('click', async () => {
    if (typeof userPreferences === 'undefined' || userPreferences === null) {
        console.error("userPreferences –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É.");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", "error");
        return;
    }

    let currentAppTheme = userPreferences.theme || DEFAULT_UI_SETTINGS.themeMode;
    let nextTheme;

    if (currentAppTheme === 'dark') {
        nextTheme = 'light';
    } else if (currentAppTheme === 'light') {
        nextTheme = 'auto';
    } else {
        nextTheme = 'dark';
    }

    if (typeof setTheme === 'function') {
        setTheme(nextTheme);
    } else {
        console.error("–§—É–Ω–∫—Ü–∏—è setTheme –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É.", "error");
        return;
    }

    let prefsSaved = false;
    if (typeof saveUserPreferences === 'function') {
        prefsSaved = await saveUserPreferences();
    } else {
        console.error("–§—É–Ω–∫—Ü–∏—è saveUserPreferences –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", "error");
        if (typeof setTheme === 'function') setTheme(currentAppTheme);
        return;
    }

    if (prefsSaved) {
        const themeName = nextTheme === 'dark' ? '—Ç–µ–º–Ω–∞—è' : (nextTheme === 'light' ? '—Å–≤–µ—Ç–ª–∞—è' : '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è');
        showNotification(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${themeName}`);

        const customizeUIModal = document.getElementById('customizeUIModal');
        if (customizeUIModal && !customizeUIModal.classList.contains('hidden')) {
            const nextThemeRadio = customizeUIModal.querySelector(`input[name="themeMode"][value="${nextTheme}"]`);
            if (nextThemeRadio) {
                nextThemeRadio.checked = true;
            }

            if (typeof currentPreviewSettings === 'object' && currentPreviewSettings !== null) {
                currentPreviewSettings.themeMode = nextTheme;
            }
            if (typeof originalUISettings === 'object' && originalUISettings !== null) {
                originalUISettings.themeMode = nextTheme;
            }

            if (typeof getSettingsFromModal === 'function' && typeof deepEqual === 'function') {
                isUISettingsDirty = !deepEqual(originalUISettings, getSettingsFromModal());
            }
        }
    } else {
        showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º—ã", "error");
        if (typeof setTheme === 'function') {
            setTheme(currentAppTheme);
        }
    }
});


const exportDataBtn = document.getElementById('exportDataBtn');
exportDataBtn?.addEventListener('click', exportAllData);

function createTabButtonElement(tabConfig) {
    const button = document.createElement('button');
    button.id = `${tabConfig.id}Tab`;

    button.className = 'tab-btn relative px-1 py-2 sm:px-3 sm:py-2 border-b-2 font-medium text-sm focus:outline-none transition-colors whitespace-nowrap border-transparent text-gray-500 dark:text-gray-400 hover:border-gray-300 dark:hover:border-gray-600 hover:text-gray-700 dark:hover:text-gray-300';
    button.setAttribute('role', 'tab');
    button.setAttribute('aria-controls', `${tabConfig.id}Content`);

    let buttonContent = '';
    if (tabConfig.icon) {
        buttonContent += `<i class="fas ${tabConfig.icon} sm:mr-2"></i>`;
    }

    if (tabConfig.icon) {
        buttonContent += `<span class="hidden sm:inline">${tabConfig.name}</span>`;
        button.title = tabConfig.name;
    } else {
        buttonContent += `<span>${tabConfig.name}</span>`;
    }
    button.innerHTML = buttonContent;

    button.addEventListener('click', () => {
        if (typeof setActiveTab === 'function') {
            setActiveTab(tabConfig.id);
        } else {
            console.error(`[createTabButtonElement] –§—É–Ω–∫—Ü–∏—è setActiveTab –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ${tabConfig.id}`);
        }
    });
    return button;
}


async function createBookmarkElement(bookmark, folderMap = {}, viewMode = 'cards') {
    if (!bookmark || typeof bookmark.id === 'undefined') {
        console.error("createBookmarkElement: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏", bookmark);
        return null;
    }

    const bookmarkElement = document.createElement('div');
    bookmarkElement.dataset.id = String(bookmark.id);

    const folder = bookmark.folder ? folderMap[bookmark.folder] : null;

    if (bookmark.folder) {
        bookmarkElement.dataset.folder = String(bookmark.folder);
    }

    let folderBadgeHTML = '';
    if (bookmark.folder === ARCHIVE_FOLDER_ID) {
        folderBadgeHTML = `
            <span class="folder-badge inline-block px-2 py-0.5 rounded text-xs whitespace-nowrap bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200" title="–ü–∞–ø–∫–∞: ${escapeHtml(ARCHIVE_FOLDER_NAME)}">
                <i class="fas fa-archive mr-1 opacity-75"></i>${escapeHtml(ARCHIVE_FOLDER_NAME)}
            </span>`;
    } else if (folder) {
        const colorName = folder.color || 'gray';
        folderBadgeHTML = `
            <span class="folder-badge inline-block px-2 py-0.5 rounded text-xs whitespace-nowrap bg-${colorName}-100 text-${colorName}-800 dark:bg-${colorName}-900 dark:text-${colorName}-200" title="–ü–∞–ø–∫–∞: ${escapeHtml(folder.name)}">
                <i class="fas fa-folder mr-1 opacity-75"></i>${escapeHtml(folder.name)}
            </span>`;
    } else if (bookmark.folder) {
        folderBadgeHTML = `
            <span class="folder-badge inline-block px-2 py-0.5 rounded text-xs whitespace-nowrap bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300" title="–ü–∞–ø–∫–∞ —Å ID: ${bookmark.folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞">
                <i class="fas fa-question-circle mr-1 opacity-75"></i>–ù–µ–∏–∑–≤. –ø–∞–ø–∫–∞
            </span>`;
    }

    let externalLinkIconHTML = '';
    let urlHostnameHTML = '';
    let cardClickOpensUrl = false;

    if (bookmark.url) {
        let fixedUrl = String(bookmark.url).trim();
        fixedUrl = fixedUrl.replace(/[\u200B-\u200D\uFEFF]/g, '');
        if (fixedUrl && !fixedUrl.match(/^([a-zA-Z][a-zA-Z0-9+.-]*:)/i) && fixedUrl.includes('.')) {
            if (!fixedUrl.startsWith('//')) {
                fixedUrl = "https://" + fixedUrl;
            }
        }
        const urlForHref = fixedUrl;
        const displayUrlForTitle = escapeHtml(urlForHref);
        let hostnameForDisplay = 'URL';
        try {
            const tempUrlObject = new URL(urlForHref);
            const canonicalHref = tempUrlObject.href;
            hostnameForDisplay = escapeHtml(tempUrlObject.hostname);
            urlHostnameHTML = `
                <a href="${canonicalHref}" target="_blank" rel="noopener noreferrer" data-action="open-link-hostname" class="bookmark-url text-gray-500 hover:text-primary dark:text-gray-400 dark:hover:text-primary text-xs inline-flex items-center group-hover:underline" title="–ü–µ—Ä–µ–π—Ç–∏: ${displayUrlForTitle}">
                    <i class="fas fa-link mr-1 opacity-75"></i>${hostnameForDisplay}
                </a>`;
            cardClickOpensUrl = true;
        } catch (e) {
            externalLinkIconHTML = `<span class="p-1.5 text-red-400 cursor-not-allowed" title="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: ${displayUrlForTitle}"><i class="fas fa-times-circle fa-fw"></i></span>`;
            urlHostnameHTML = `<span class="text-red-500 text-xs inline-flex items-center" title="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: ${displayUrlForTitle}"><i class="fas fa-exclamation-triangle mr-1"></i>–ù–µ–∫–æ—Ä—Ä. URL</span>`;
            cardClickOpensUrl = false;
        }
    } else {
        urlHostnameHTML = '';
        cardClickOpensUrl = false;
    }

    bookmarkElement.dataset.opensUrl = String(viewMode === 'cards' && cardClickOpensUrl);

    const hasScreenshots = bookmark.screenshotIds && Array.isArray(bookmark.screenshotIds) && bookmark.screenshotIds.length > 0;
    const screenshotButtonHTML = hasScreenshots ? `
        <button data-action="view-screenshots" class="p-1.5 text-gray-500 hover:text-primary dark:text-gray-400 dark:hover:text-primary rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (${bookmark.screenshotIds.length})">
            <i class="fas fa-images fa-fw"></i>
        </button>
    ` : '';

    let archiveButtonHTML = '';
    if (bookmark.folder === ARCHIVE_FOLDER_ID) {
        archiveButtonHTML = `
            <button data-action="restore-from-archive" class="p-1.5 text-gray-500 hover:text-green-500 dark:text-gray-400 dark:hover:text-green-400 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞">
                <i class="fas fa-box-open fa-fw"></i>
            </button>
        `;
    } else {
        archiveButtonHTML = `
            <button data-action="move-to-archive" class="p-1.5 text-gray-500 hover:text-blue-500 dark:text-gray-400 dark:hover:text-blue-400 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤">
                <i class="fas fa-archive fa-fw"></i>
            </button>
        `;
    }

    const itemTypeForFavorite = bookmark.url ? 'bookmark' : 'bookmark_note';
    const isFav = isFavorite(itemTypeForFavorite, String(bookmark.id));
    const favButtonHTML = getFavoriteButtonHTML(bookmark.id, itemTypeForFavorite, 'bookmarks', bookmark.title, bookmark.description, isFav);

    const actionsHTML = `
            <div class="bookmark-actions flex items-center gap-0.5 ${viewMode === 'cards' ? 'absolute top-2 right-2 z-10 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-200' : 'flex-shrink-0 ml-auto pl-2'}">
                ${favButtonHTML}
                ${screenshotButtonHTML}
                ${externalLinkIconHTML}
                ${archiveButtonHTML}
                <button data-action="edit" class="edit-bookmark p-1.5 text-gray-500 hover:text-primary dark:text-gray-400 dark:hover:text-primary rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    <i class="fas fa-edit fa-fw"></i>
                </button>
                <button data-action="delete" class="delete-bookmark p-1.5 text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-500 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="–£–¥–∞–ª–∏—Ç—å">
                    <i class="fas fa-trash fa-fw"></i>
                </button>
            </div>`;

    const safeTitle = escapeHtml(bookmark.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
    const safeDescription = escapeHtml(bookmark.description || '');

    if (viewMode === 'cards') {
        bookmarkElement.className = 'bookmark-item view-item group relative cursor-pointer flex flex-col justify-between h-full bg-white dark:bg-gray-700 shadow-md hover:shadow-lg transition-shadow duration-200 rounded-lg border border-gray-200 dark:border-gray-700 p-4';

        const descriptionHTML = safeDescription
            ? `<p class="bookmark-description text-gray-600 dark:text-gray-400 text-sm mt-1 mb-2 line-clamp-3" title="${safeDescription}">${safeDescription}</p>`
            : (bookmark.url ? '<p class="bookmark-description text-sm mt-1 mb-2 italic text-gray-500">–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è</p>' : '<p class="bookmark-description text-sm mt-1 mb-2 italic text-gray-500">–¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞</p>');

        const mainContentHTML = `
                <div class="flex-grow min-w-0 mb-3"> 
                    <h3 class="font-semibold text-base text-gray-900 dark:text-gray-100 group-hover:text-primary dark:group-hover:text-primary transition-colors duration-200 truncate pr-10 sm:pr-24" title="${safeTitle}">
                        ${safeTitle}
                    </h3>
                    ${descriptionHTML}
                    <div class="bookmark-meta flex flex-wrap items-center gap-x-3 gap-y-1 text-xs mt-2">
                        ${folderBadgeHTML}
                        <span class="text-gray-500 dark:text-gray-400" title="–î–æ–±–∞–≤–ª–µ–Ω–æ: ${new Date(bookmark.dateAdded || Date.now()).toLocaleString()}">
                            <i class="far fa-clock mr-1 opacity-75"></i>${new Date(bookmark.dateAdded || Date.now()).toLocaleDateString()}
                        </span>
                        ${urlHostnameHTML} 
                    </div>
                </div>`;
        bookmarkElement.innerHTML = mainContentHTML + actionsHTML;
    } else {
        bookmarkElement.className = 'bookmark-item view-item group relative cursor-pointer flex items-center justify-between p-3 border-b border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors';

        let listIconHTML = '';
        if (bookmark.url) {
            listIconHTML = '<i class="fas fa-link text-gray-400 dark:text-gray-500 mr-3 text-sm"></i>';
        } else {
            listIconHTML = '<i class="fas fa-sticky-note text-gray-400 dark:text-gray-500 mr-3 text-sm"></i>';
        }

        const listDescText = safeDescription ? truncateText(safeDescription, 70) : (bookmark.url ? escapeHtml(bookmark.url) : '–ó–∞–º–µ—Ç–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞');

        const mainContentHTML = `
            <div class="flex items-center flex-grow min-w-0">
                ${listIconHTML}
                <div class="min-w-0">
                    <h3 class="font-medium text-sm text-gray-900 dark:text-gray-100 group-hover:text-primary dark:group-hover:text-primary transition-colors truncate" title="${safeTitle}">${safeTitle}</h3>
                    <p class="text-xs text-gray-500 dark:text-gray-400 truncate" title="${safeDescription || (bookmark.url ? escapeHtml(bookmark.url) : '')}">${listDescText}</p>
                </div>
            </div>
        `;
        bookmarkElement.innerHTML = mainContentHTML + actionsHTML;
    }
    return bookmarkElement;
}


function initBookmarkSystem() {
    console.log("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è initBookmarkSystem (–∑–∞–≥–ª—É—à–∫–∞).");
    const addBookmarkBtn = document.getElementById('addBookmarkBtn');
    const organizeBookmarksBtn = document.getElementById('organizeBookmarksBtn');
    const bookmarkSearchInput = document.getElementById('bookmarkSearchInput');
    const bookmarkFolderFilter = document.getElementById('bookmarkFolderFilter');

    if (addBookmarkBtn && !addBookmarkBtn.dataset.listenerAttached) {
        addBookmarkBtn.addEventListener('click', () => showAddBookmarkModal());
        addBookmarkBtn.dataset.listenerAttached = 'true';
        console.log("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è addBookmarkBtn –¥–æ–±–∞–≤–ª–µ–Ω –≤ initBookmarkSystem.");
    }

    if (organizeBookmarksBtn && !organizeBookmarksBtn.dataset.listenerAttached) {
        organizeBookmarksBtn.addEventListener('click', () => {
            if (typeof showOrganizeFoldersModal === 'function') {
                showOrganizeFoldersModal();
            } else {
                console.error("–§—É–Ω–∫—Ü–∏—è showOrganizeFoldersModal –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                showNotification("–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
            }
        });
        organizeBookmarksBtn.dataset.listenerAttached = 'true';
        console.log("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è organizeBookmarksBtn –¥–æ–±–∞–≤–ª–µ–Ω –≤ initBookmarkSystem.");
    }

    if (bookmarkSearchInput && !bookmarkSearchInput.dataset.listenerAttached) {
        const debouncedFilter = typeof debounce === 'function' ? debounce(filterBookmarks, 250) : filterBookmarks;
        bookmarkSearchInput.addEventListener('input', debouncedFilter);
        bookmarkSearchInput.dataset.listenerAttached = 'true';
        console.log("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è bookmarkSearchInput –¥–æ–±–∞–≤–ª–µ–Ω –≤ initBookmarkSystem.");
        setupClearButton('bookmarkSearchInput', 'clearBookmarkSearchBtn', filterBookmarks);
    }

    if (bookmarkFolderFilter && !bookmarkFolderFilter.dataset.listenerAttached) {
        bookmarkFolderFilter.addEventListener('change', filterBookmarks);
        bookmarkFolderFilter.dataset.listenerAttached = 'true';
        console.log("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è bookmarkFolderFilter –¥–æ–±–∞–≤–ª–µ–Ω –≤ initBookmarkSystem.");
    }
    populateBookmarkFolders();
    loadBookmarks();
}


async function ensureBookmarkModal() {
    const modalId = bookmarkModalConfigGlobal.modalId;
    let modal = document.getElementById(modalId);
    let mustRebuildContent = false;
    const LOG_PREFIX = "[ensureBookmarkModal_V2]";

    if (modal) {
        const formInModal = modal.querySelector('#bookmarkForm');
        if (!formInModal) {
            console.warn(`${LOG_PREFIX} –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ #${modalId} –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç #bookmarkForm. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.`);
            mustRebuildContent = true;
        }
    }

    if (!modal || mustRebuildContent) {
        if (modal && mustRebuildContent) {
            const innerModalContainer = modal.querySelector(bookmarkModalConfigGlobal.innerContainerSelector);
            if (innerModalContainer) innerModalContainer.innerHTML = ''; else modal.innerHTML = '';
            console.log(`${LOG_PREFIX} –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ #${modalId} –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è.`);
        } else if (!modal) {
            console.log(`${LOG_PREFIX} –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ #${modalId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ.`);
            modal = document.createElement('div');
            modal.id = modalId;
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 hidden z-[90] p-4 flex items-center justify-center';
            document.body.appendChild(modal);
        }

        const normalModalClasses = bookmarkModalConfigGlobal.classToggleConfig.normal.modal || [];
        if (normalModalClasses.length > 0) {
            modal.classList.remove(...normalModalClasses);
            modal.classList.add(...normalModalClasses);
        }


        modal.innerHTML = `
            <div class="modal-inner-container bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] flex flex-col">
                <div class="p-content border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
                    <div class="flex justify-between items-center">
                        <h2 class="text-xl font-bold text-gray-900 dark:text-gray-100 flex-grow mr-4 truncate" id="bookmarkModalTitle">
                            –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –∑–∞–∫–ª–∞–¥–∫–∏
                        </h2>
                        <div class="flex items-center flex-shrink-0">
                            <button id="${bookmarkModalConfigGlobal.buttonId}" type="button" class="inline-block p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors align-middle" title="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω">
                                <i class="fas fa-expand"></i>
                            </button>
                            <button type="button" class="close-modal-btn-hook inline-block p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors align-middle ml-1" title="–ó–∞–∫—Ä—ã—Ç—å (Esc)">
                                <i class="fas fa-times text-xl"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="modal-content-area p-content overflow-y-auto flex-1 min-h-0">
                    <form id="bookmarkForm" novalidate>
                        <input type="hidden" id="bookmarkId" name="bookmarkId">
                        <div class="mb-4">
                            <label class="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300" for="bookmarkTitle">–ù–∞–∑–≤–∞–Ω–∏–µ <span class="text-red-500">*</span></label>
                            <input type="text" id="bookmarkTitle" name="bookmarkTitle" required
                                class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base">
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300" for="bookmarkUrl">URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                            <input type="url" id="bookmarkUrl" name="bookmarkUrl" placeholder="https://example.com"
                                class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base">
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300" for="bookmarkDescription">–û–ø–∏—Å–∞–Ω–∏–µ <span class="text-red-500" id="bookmarkDescriptionRequiredIndicator" style="display:none;">*</span></label>
                            <textarea id="bookmarkDescription" name="bookmarkDescription" rows="4"
                                class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base"
                                placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏"></textarea>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300" for="bookmarkFolder">–ü–∞–ø–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                            <select id="bookmarkFolder" name="bookmarkFolder"
                                class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base">
                                <option value="">–ë–µ–∑ –ø–∞–ø–∫–∏</option>
                            </select>
                        </div>
                        <div class="mb-4">
                             <label class="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300">–°–∫—Ä–∏–Ω—à–æ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                             <p class="text-xs text-gray-500 dark:text-gray-400 mb-2">–î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –≤—Å—Ç–∞–≤–∫–æ–π –∏–∑ –±—É—Ñ–µ—Ä–∞ (Ctrl+V) –≤ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å.</p>
                             <div id="bookmarkScreenshotThumbnailsContainer" class="flex flex-wrap gap-2 mb-2 min-h-[3rem] p-2 border border-dashed border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700/30">
                             </div>
                             <div class="flex items-center gap-3">
                                 <button type="button" class="add-bookmark-screenshot-btn px-3 py-1.5 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded-md transition">
                                     <i class="fas fa-camera mr-1"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å/–î–æ–±–∞–≤–∏—Ç—å
                                 </button>
                             </div>
                             <input type="file" class="bookmark-screenshot-input hidden" accept="image/png, image/jpeg, image/gif, image/webp" multiple>
                         </div>
                    </form>
                </div>
                <div class="p-content border-t border-gray-200 dark:border-gray-700 mt-auto flex-shrink-0">
                    <div class="flex justify-end gap-2">
                        <button type="button" class="cancel-modal-btn-hook px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 rounded-md transition">
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button type="submit" form="bookmarkForm" id="saveBookmarkBtn" class="px-4 py-2 bg-primary hover:bg-secondary text-white rounded-md transition">
                            <i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `;
        console.log(`${LOG_PREFIX} HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è #${modalId} —Å–æ–∑–¥–∞–Ω–∞/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞.`);

        const innerContainer = modal.querySelector(bookmarkModalConfigGlobal.innerContainerSelector);
        const contentArea = modal.querySelector(bookmarkModalConfigGlobal.contentAreaSelector);

        const normalInnerClasses = bookmarkModalConfigGlobal.classToggleConfig.normal.innerContainer || [];
        const normalContentClasses = bookmarkModalConfigGlobal.classToggleConfig.normal.contentArea || [];
        if (innerContainer && normalInnerClasses.length > 0) innerContainer.classList.add(...normalInnerClasses);
        if (contentArea && normalContentClasses.length > 0) contentArea.classList.add(...normalContentClasses);

        const handleCloseActions = (targetModal) => {
            const form = targetModal.querySelector('#bookmarkForm');
            let doClose = true;
            if (form && typeof getCurrentBookmarkFormState === 'function' && typeof deepEqual === 'function') {
                if (initialBookmarkFormState) {
                    const currentState = getCurrentBookmarkFormState(form);
                    if (!deepEqual(initialBookmarkFormState, currentState)) {
                        if (!confirm("–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?")) {
                            doClose = false;
                        }
                    }
                }
            }

            if (doClose) {
                targetModal.classList.add('hidden');
                if (form) {
                    form.reset();
                    const idInput = form.querySelector('#bookmarkId'); if (idInput) idInput.value = '';
                    const modalTitleEl = targetModal.querySelector('#bookmarkModalTitle'); if (modalTitleEl) modalTitleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É';
                    const saveButton = targetModal.querySelector('#saveBookmarkBtn'); if (saveButton) saveButton.innerHTML = '<i class="fas fa-plus mr-1"></i> –î–æ–±–∞–≤–∏—Ç—å';
                    const thumbsContainer = form.querySelector('#bookmarkScreenshotThumbnailsContainer');
                    if (thumbsContainer && typeof clearTemporaryThumbnailsFromContainer === 'function') clearTemporaryThumbnailsFromContainer(thumbsContainer);
                    delete form._tempScreenshotBlobs;
                    delete form.dataset.screenshotsToDelete;
                    initialBookmarkFormState = null;
                }
                if (typeof removeEscapeHandler === 'function') removeEscapeHandler(targetModal);

                requestAnimationFrame(() => {
                    if (getVisibleModals().length === 0) {
                        document.body.classList.remove('overflow-hidden');
                        document.body.classList.remove('modal-open');
                        console.log("Body overflow –∏ modal-open —Å–Ω—è—Ç—ã –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –∑–∞–∫–ª–∞–¥–∫–∏.");
                    }
                });
            }
        };

        modal.querySelectorAll('.close-modal-btn-hook, .cancel-modal-btn-hook').forEach(btn => {
            if (btn._specificClickHandler) btn.removeEventListener('click', btn._specificClickHandler);
            btn._specificClickHandler = (e) => { e.stopPropagation(); handleCloseActions(modal); };
            btn.addEventListener('click', btn._specificClickHandler);
        });

        const fullscreenBtn = modal.querySelector('#' + bookmarkModalConfigGlobal.buttonId);
        if (fullscreenBtn) {
            if (fullscreenBtn._fullscreenToggleHandler) fullscreenBtn.removeEventListener('click', fullscreenBtn._fullscreenToggleHandler);
            fullscreenBtn._fullscreenToggleHandler = () => {
                if (typeof toggleModalFullscreen === 'function') {
                    toggleModalFullscreen(
                        bookmarkModalConfigGlobal.modalId,
                        bookmarkModalConfigGlobal.buttonId,
                        bookmarkModalConfigGlobal.classToggleConfig,
                        bookmarkModalConfigGlobal.innerContainerSelector,
                        bookmarkModalConfigGlobal.contentAreaSelector
                    );
                } else console.error("–§—É–Ω–∫—Ü–∏—è toggleModalFullscreen –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            };
            fullscreenBtn.addEventListener('click', fullscreenBtn._fullscreenToggleHandler);
            console.log(`${LOG_PREFIX} Fullscreen listener attached to ${bookmarkModalConfigGlobal.buttonId}`);
        } else console.error(`${LOG_PREFIX} –ö–Ω–æ–ø–∫–∞ #${bookmarkModalConfigGlobal.buttonId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);

        const formElement = modal.querySelector('#bookmarkForm');
        if (formElement) {
            if (formElement._submitHandler) formElement.removeEventListener('submit', formElement._submitHandler);
            if (typeof handleBookmarkFormSubmit === 'function') {
                formElement._submitHandler = handleBookmarkFormSubmit;
                formElement.addEventListener('submit', formElement._submitHandler);
                console.log(`${LOG_PREFIX} –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ submit –¥–æ–±–∞–≤–ª–µ–Ω –∫ #bookmarkForm.`);
            } else console.error(`${LOG_PREFIX} –û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è handleBookmarkFormSubmit –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);

            if (typeof attachBookmarkScreenshotHandlers === 'function') {
                attachBookmarkScreenshotHandlers(formElement);
            } else console.error(`${LOG_PREFIX} –û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è attachBookmarkScreenshotHandlers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
        } else console.error(`${LOG_PREFIX} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ä–º—É #bookmarkForm –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞!`);
    }

    if (typeof addEscapeHandler === 'function') addEscapeHandler(modal);
    else console.warn(`${LOG_PREFIX} addEscapeHandler function not found.`);

    const elements = {
        modal,
        form: modal.querySelector('#bookmarkForm'),
        modalTitle: modal.querySelector('#bookmarkModalTitle'),
        submitButton: modal.querySelector('#saveBookmarkBtn'),
        idInput: modal.querySelector('#bookmarkId'),
        titleInput: modal.querySelector('#bookmarkTitle'),
        urlInput: modal.querySelector('#bookmarkUrl'),
        descriptionInput: modal.querySelector('#bookmarkDescription'),
        folderSelect: modal.querySelector('#bookmarkFolder'),
        thumbsContainer: modal.querySelector('#bookmarkScreenshotThumbnailsContainer')
    };

    for (const key in elements) {
        if (!elements[key]) {
            console.error(`${LOG_PREFIX} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –≠–ª–µ–º–µ–Ω—Ç '${key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –ü–û–°–õ–ï ensureBookmarkModal!`);
            modal.classList.add('hidden');
            if (typeof removeEscapeHandler === 'function') removeEscapeHandler(modal);
            return null;
        }
    }

    if (elements.form && elements.thumbsContainer) {
        delete elements.form._tempScreenshotBlobs;
        delete elements.form.dataset.screenshotsToDelete;
        delete elements.form.dataset.existingScreenshotIds;
        elements.thumbsContainer.innerHTML = '';
        if (typeof attachBookmarkScreenshotHandlers === 'function') {
            attachBookmarkScreenshotHandlers(elements.form);
        }
    }

    console.log(`${LOG_PREFIX} –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–∫–ª–∞–¥–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ.`);
    return elements;
}


async function showAddBookmarkModal(bookmarkToEditId = null) {
    const LOG_PREFIX = "[showAddBookmarkModal_V2]";
    console.log(`${LOG_PREFIX} –í—ã–∑–æ–≤ –¥–ª—è ID: ${bookmarkToEditId === null ? '–Ω–æ–≤–æ–≥–æ' : bookmarkToEditId}`);

    const modalElements = await ensureBookmarkModal();
    if (!modalElements) {
        if (typeof showNotification === 'function') {
            showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ –∑–∞–∫–ª–∞–¥–∫–∏", "error");
        }
        console.error(`${LOG_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑ ensureBookmarkModal.`);
        return;
    }

    const { modal, form, modalTitle, submitButton, idInput, titleInput, urlInput, descriptionInput, folderSelect, thumbsContainer } = modalElements;

    form.reset();
    idInput.value = '';
    if (thumbsContainer) thumbsContainer.innerHTML = '';
    delete form._tempScreenshotBlobs;
    delete form.dataset.screenshotsToDelete;
    form.dataset.existingScreenshotIds = '';
    form.dataset.existingRendered = 'false';

    const descRequiredIndicator = form.querySelector('#bookmarkDescriptionRequiredIndicator');
    if (descRequiredIndicator) descRequiredIndicator.style.display = 'none';


    if (typeof populateBookmarkFolders === 'function') {
        await populateBookmarkFolders(folderSelect);
    } else {
        console.warn(`${LOG_PREFIX} –§—É–Ω–∫—Ü–∏—è populateBookmarkFolders –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    }
    submitButton.disabled = false;

    if (bookmarkToEditId !== null) {
        modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–ª–∞–¥–∫—É';
        submitButton.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        try {
            const bookmark = await getFromIndexedDB('bookmarks', parseInt(bookmarkToEditId, 10));
            if (!bookmark) {
                if (typeof showNotification === 'function') showNotification("–ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error");
                modal.classList.add('hidden');
                return;
            }
            idInput.value = bookmark.id;
            titleInput.value = bookmark.title || '';
            urlInput.value = bookmark.url || '';
            descriptionInput.value = bookmark.description || '';
            folderSelect.value = bookmark.folder || '';

            if (!bookmark.url && descRequiredIndicator) {
                descRequiredIndicator.style.display = 'inline';
            }

            const existingIds = bookmark.screenshotIds || [];
            form.dataset.existingScreenshotIds = existingIds.join(',');
            if (existingIds.length > 0 && typeof renderExistingThumbnail === 'function') {
                const renderPromises = existingIds.map(screenshotId =>
                    renderExistingThumbnail(screenshotId, thumbsContainer, form)
                );
                await Promise.all(renderPromises);
            }
            form.dataset.existingRendered = 'true';
            console.log(`${LOG_PREFIX} –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏ ID: ${bookmark.id}`);

        } catch (error) {
            console.error(`${LOG_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`, error);
            if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–ª–∞–¥–∫–∏", "error");
            modal.classList.add('hidden');
            return;
        }
    } else {
        modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É';
        submitButton.innerHTML = '<i class="fas fa-plus mr-1"></i> –î–æ–±–∞–≤–∏—Ç—å';
        console.log(`${LOG_PREFIX} –§–æ—Ä–º–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–∫–ª–∞–¥–∫–∏.`);
    }

    if (typeof getCurrentBookmarkFormState === 'function') {
        initialBookmarkFormState = getCurrentBookmarkFormState(form);
        console.log(`${LOG_PREFIX} –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞—Ö–≤–∞—á–µ–Ω–æ:`, JSON.parse(JSON.stringify(initialBookmarkFormState)));
    } else {
        console.warn(`${LOG_PREFIX} –§—É–Ω–∫—Ü–∏—è getCurrentBookmarkFormState –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.`);
        initialBookmarkFormState = null;
    }

    if (urlInput && descriptionInput && descRequiredIndicator) {
        const updateDescRequirement = () => {
            const urlIsEmpty = !urlInput.value.trim();
            descRequiredIndicator.style.display = urlIsEmpty ? 'inline' : 'none';
            descriptionInput.required = urlIsEmpty;
        };
        urlInput.removeEventListener('input', updateDescRequirement);
        urlInput.addEventListener('input', updateDescRequirement);
        updateDescRequirement();
    }


    modal.classList.remove('hidden');
    document.body.classList.add('overflow-hidden');

    if (titleInput) {
        setTimeout(() => {
            try { titleInput.focus(); }
            catch (focusError) { console.warn(`${LOG_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–∫—É—Å:`, focusError); }
        }, 50);
    }
}


function attachBookmarkScreenshotHandlers(formElement) {
    if (!formElement || formElement.tagName !== 'FORM') {
        console.error("attachBookmarkScreenshotHandlers: –¢—Ä–µ–±—É–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç FORM.");
        return;
    }

    const addBtn = formElement.querySelector('.add-bookmark-screenshot-btn');
    const fileInput = formElement.querySelector('.bookmark-screenshot-input');
    const thumbnailsContainer = formElement.querySelector('#bookmarkScreenshotThumbnailsContainer');

    if (!addBtn || !fileInput || !thumbnailsContainer) {
        console.warn("attachBookmarkScreenshotHandlers: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–µ –∑–∞–∫–ª–∞–¥–∫–∏:", formElement.id);
        return;
    }

    if (!formElement._tempScreenshotBlobs) {
        formElement._tempScreenshotBlobs = [];
    }
    if (formElement.dataset.screenshotsToDelete === undefined) {
        formElement.dataset.screenshotsToDelete = '';
    }

    const addBlobToBookmarkForm = async (blob) => {
        if (!Array.isArray(formElement._tempScreenshotBlobs)) { formElement._tempScreenshotBlobs = []; }
        try {
            const processedBlob = await processImageFile(blob);
            if (!processedBlob) throw new Error("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.");

            const tempIndex = formElement._tempScreenshotBlobs.length;
            formElement._tempScreenshotBlobs.push(processedBlob);

            renderTemporaryThumbnail(processedBlob, tempIndex, thumbnailsContainer, formElement);

            console.log(`–í—Ä–µ–º–µ–Ω–Ω—ã–π Blob –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ (–∏–Ω–¥–µ–∫—Å ${tempIndex}) –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–∞.`);
            if (typeof isUISettingsDirty !== 'undefined') { isUISettingsDirty = true; } else if (typeof isDirty !== 'undefined') { isDirty = true; }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Blob –≤ addBlobToBookmarkForm:", error);
            showNotification(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, "error");
        }
    };

    async function handleImageFileForBookmarkProcessing(fileOrBlob, addCallback, buttonElement) {
        if (!fileOrBlob || !(fileOrBlob instanceof Blob) || typeof addCallback !== 'function') { console.error("handleImageFileForBookmarkProcessing: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã."); return; }
        const originalButtonHTML = buttonElement ? buttonElement.innerHTML : ''; const wasButtonDisabled = buttonElement ? buttonElement.disabled : false;
        if (buttonElement) { buttonElement.disabled = true; buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> –û–±—Ä–∞–±–æ—Ç–∫–∞...'; }
        try { await addCallback(fileOrBlob); }
        catch (error) { console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–ª–±—ç–∫–∞ –≤ handleImageFileForBookmarkProcessing:", error); }
        finally { if (buttonElement) { buttonElement.disabled = wasButtonDisabled; buttonElement.innerHTML = originalButtonHTML; } }
    }

    if (!addBtn.dataset.listenerAttached) { addBtn.addEventListener('click', () => { fileInput.click(); }); addBtn.dataset.listenerAttached = 'true'; }
    if (!fileInput.dataset.listenerAttached) {
        fileInput.addEventListener('change', (event) => {
            const files = event.target.files;
            if (files && files.length > 0) { Array.from(files).forEach(file => { handleImageFileForBookmarkProcessing(file, addBlobToBookmarkForm, addBtn); }); }
            event.target.value = null;
        });
        fileInput.dataset.listenerAttached = 'true';
    }
    if (!formElement.dataset.pasteListenerAttached) {
        formElement.addEventListener('paste', (event) => {
            const items = event.clipboardData?.items; if (!items) return; let imageFile = null;
            for (let i = 0; i < items.length; i++) { if (items[i].kind === 'file' && items[i].type.startsWith('image/')) { imageFile = items[i].getAsFile(); break; } }
            if (imageFile) { event.preventDefault(); handleImageFileForBookmarkProcessing(imageFile, addBlobToBookmarkForm, addBtn); }
        });
        formElement.dataset.pasteListenerAttached = 'true';
    }

    console.log("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è *–Ω–æ–≤—ã—Ö* —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞–∫–ª–∞–¥–∫–∏. Drag&Drop –æ—Ç–∫–ª—é—á–µ–Ω.");
}


async function renderExistingThumbnail(screenshotId, container, parentElement) {
    if (!container || !parentElement) {
        console.error("renderExistingThumbnail: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.");
        return;
    }

    if (typeof screenshotId !== 'number' || isNaN(screenshotId)) {
        console.error("renderExistingThumbnail: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π screenshotId:", screenshotId);
        return;
    }

    let screenshotData = null;
    try {
        screenshotData = await getFromIndexedDB('screenshots', screenshotId);
    } catch (fetchError) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ID ${screenshotId}:`, fetchError);
    }

    const thumbDiv = document.createElement('div');
    thumbDiv.className = 'relative w-16 h-12 group border border-gray-300 dark:border-gray-500 rounded overflow-hidden shadow-sm screenshot-thumbnail existing';
    thumbDiv.dataset.existingId = screenshotId;

    if (!screenshotData || !(screenshotData.blob instanceof Blob)) {
        console.warn(`–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ID ${screenshotId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.`);
        thumbDiv.classList.remove('border-gray-300', 'dark:border-gray-500');
        thumbDiv.classList.add('border-red-500', 'dark:border-red-400', 'bg-red-100', 'dark:bg-red-900/30', 'flex', 'items-center', 'justify-center', 'text-red-600', 'text-xs', 'p-1');
        thumbDiv.textContent = `–û—à–∏–±–∫–∞ ID:${screenshotId}`;
        container.appendChild(thumbDiv);
        return;
    }

    const currentToDelete = (parentElement.dataset.screenshotsToDelete || '').split(',').map(s => parseInt(s.trim(), 10));
    const isMarkedForDeletion = currentToDelete.includes(screenshotId);
    if (isMarkedForDeletion) {
        thumbDiv.classList.add('opacity-50', 'border-dashed', 'border-red-500');
        console.log(`–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –¥–ª—è ID ${screenshotId} —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –∫–∞–∫ –ø–æ–º–µ—á–µ–Ω–Ω–∞—è –∫ —É–¥–∞–ª–µ–Ω–∏—é.`);
    }

    const img = document.createElement('img');
    img.className = 'w-full h-full object-contain bg-gray-200 dark:bg-gray-600';
    img.alt = `–°–∫—Ä–∏–Ω—à–æ—Ç ${screenshotId}`;
    img.loading = 'lazy';

    let objectURL = null;
    try {
        objectURL = URL.createObjectURL(screenshotData.blob);
        img.src = objectURL;
        img.onload = () => { console.log(`–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–∏–Ω–∏–∞—Ç—é—Ä–∞ ${screenshotId} –∑–∞–≥—Ä—É–∂–µ–Ω–∞.`); URL.revokeObjectURL(objectURL); };
        img.onerror = () => { console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–∏–Ω–∏–∞—Ç—é—Ä—ã ${screenshotId}.`); URL.revokeObjectURL(objectURL); img.alt = "–û—à–∏–±–∫–∞"; };
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è URL –¥–ª—è Blob ${screenshotId}:`, e);
        img.alt = "–û—à–∏–±–∫–∞ URL";
    }

    const deleteBtn = document.createElement('button');
    deleteBtn.type = 'button';
    deleteBtn.className = 'absolute top-0 right-0 bg-red-600 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs leading-none opacity-0 group-hover:opacity-100 transition-opacity -mt-1 -mr-1 z-10 focus:outline-none focus:ring-1 focus:ring-white delete-existing-screenshot-btn';
    deleteBtn.title = '–ü–æ–º–µ—Ç–∏—Ç—å –∫ —É–¥–∞–ª–µ–Ω–∏—é';
    deleteBtn.innerHTML = '<i class="fas fa-times"></i>';
    deleteBtn.disabled = isMarkedForDeletion;

    deleteBtn.onclick = (e) => {
        e.stopPropagation();
        const idToDelete = parseInt(thumbDiv.dataset.existingId, 10);
        if (!isNaN(idToDelete)) {
            const currentToDeleteRaw = parentElement.dataset.screenshotsToDelete || '';
            const currentToDeleteArray = currentToDeleteRaw.split(',').filter(Boolean).map(s => parseInt(s.trim(), 10));

            if (!currentToDeleteArray.includes(idToDelete)) {
                currentToDeleteArray.push(idToDelete);
                parentElement.dataset.screenshotsToDelete = currentToDeleteArray.join(',');
                thumbDiv.classList.add('opacity-50', 'border-dashed', 'border-red-500');
                deleteBtn.disabled = true;
                console.log(`–°–∫—Ä–∏–Ω—à–æ—Ç ID ${idToDelete} –ø–æ–º–µ—á–µ–Ω –∫ —É–¥–∞–ª–µ–Ω–∏—é. –°–ø–∏—Å–æ–∫: ${parentElement.dataset.screenshotsToDelete}`);

                if (typeof isUISettingsDirty !== 'undefined') { isUISettingsDirty = true; }
                else if (typeof isDirty !== 'undefined') { isDirty = true; }
            }
        }
    };

    thumbDiv.appendChild(img);
    thumbDiv.appendChild(deleteBtn);
    container.appendChild(thumbDiv);
}


async function processImageFile(fileOrBlob) {
    return new Promise((resolve, reject) => {
        if (!(fileOrBlob instanceof Blob)) {
            return reject(new Error('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª–æ–º –∏–ª–∏ Blob.'));
        }
        const img = new Image();
        const reader = new FileReader();
        reader.onload = (e_reader) => {
            if (!e_reader.target || typeof e_reader.target.result !== 'string') { return reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')); }
            img.onload = () => {
                const canvas = document.createElement('canvas');
                const MAX_WIDTH = 1280, MAX_HEIGHT = 1024;
                let width = img.naturalWidth || img.width, height = img.naturalHeight || img.height;
                if (width === 0 || height === 0) { return reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')); }
                if (width > MAX_WIDTH) { height *= MAX_WIDTH / width; width = MAX_WIDTH; }
                if (height > MAX_HEIGHT) { width *= MAX_HEIGHT / height; height = MAX_HEIGHT; }
                canvas.width = Math.round(width); canvas.height = Math.round(height);
                const ctx = canvas.getContext('2d');
                if (!ctx) { return reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 2D –∫–æ–Ω—Ç–µ–∫—Å—Ç Canvas.')); }
                try {
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                } catch (drawError) {
                    console.error("–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–∞ Canvas:", drawError);
                    return reject(new Error('–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'));
                }
                canvas.toBlob(blob => {
                    if (blob) {
                        console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–∂–∞—Ç–æ –≤ WebP. –†–∞–∑–º–µ—Ä: ${(blob.size / 1024).toFixed(1)} KB`);
                        resolve(blob);
                    } else {
                        canvas.toBlob(jpegBlob => {
                            if (jpegBlob) {
                                console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–∂–∞—Ç–æ –≤ JPEG. –†–∞–∑–º–µ—Ä: ${(jpegBlob.size / 1024).toFixed(1)} KB`);
                                resolve(jpegBlob);
                            } else {
                                reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Blob –∏–∑ Canvas (–Ω–∏ WebP, –Ω–∏ JPEG)'));
                            }
                        }, 'image/jpeg', 0.85);
                    }
                }, 'image/webp', 0.8);
            };
            img.onerror = (err) => reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Image –æ–±—ä–µ–∫—Ç.'));
            img.src = e_reader.target.result;
        };
        reader.onerror = (err) => reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'));
        reader.readAsDataURL(fileOrBlob);
    });
}


async function handleBookmarkFormSubmit(event) {
    event.preventDefault();
    const form = event.target;
    const modal = form.closest('#bookmarkModal');
    const saveButton = modal?.querySelector('#saveBookmarkBtn');

    console.log("[handleBookmarkFormSubmit v6 - Archive Logic] Function start.");

    if (!form) {
        console.error("handleBookmarkFormSubmit v6: CRITICAL - event.target is not the form!");
        if (typeof showNotification === 'function') showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error");
        return;
    }
    if (!modal) {
        console.error("handleBookmarkFormSubmit v6: CRITICAL - Could not find parent modal #bookmarkModal.");
        if (typeof showNotification === 'function') showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ.", "error");
        if (saveButton) saveButton.disabled = false;
        return;
    }
    if (!saveButton) {
        console.error("handleBookmarkFormSubmit v6: CRITICAL - Could not find save button #saveBookmarkBtn within modal.");
        if (typeof showNotification === 'function') showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", "error");
        const potentialSaveButton = document.getElementById('saveBookmarkBtn');
        if (potentialSaveButton) potentialSaveButton.disabled = false;
        return;
    }

    console.log("[handleBookmarkFormSubmit v6] Modal, form, and save button found. Proceeding...");

    saveButton.disabled = true;
    saveButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';

    const id = form.elements.bookmarkId.value;
    const title = form.elements.bookmarkTitle.value.trim();
    const url = form.elements.bookmarkUrl.value.trim();
    const description = form.elements.bookmarkDescription.value.trim();

    const folderValue = form.elements.bookmarkFolder.value;
    let folder;
    if (folderValue === ARCHIVE_FOLDER_ID) {
        folder = ARCHIVE_FOLDER_ID;
        console.log("[handleBookmarkFormSubmit v6] –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ '–ê—Ä—Ö–∏–≤'.");
    } else if (folderValue === "") {
        folder = null;
        console.log("[handleBookmarkFormSubmit v6] –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ (–ë–µ–∑ –ø–∞–ø–∫–∏).");
    } else {
        const parsedFolderId = parseInt(folderValue, 10);
        if (!isNaN(parsedFolderId)) {
            folder = parsedFolderId;
            console.log(`[handleBookmarkFormSubmit v6] –í—ã–±—Ä–∞–Ω–∞ –æ–±—ã—á–Ω–∞—è –ø–∞–ø–∫–∞ —Å ID: ${folder}.`);
        } else {
            folder = null;
            console.warn(`[handleBookmarkFormSubmit v6] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–∞–ø–∫–∏ '${folderValue}'. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ '–ë–µ–∑ –ø–∞–ø–∫–∏'.`);
        }
    }

    if (!title) {
        if (typeof showNotification === 'function') showNotification("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ '–ù–∞–∑–≤–∞–Ω–∏–µ'", "error");
        saveButton.disabled = false; saveButton.innerHTML = id ? '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '<i class="fas fa-plus mr-1"></i> –î–æ–±–∞–≤–∏—Ç—å';
        form.elements.bookmarkTitle.focus(); return;
    }
    if (!url && !description) {
        if (typeof showNotification === 'function') showNotification("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ '–û–ø–∏—Å–∞–Ω–∏–µ', —Ç.–∫. URL –Ω–µ —É–∫–∞–∑–∞–Ω", "error");
        saveButton.disabled = false; saveButton.innerHTML = id ? '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '<i class="fas fa-plus mr-1"></i> –î–æ–±–∞–≤–∏—Ç—å';
        form.elements.bookmarkDescription.focus(); return;
    }
    if (url) {
        try {
            let testUrl = url;
            if (!testUrl.match(/^([a-zA-Z][a-zA-Z0-9+.-]*:)/i) && testUrl.includes('.')) {
                if (!testUrl.startsWith('//')) {
                    testUrl = "https://" + testUrl;
                }
            }
            new URL(testUrl);
        } catch (_) {
            if (typeof showNotification === 'function') showNotification("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com)", "error");
            saveButton.disabled = false; saveButton.innerHTML = id ? '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '<i class="fas fa-plus mr-1"></i> –î–æ–±–∞–≤–∏—Ç—å';
            form.elements.bookmarkUrl.focus(); return;
        }
    }

    const screenshotOps = [];
    const newScreenshotBlobs = form._tempScreenshotBlobs || [];
    const idsToDeleteStr = form.dataset.screenshotsToDelete || '';

    newScreenshotBlobs.forEach(blob => { if (blob instanceof Blob) screenshotOps.push({ action: 'add', blob }); });
    idsToDeleteStr.split(',').map(idStr => parseInt(idStr.trim(), 10)).filter(idNum => !isNaN(idNum) && idNum > 0)
        .forEach(idToDelete => screenshotOps.push({ action: 'delete', oldScreenshotId: idToDelete }));
    console.log(`[Save Bookmark v6 TX] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${screenshotOps.length} –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.`);

    const isEditing = !!id;
    let finalId = isEditing ? parseInt(id, 10) : null;
    let oldData = null;
    let existingIdsToKeep = [];
    const newDataBase = { title, url: url || null, description: description || null, folder: folder };

    let transaction;
    let saveSuccessful = false;

    try {
        if (!db) throw new Error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
        transaction = db.transaction(['bookmarks', 'screenshots'], 'readwrite');
        const bookmarksStore = transaction.objectStore('bookmarks');
        const screenshotsStore = transaction.objectStore('screenshots');
        console.log("[Save Bookmark v6 TX] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞.");

        const timestamp = new Date().toISOString();
        let bookmarkReadyPromise;

        if (isEditing) {
            newDataBase.id = finalId;
            console.log(`[Save Bookmark v6 TX] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ ID: ${finalId}`);
            bookmarkReadyPromise = new Promise(async (resolve, reject) => {
                try {
                    const request = bookmarksStore.get(finalId);
                    request.onsuccess = (e) => {
                        oldData = e.target.result;
                        if (oldData) {
                            newDataBase.dateAdded = oldData.dateAdded || timestamp;
                            const deletedIdsSet = new Set(screenshotOps.filter(op => op.action === 'delete').map(op => op.oldScreenshotId));
                            existingIdsToKeep = (oldData.screenshotIds || []).filter(existingId => !deletedIdsSet.has(existingId));
                        } else { newDataBase.dateAdded = timestamp; }
                        resolve();
                    };
                    request.onerror = (e) => reject(e.target.error || new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ID ${finalId}`));
                } catch (fetchError) { reject(fetchError); }
            });
            newDataBase.dateUpdated = timestamp;
        } else {
            newDataBase.dateAdded = timestamp;
            delete newDataBase.id;
            console.log("[Save Bookmark v6 TX] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–∫–ª–∞–¥–∫–∏...");
            bookmarkReadyPromise = new Promise((resolve, reject) => {
                const request = bookmarksStore.add(newDataBase);
                request.onsuccess = (e) => {
                    finalId = e.target.result;
                    newDataBase.id = finalId;
                    resolve();
                };
                request.onerror = (e) => reject(e.target.error || new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏'));
            });
        }

        await bookmarkReadyPromise;

        if (finalId === null || finalId === undefined) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–∫–ª–∞–¥–∫–∏.");
        console.log(`[Save Bookmark v6 TX] ID –∑–∞–∫–ª–∞–¥–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ${finalId}`);

        const screenshotOpResults = [];
        const screenshotPromises = [];
        const newScreenshotIds = [];

        if (screenshotOps.length > 0) {
            console.log(`[Save Bookmark v6 TX ${finalId}] –û–±—Ä–∞–±–æ—Ç–∫–∞ ${screenshotOps.length} –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏...`);
            screenshotOps.forEach(op => {
                const { action, blob, oldScreenshotId } = op;
                screenshotPromises.push(new Promise(async (resolve) => {
                    try {
                        if (action === 'delete' && oldScreenshotId) {
                            const request = screenshotsStore.delete(oldScreenshotId);
                            request.onsuccess = () => { screenshotOpResults.push({ success: true, action: 'delete', oldId: oldScreenshotId }); resolve(); };
                            request.onerror = (e) => { screenshotOpResults.push({ success: false, action: 'delete', oldId: oldScreenshotId, error: e.target.error || new Error('Delete failed') }); resolve(); };
                        } else if (action === 'add' && blob instanceof Blob) {
                            const tempName = `${newDataBase.title || '–ó–∞–∫–ª–∞–¥–∫–∞'}-${Date.now()}`;
                            const record = { blob, parentId: finalId, parentType: 'bookmark', name: tempName, uploadedAt: new Date().toISOString() };
                            const request = screenshotsStore.add(record);
                            request.onsuccess = e_add => { const newId = e_add.target.result; screenshotOpResults.push({ success: true, action: 'add', newId }); newScreenshotIds.push(newId); resolve(); };
                            request.onerror = e_add_err => { screenshotOpResults.push({ success: false, action: 'add', error: e_add_err.target.error || new Error('Add failed') }); resolve(); };
                        } else { screenshotOpResults.push({ success: false, action: op.action || 'unknown', error: new Error('Invalid op') }); resolve(); }
                    } catch (opError) { screenshotOpResults.push({ success: false, action: action, error: opError }); resolve(); }
                }));
            });
            await Promise.all(screenshotPromises);
            console.log(`[Save Bookmark v6 TX ${finalId}] –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.`);

            const failedOps = screenshotOpResults.filter(r => !r.success);
            if (failedOps.length > 0) throw new Error(`–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º: ${failedOps[0].error?.message || 'Unknown error'}`);
        }

        newDataBase.screenshotIds = [...new Set([...existingIdsToKeep, ...newScreenshotIds])];
        if (newDataBase.screenshotIds.length === 0) delete newDataBase.screenshotIds;

        console.log(`[Save Bookmark v6 TX ${finalId}] –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è put:`, JSON.parse(JSON.stringify(newDataBase)));

        const putBookmarkReq = bookmarksStore.put(newDataBase);

        await new Promise((resolve, reject) => {
            putBookmarkReq.onerror = (e) => reject(e.target.error || new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏ ${finalId}`));
            transaction.oncomplete = () => { saveSuccessful = true; resolve(); };
            transaction.onerror = (e) => reject(e.target.error || new Error("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"));
            transaction.onabort = (e) => reject(e.target.error || new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞"));
        });

    } catch (saveError) {
        console.error(`[Save Bookmark v6 (Robust TX)] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏ ${finalId || '(–Ω–æ–≤—ã–π)'}:`, saveError);
        if (transaction && transaction.abort && transaction.readyState !== 'done') {
            try { transaction.abort(); console.log("[Save Bookmark v6] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ catch."); }
            catch (e) { console.error("[Save Bookmark v6] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", e); }
        }
        saveSuccessful = false;
        if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏: " + (saveError.message || saveError), "error");
    } finally {
        if (saveButton) {
            saveButton.disabled = false;
            saveButton.innerHTML = id ? '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '<i class="fas fa-plus mr-1"></i> –î–æ–±–∞–≤–∏—Ç—å';
        }
    }

    if (saveSuccessful) {
        console.log(`[Save Bookmark v6 (Robust TX)] –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è ID: ${finalId}`);
        const finalDataForIndex = { ...newDataBase };

        if (typeof updateSearchIndex === 'function') {
            updateSearchIndex('bookmarks', finalId, finalDataForIndex, isEditing ? 'update' : 'add', oldData)
                .then(() => console.log(`–ò–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ ${finalId}.`))
                .catch(indexError => console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ ${finalId}:`, indexError));
        } else { console.warn("updateSearchIndex –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }

        if (typeof showNotification === 'function') showNotification(isEditing ? "–ó–∞–∫–ª–∞–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞" : "–ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
        modal.classList.add('hidden');
        form.reset();
        const bookmarkIdInput = form.querySelector('#bookmarkId'); if (bookmarkIdInput) bookmarkIdInput.value = '';
        const modalTitleEl = modal.querySelector('#bookmarkModalTitle'); if (modalTitleEl) modalTitleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É';
        delete form._tempScreenshotBlobs;
        delete form.dataset.screenshotsToDelete;
        const thumbsContainer = form.querySelector('#bookmarkScreenshotThumbnailsContainer');
        if (thumbsContainer) thumbsContainer.innerHTML = '';
        initialBookmarkFormState = null;

        if (typeof loadBookmarks === 'function') loadBookmarks();

        if (typeof getVisibleModals === 'function') {
            const visibleModals = getVisibleModals().filter(m => m.id !== modal.id && !m.classList.contains('hidden'));
            if (visibleModals.length === 0) {
                document.body.classList.remove('overflow-hidden');
                document.body.classList.remove('modal-open');
            }
        } else {
            document.body.classList.remove('overflow-hidden');
            document.body.classList.remove('modal-open');
        }

    } else {
        console.error(`[Save Bookmark v6 (Robust TX)] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ ${finalId || '(–Ω–æ–≤—ã–π)'} –ù–ï —É–¥–∞–ª–æ—Å—å.`);
    }
}


async function loadBookmarks() {
    if (!db) {
        console.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
        if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
        await renderBookmarkFolders([]);
        renderBookmarks([]);
        return false;
    }

    let folders = [];
    let bookmarks = [];
    let instructionsFolderId = null;
    let firstFolderId = null;

    try {
        folders = await getAllFromIndexedDB('bookmarkFolders');
        console.log(`loadBookmarks: –ù–∞–π–¥–µ–Ω–æ ${folders?.length || 0} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–ø–æ–∫.`);

        if (!folders || folders.length === 0) {
            console.log("–ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...");
            const defaultFoldersData = [
                { name: '–û–±—â–∏–µ', color: 'blue', dateAdded: new Date().toISOString() },
                { name: '–í–∞–∂–Ω–æ–µ', color: 'red', dateAdded: new Date().toISOString() },
                { name: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', color: 'green', dateAdded: new Date().toISOString() }
            ];

            const savedFolderIds = await Promise.all(
                defaultFoldersData.map(folder => saveToIndexedDB('bookmarkFolders', folder))
            );

            const createdFoldersWithIds = defaultFoldersData.map((folder, index) => ({
                ...folder,
                id: savedFolderIds[index]
            }));
            console.log("–ü–∞–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã:", createdFoldersWithIds);

            if (typeof updateSearchIndex === 'function') {
                await Promise.all(createdFoldersWithIds.map(folder =>
                    updateSearchIndex('bookmarkFolders', folder.id, folder, 'add', null)
                        .catch(err => console.error(`–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø–∞–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ${folder.id} ('${folder.name}'):`, err))
                ));
            }
            folders = createdFoldersWithIds;
        }

        await renderBookmarkFolders(folders || []);

        if (folders && folders.length > 0) {
            const instructionsFolder = folders.find(f => f.name === '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏');
            if (instructionsFolder) {
                instructionsFolderId = instructionsFolder.id;
            }
            firstFolderId = folders[0]?.id;
        }

        bookmarks = await getAllFromIndexedDB('bookmarks');
        console.log(`loadBookmarks: –ù–∞–π–¥–µ–Ω–æ ${bookmarks?.length || 0} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–ª–∞–¥–æ–∫.`);

        if ((!bookmarks || bookmarks.length === 0) && folders && folders.length > 0) {
            console.log("–ó–∞–∫–ª–∞–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–∫–ª–∞–¥–æ–∫...");
            if (firstFolderId === null && folders.length > 0) {
                firstFolderId = folders[0].id;
            }

            const targetFolderIdForKB = instructionsFolderId ?? firstFolderId;

            const sampleBookmarksData = [
                { title: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ö—Ä–∏–ø—Ç–æ–ü—Ä–æ', url: 'https://support.cryptopro.ru/index.php?/Knowledgebase/List', description: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ö—Ä–∏–ø—Ç–æ–ü—Ä–æ.', folder: targetFolderIdForKB, dateAdded: new Date().toISOString() },
                { title: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –†—É—Ç–æ–∫–µ–Ω', url: 'https://dev.rutoken.ru/', description: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –†—É—Ç–æ–∫–µ–Ω.', folder: targetFolderIdForKB, dateAdded: new Date().toISOString() }
            ];

            const savedBookmarkIds = await Promise.all(
                sampleBookmarksData.map(bookmark => saveToIndexedDB('bookmarks', bookmark))
            );
            const bookmarksWithIds = sampleBookmarksData.map((bookmark, index) => ({
                ...bookmark,
                id: savedBookmarkIds[index]
            }));
            console.log("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–∫–ª–∞–¥–æ–∫ —Å–æ–∑–¥–∞–Ω—ã:", bookmarksWithIds);

            if (typeof updateSearchIndex === 'function') {
                await Promise.all(bookmarksWithIds.map(bookmark => {
                    if (bookmark.folder !== ARCHIVE_FOLDER_ID) {
                        return updateSearchIndex('bookmarks', bookmark.id, bookmark, 'add', null)
                            .catch(err => console.error(`–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–∫–ª–∞–¥–∫–∏ ${bookmark.id} ('${bookmark.title}'):`, err));
                    }
                    return Promise.resolve();
                }));
            }
            bookmarks = bookmarksWithIds;
        }

        const folderMap = (folders || []).reduce((map, folder) => {
            if (folder && typeof folder.id !== 'undefined') {
                map[folder.id] = folder;
            }
            return map;
        }, {});

        const bookmarkFolderFilter = document.getElementById('bookmarkFolderFilter');
        let initialBookmarksToRender;
        if (bookmarkFolderFilter && bookmarkFolderFilter.value === ARCHIVE_FOLDER_ID) {
            initialBookmarksToRender = (bookmarks || []).filter(bm => bm.folder === ARCHIVE_FOLDER_ID);
        } else if (bookmarkFolderFilter && bookmarkFolderFilter.value !== "") {
            initialBookmarksToRender = (bookmarks || []).filter(bm => String(bm.folder) === String(bookmarkFolderFilter.value) && bm.folder !== ARCHIVE_FOLDER_ID);
        }
        else {
            initialBookmarksToRender = (bookmarks || []).filter(bm => bm.folder !== ARCHIVE_FOLDER_ID);
        }

        renderBookmarks(initialBookmarksToRender, folderMap);

        console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${folders?.length || 0} –ø–∞–ø–æ–∫ –∏ ${bookmarks?.length || 0} –∑–∞–∫–ª–∞–¥–æ–∫ (–ø–æ–∫–∞–∑–∞–Ω–æ ${initialBookmarksToRender.length}).`);
        return true;

    } catch (error) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–æ–∫ –∏–ª–∏ –ø–∞–ø–æ–∫:", error);
        await renderBookmarkFolders([]);
        renderBookmarks([]);
        if (typeof showNotification === 'function') showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫.", "error");
        return false;
    }
}


async function getAllBookmarks() {
    try {
        const bookmarks = await getAllFromIndexedDB('bookmarks');
        return bookmarks || [];
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–ª–∞–¥–æ–∫:", error);
        return [];
    }
}


async function initExternalLinksSystem() {
    const LOG_PREFIX = "[initExternalLinksSystem v2.1_FINAL]";
    console.log(`${LOG_PREFIX} --- START ---`);

    const panel = document.getElementById('extLinksContent');
    if (!panel) {
        console.error(`${LOG_PREFIX} CRITICAL FAILURE: –ü–∞–Ω–µ–ª—å #extLinksContent –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ HTML.`);
        return;
    }

    const structureHTML = `
        <div class="bg-gray-100 dark:bg-gray-800 p-content rounded-lg shadow-md">
            <div class="flex flex-wrap gap-x-4 gap-y-2 justify-between items-center mb-4 flex-shrink-0">
                <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100">–í–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã</h2>
                <div class="flex items-center gap-2">
                    <div class="flex items-center space-x-1 border border-gray-300 dark:border-gray-600 rounded-md p-0.5">
                            <button class="view-toggle p-1.5 rounded bg-primary text-white" data-view="cards" title="–í–∏–¥ –∫–∞—Ä—Ç–æ—á–µ–∫"> <i class="fas fa-th-large"></i> </button>
                            <button class="view-toggle p-1.5 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-300" data-view="list" title="–í–∏–¥ —Å–ø–∏—Å–∫–∞"> <i class="fas fa-list"></i> </button>
                        </div>
                    <button id="addExtLinkBtn" class="px-4 py-2 bg-primary hover:bg-secondary text-white rounded-md transition text-sm font-medium flex items-center">
                        <i class="fas fa-plus mr-2"></i>–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å
                    </button>
                    <button id="organizeExtLinkCategoriesBtn" class="px-3 py-2 bg-primary hover:bg-secondary text-white dark:text-gray-200 rounded-md transition text-sm font-medium flex items-center">
                        <i class="fas fa-folder-open mr-2"></i>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏
                    </button>
                </div>
            </div>
            <div class="flex items-center gap-4 mb-4 flex-shrink-0">
                <div class="relative flex-grow">
                    <input type="text" id="extLinkSearchInput" placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º..." class="w-full pl-4 pr-10 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary text-gray-900 dark:text-gray-100">
                    <button id="clearExtLinkSearchBtn" class="absolute inset-y-0 right-0 px-3 text-gray-500 hover:text-white-700 hidden" title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <select id="extLinkCategoryFilter" class="w-auto py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary text-gray-900 dark:text-gray-100">
                    <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                </select>
            </div>
            <div id="extLinksContainer" class="flex-grow min-h-0 overflow-y-auto custom-scrollbar -mr-content-sm pr-content-sm view-section" data-section-id="extLinksContainer" data-default-view="cards">
            </div>
        </div>
    `;
    panel.innerHTML = structureHTML;

    const addBtn = panel.querySelector('#addExtLinkBtn');
    const organizeBtn = panel.querySelector('#organizeExtLinkCategoriesBtn');
    const searchInput = panel.querySelector('#extLinkSearchInput');
    const categoryFilter = panel.querySelector('#extLinkCategoryFilter');
    const clearSearchBtn = panel.querySelector('#clearExtLinkSearchBtn');
    const viewToggles = panel.querySelectorAll('.view-toggle');
    const contentContainer = panel.querySelector('#extLinksContainer');

    if (!addBtn || !organizeBtn || !searchInput || !categoryFilter || !clearSearchBtn || !contentContainer) {
        console.error(`${LOG_PREFIX} CRITICAL: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML.`);
        return;
    }

    addBtn.addEventListener('click', () => showAddEditExtLinkModal());
    organizeBtn.addEventListener('click', () => showOrganizeExtLinkCategoriesModal());

    const debouncedFilter = debounce(filterExtLinks, 250);
    searchInput.addEventListener('input', debouncedFilter);
    setupClearButton('extLinkSearchInput', 'clearExtLinkSearchBtn', filterExtLinks);

    categoryFilter.addEventListener('change', filterExtLinks);
    contentContainer.addEventListener('click', handleExtLinkAction);

    viewToggles.forEach(button => button.addEventListener('click', handleViewToggleClick));

    await loadExtLinks();
    const allLinks = await getAllExtLinks();
    renderExtLinks(allLinks, extLinkCategoryInfo);

    console.log(`${LOG_PREFIX} --- END --- –°–∏—Å—Ç–µ–º–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.`);
}


function createExtLinkElement(link, categoryMap = {}, viewMode = 'cards') {
    if (!link || typeof link !== 'object' || typeof link.id === 'undefined') {
        console.warn('createExtLinkElement: –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç link.', link);
        return null;
    }

    const linkElement = document.createElement('div');
    linkElement.dataset.id = String(link.id);
    linkElement.dataset.category = link.category || '';

    let categoryData = null;
    if (link.category !== null && link.category !== undefined) {
        categoryData = categoryMap[link.category] || null;

        if (!categoryData && typeof link.category === 'string') {
            const legacyKey = link.category.toLowerCase();
            const legacyKeyToNameMap = {
                'docs': '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
                'gov': '–≥–æ—Å. —Å–∞–π—Ç—ã',
                'tools': '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
                'other': '–ø—Ä–æ—á–µ–µ'
            };
            const targetName = legacyKeyToNameMap[legacyKey] || legacyKey;

            for (const key in categoryMap) {
                if (categoryMap[key].name && categoryMap[key].name.toLowerCase() === targetName) {
                    categoryData = categoryMap[key];
                    break;
                }
            }
        }
    }

    let categoryBadgeHTML = '';
    if (categoryData) {
        const colorName = categoryData.color || 'gray';
        categoryBadgeHTML = `
            <span class="folder-badge inline-block px-2 py-0.5 rounded text-xs whitespace-nowrap bg-${colorName}-100 text-${colorName}-800 dark:bg-${colorName}-900 dark:text-${colorName}-200" title="–ü–∞–ø–∫–∞: ${escapeHtml(categoryData.name)}">
                <i class="fas fa-tag mr-1 opacity-75"></i>${escapeHtml(categoryData.name)}
            </span>`;
    } else if (link.category) {
        categoryBadgeHTML = `
             <span class="folder-badge inline-block px-2 py-0.5 rounded text-xs whitespace-nowrap bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300" title="–ü–∞–ø–∫–∞ —Å ID: ${escapeHtml(String(link.category))} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞">
                <i class="fas fa-question-circle mr-1 opacity-75"></i>–ù–µ–∏–∑–≤. –ø–∞–ø–∫–∞
            </span>`;
    }

    let urlHostnameHTML = '';
    let cardClickOpensUrl = false;
    let urlForHref = '#';
    try {
        let fixedUrl = String(link.url).trim();
        if (fixedUrl && !fixedUrl.match(/^([a-zA-Z][a-zA-Z0-9+.-]*:)/i) && fixedUrl.includes('.')) {
            if (!fixedUrl.startsWith('//')) {
                fixedUrl = "https://" + fixedUrl;
            }
        }
        urlForHref = new URL(fixedUrl).href;
        const hostnameForDisplay = new URL(urlForHref).hostname.replace('www.', '');
        urlHostnameHTML = `<a href="${urlForHref}" target="_blank" rel="noopener noreferrer" class="text-gray-500 dark:text-gray-400 text-xs inline-flex items-center hover:underline" title="–ü–µ—Ä–µ–π—Ç–∏: ${escapeHtml(link.url)}"><i class="fas fa-link mr-1 opacity-75"></i>${escapeHtml(hostnameForDisplay)}</a>`;
        cardClickOpensUrl = true;
    } catch (e) {
        urlHostnameHTML = `<span class="text-red-500 text-xs inline-flex items-center" title="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: ${escapeHtml(String(link.url))}"><i class="fas fa-exclamation-triangle mr-1"></i>–ù–µ–∫–æ—Ä—Ä. URL</span>`;
        cardClickOpensUrl = false;
    }

    const isFav = isFavorite('extLink', String(link.id));
    const favButtonHTML = getFavoriteButtonHTML(link.id, 'extLink', 'extLinks', link.title, link.description, isFav);
    const safeTitle = escapeHtml(link.title);
    const safeDescription = escapeHtml(link.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è');

    if (viewMode === 'cards') {
        linkElement.className = 'ext-link-item view-item group relative flex flex-col justify-between p-4 rounded-lg shadow-sm hover:shadow-md bg-white dark:bg-gray-700 transition-shadow duration-200 border border-gray-200 dark:border-gray-700 h-full';

        const mainContentHTML = `
            <div class="flex-grow min-w-0 cursor-pointer" data-action="open-link">
                <h3 class="font-semibold text-base text-gray-900 dark:text-gray-100 mb-1 truncate" title="${safeTitle}">${safeTitle}</h3>
                <p class="ext-link-description text-gray-600 dark:text-gray-400 text-sm mb-2 line-clamp-2" title="${safeDescription}">${safeDescription}</p>
            </div>
            <div class="ext-link-meta mt-auto pt-2 border-t border-gray-200 dark:border-gray-600 flex flex-wrap items-center gap-x-3 gap-y-1 text-xs">
                ${categoryBadgeHTML}
                ${urlHostnameHTML}
            </div>
        `;
        const actionsHTML = `
            <div class="ext-link-actions absolute top-2 right-2 z-10 flex items-center gap-0.5 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-200">
                ${favButtonHTML}
                <button data-action="edit" class="p-1.5 text-gray-500 hover:text-primary dark:text-gray-400 dark:hover:text-primary rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    <i class="fas fa-edit fa-fw text-sm"></i>
                </button>
                <button data-action="delete" class="p-1.5 text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-500 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" title="–£–¥–∞–ª–∏—Ç—å">
                    <i class="fas fa-trash fa-fw text-sm"></i>
                </button>
            </div>
        `;
        linkElement.innerHTML = mainContentHTML + actionsHTML;
    } else {
        linkElement.className = 'ext-link-item view-item group flex items-center p-3 border-b border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-750 transition-colors duration-150 ease-in-out';
        const mainContentHTML = `
            <div class="flex-grow min-w-0 flex items-center cursor-pointer" data-action="open-link">
                <i class="fas fa-link text-gray-400 dark:text-gray-500 mr-4"></i>
                <div class="min-w-0">
                    <h3 class="font-medium text-gray-900 dark:text-gray-100 truncate" title="${safeTitle}">${safeTitle}</h3>
                    <p class="ext-link-description text-sm text-gray-500 dark:text-gray-400 truncate" title="${safeDescription}">${safeDescription}</p>
                </div>
            </div>
        `;
        const actionsHTML = `
             <div class="ext-link-actions flex-shrink-0 ml-4 flex items-center gap-1">
                ${categoryBadgeHTML}
                ${favButtonHTML}
                <button data-action="edit" class="p-1.5 text-gray-500 hover:text-primary dark:text-gray-400 dark:hover:text-primary rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    <i class="fas fa-edit fa-fw text-sm"></i>
                </button>
                <button data-action="delete" class="p-1.5 text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-500 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" title="–£–¥–∞–ª–∏—Ç—å">
                    <i class="fas fa-trash fa-fw text-sm"></i>
                </button>
            </div>
        `;
        linkElement.innerHTML = `
            <div class="flex-grow min-w-0 flex items-center cursor-pointer" data-action="open-link">
                <i class="fas fa-link text-gray-400 dark:text-gray-500 mr-4"></i>
                <div class="min-w-0 flex-1">
                    <h3 class="font-medium text-gray-900 dark:text-gray-100 truncate" title="${safeTitle}">${safeTitle}</h3>
                    <p class="ext-link-description text-sm text-gray-500 dark:text-gray-400 truncate" title="${safeDescription}">${safeDescription}</p>
                </div>
            </div>
             <div class="ext-link-actions flex-shrink-0 ml-4 flex items-center gap-2">
                ${categoryBadgeHTML}
                ${favButtonHTML}
                <button data-action="edit" class="p-1.5 text-gray-500 hover:text-primary dark:text-gray-400 dark:hover:text-primary rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    <i class="fas fa-edit fa-fw text-sm"></i>
                </button>
                <button data-action="delete" class="p-1.5 text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-500 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" title="–£–¥–∞–ª–∏—Ç—å">
                    <i class="fas fa-trash fa-fw text-sm"></i>
                </button>
            </div>
        `;
    }

    linkElement.dataset.url = cardClickOpensUrl ? urlForHref : '';
    return linkElement;
}


async function renderExtLinks(links, categoryInfoMap = {}) {
    const extLinksContainer = document.getElementById('extLinksContainer');
    if (!extLinksContainer) {
        console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #extLinksContainer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.");
        return;
    }

    const currentView = viewPreferences['extLinksContainer'] || extLinksContainer.dataset.defaultView || 'cards';
    extLinksContainer.innerHTML = '';

    if (!links || links.length === 0) {
        extLinksContainer.innerHTML = '<div class="col-span-full text-center py-6 text-gray-500 dark:text-gray-400">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.</div>';
    } else {
        const fragment = document.createDocumentFragment();
        for (const link of links) {
            const linkElement = createExtLinkElement(link, categoryInfoMap, currentView);
            if (linkElement) {
                fragment.appendChild(linkElement);
            }
        }
        extLinksContainer.appendChild(fragment);
    }

    if (typeof applyCurrentView === 'function') {
        applyCurrentView('extLinksContainer');
    }
}


async function showAddEditExtLinkModal(id = null, categoryId = null) {
    const { modal, form, titleEl, idInput, titleInput, urlInput, descriptionInput, categoryInput, saveButton } = ensureExtLinkModal();
    if (!modal) return;

    form.reset();
    idInput.value = id ? id : '';

    try {
        const categories = await getAllFromIndexedDB('extLinkCategories');
        categoryInput.innerHTML = '<option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
        if (categories && categories.length > 0) {
            const fragment = document.createDocumentFragment();
            categories.sort((a, b) => a.name.localeCompare(b.name)).forEach(cat => {
                const option = document.createElement('option');
                option.value = cat.id;
                option.textContent = cat.name;
                fragment.appendChild(option);
            });
            categoryInput.appendChild(fragment);
        }
    } catch (e) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞", e);
    }

    if (id !== null) {
        titleEl.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å';
        saveButton.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        try {
            const link = await getFromIndexedDB('extLinks', id);
            if (link) {
                titleInput.value = link.title || '';
                urlInput.value = link.url || '';
                descriptionInput.value = link.description || '';
                categoryInput.value = link.category || '';
            } else {
                showNotification("–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", "error");
                modal.classList.add('hidden');
                return;
            }
        } catch (error) {
            showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–∞", "error");
            modal.classList.add('hidden');
            return;
        }
    } else {
        titleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å';
        saveButton.innerHTML = '<i class="fas fa-plus mr-1"></i> –î–æ–±–∞–≤–∏—Ç—å';
        if (categoryId) {
            categoryInput.value = categoryId;
        }
    }

    modal.classList.remove('hidden');
    document.body.classList.add('modal-open');
    titleInput.focus();
}


function showOrganizeExtLinkCategoriesModal() {
    let modal = document.getElementById('extLinkCategoriesModal');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'extLinkCategoriesModal';
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 hidden z-50 p-4';
        modal.innerHTML = `
            <div class="flex items-center justify-center min-h-full">
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">
                    <div class="p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-xl font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏</h2>
                            <button class="close-modal text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"><i class="fas fa-times text-xl"></i></button>
                        </div>
                        <div id="extLinkCategoriesList" class="max-h-60 overflow-y-auto mb-4 border-y border-gray-200 dark:border-gray-700 -mx-6 px-6"></div>
                        <form id="extLinkCategoryForm" class="border-t border-gray-200 dark:border-gray-700 pt-4 -mx-6 px-6">
                            <h3 class="text-lg font-semibold mb-2" id="extLinkCategoryFormTitle">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É</h3>
                            <input type="hidden" name="editingCategoryId">
                            <div class="mb-4">
                                <label for="extLinkCategoryName" class="block text-sm font-medium mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ <span class="text-red-500">*</span></label>
                                <input type="text" id="extLinkCategoryName" required class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
                            </div>
                            <div class="mb-4">
                                <label class="block text-sm font-medium mb-1">–¶–≤–µ—Ç</label>
                                <div class="flex gap-2 flex-wrap" id="extLinkCategoryColorPicker">
                                </div>
                            </div>
                            <div class="flex justify-end gap-2">
                                <button type="button" id="cancelEditExtLinkCategoryBtn" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 rounded-md hidden">–û—Ç–º–µ–Ω–∞</button>
                                <button type="submit" id="extLinkCategorySubmitBtn" class="px-4 py-2 bg-primary hover:bg-secondary text-white rounded-md">–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>`;
        document.body.appendChild(modal);
        modal.querySelector('#extLinkCategoryForm').addEventListener('submit', handleSaveExtLinkCategorySubmit);
        modal.querySelectorAll('.close-modal').forEach(btn => btn.addEventListener('click', () => modal.classList.add('hidden')));
        modal.querySelector('#cancelEditExtLinkCategoryBtn').addEventListener('click', () => {
            const form = modal.querySelector('#extLinkCategoryForm');
            form.reset();
            form.elements.editingCategoryId.value = '';
            modal.querySelector('#extLinkCategorySubmitBtn').textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É';
            modal.querySelector('#extLinkCategoryFormTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É';
            modal.querySelector('#cancelEditExtLinkCategoryBtn').classList.add('hidden');
            const defaultColor = form.querySelector('input[name="extLinkCategoryColor"][value="blue"]');
            if (defaultColor) defaultColor.checked = true;
        });

        const colors = ['gray', 'red', 'orange', 'yellow', 'green', 'teal', 'blue', 'indigo', 'purple', 'pink', 'rose'];
        const colorPickerContainer = modal.querySelector('#extLinkCategoryColorPicker');
        colorPickerContainer.innerHTML = colors.map((color, index) => `
            <label class="inline-flex items-center">
                <input type="radio" name="extLinkCategoryColor" value="${color}" class="form-radio text-${color}-600 focus:ring-${color}-500" ${index === 6 ? 'checked' : ''}>
                <span class="ml-2 w-5 h-5 rounded-full bg-${color}-${color === 'gray' ? 500 : 600} border border-gray-300 dark:border-gray-600"></span>
            </label>
        `).join('');
    }

    const listEl = modal.querySelector('#extLinkCategoriesList');
    listEl.innerHTML = '<p class="p-4 text-center text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</p>';
    getAllFromIndexedDB('extLinkCategories').then(categories => {
        listEl.innerHTML = '';
        if (!categories || categories.length === 0) {
            listEl.innerHTML = '<p class="p-4 text-center text-gray-500">–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫.</p>';
            return;
        }
        categories.sort((a, b) => a.name.localeCompare(b.name)).forEach(cat => {
            const colorClass = cat.color ? `bg-${cat.color}-${cat.color === 'gray' ? 500 : 600}` : 'bg-gray-500';
            const item = document.createElement('div');
            item.className = 'flex justify-between items-center p-2 border-b border-gray-200 dark:border-gray-700 last:border-b-0';
            item.innerHTML = `
                <div class="flex items-center">
                    <span class="w-4 h-4 rounded-full ${colorClass} mr-3 flex-shrink-0"></span>
                    <span class="truncate" title="${escapeHtml(cat.name)}">${escapeHtml(cat.name)}</span>
                </div>
                <div>
                    <button data-id="${cat.id}" class="edit-cat-btn p-1 text-gray-500 hover:text-primary"><i class="fas fa-edit"></i></button>
                    <button data-id="${cat.id}" class="delete-cat-btn p-1 text-red-500 hover:text-red-700 ml-1"><i class="fas fa-trash"></i></button>
                </div>`;
            listEl.appendChild(item);
        });
    });

    listEl.addEventListener('click', e => {
        const btn = e.target.closest('button');
        if (!btn) return;

        const id = parseInt(btn.dataset.id, 10);
        if (isNaN(id)) return;

        if (btn.classList.contains('delete-cat-btn')) {
            handleDeleteExtLinkCategoryClick(id);
        } else if (btn.classList.contains('edit-cat-btn')) {
            const form = modal.querySelector('#extLinkCategoryForm');
            const category = extLinkCategoryInfo[id];
            if (category) {
                form.elements.editingCategoryId.value = id;
                form.elements.extLinkCategoryName.value = category.name;
                const colorInput = form.querySelector(`input[name="extLinkCategoryColor"][value="${category.color || 'blue'}"]`);
                if (colorInput) colorInput.checked = true;

                modal.querySelector('#extLinkCategorySubmitBtn').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
                modal.querySelector('#extLinkCategoryFormTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É';
                modal.querySelector('#cancelEditExtLinkCategoryBtn').classList.remove('hidden');
            }
        }
    });

    modal.classList.remove('hidden');
}


async function handleSaveExtLinkCategorySubmit(event) {
    event.preventDefault();
    const form = event.target;
    const name = form.elements.extLinkCategoryName.value.trim();
    const editingId = form.elements.editingCategoryId.value;

    if (!name) {
        showNotification("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", "error");
        return;
    }

    const colorInput = form.querySelector('input[name="extLinkCategoryColor"]:checked');
    const categoryData = {
        name,
        color: colorInput ? colorInput.value : 'blue'
    };

    try {
        if (editingId) {
            categoryData.id = parseInt(editingId, 10);
            await saveToIndexedDB('extLinkCategories', categoryData);
        } else {
            await saveToIndexedDB('extLinkCategories', categoryData);
        }

        showNotification("–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.");
        form.reset();
        form.elements.editingCategoryId.value = '';
        document.getElementById('extLinkCategorySubmitBtn').textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É';
        document.getElementById('extLinkCategoryFormTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É';
        document.getElementById('cancelEditExtLinkCategoryBtn').classList.add('hidden');
        const defaultColor = form.querySelector('input[name="extLinkCategoryColor"][value="blue"]');
        if (defaultColor) defaultColor.checked = true;


        await loadExtLinks();
        showOrganizeExtLinkCategoriesModal();

    } catch (e) {
        showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–ø–∫–∏.", "error");
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–ø–∫–∏:", e);
    }
}


async function handleDeleteExtLinkCategoryClick(categoryId) {
    if (isNaN(categoryId)) return;

    const linksInCategory = await getAllFromIndex('extLinks', 'category', categoryId);
    const categoryInfo = extLinkCategoryInfo[categoryId];
    const categoryName = categoryInfo ? categoryInfo.name : `ID ${categoryId}`;

    if (linksInCategory.length > 0) {
        showNotification(`–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryName}", —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${linksInCategory.length} —Å—Å—ã–ª–∫–∞—Ö.`, 'error');
        return;
    }

    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryName}"?`)) {
        try {
            await deleteFromIndexedDB('extLinkCategories', categoryId);
            showNotification("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.");

            await loadExtLinks();
            showOrganizeExtLinkCategoriesModal();
        } catch (e) {
            showNotification("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", "error");
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", e);
        }
    }
}


async function renderBookmarkFolders(folders) {
    const bookmarkFolderFilter = document.getElementById('bookmarkFolderFilter');
    if (!bookmarkFolderFilter) {
        console.warn("renderBookmarkFolders: –≠–ª–µ–º–µ–Ω—Ç #bookmarkFolderFilter –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    const currentValue = bookmarkFolderFilter.value;

    while (bookmarkFolderFilter.options.length > 1) {
        bookmarkFolderFilter.remove(1);
    }

    const fragment = document.createDocumentFragment();

    const archiveOption = document.createElement('option');
    archiveOption.value = ARCHIVE_FOLDER_ID;
    archiveOption.textContent = ARCHIVE_FOLDER_NAME;
    fragment.appendChild(archiveOption);

    if (folders && folders.length > 0) {
        const sortedFolders = [...folders].sort((a, b) => (a.name || '').localeCompare(b.name || ''));
        sortedFolders.forEach(folder => {
            if (folder && typeof folder.id !== 'undefined' && folder.name) {
                const option = document.createElement('option');
                option.value = folder.id;
                option.textContent = folder.name;
                fragment.appendChild(option);
            } else {
                console.warn("renderBookmarkFolders: –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è –ø–∞–ø–∫–∞:", folder);
            }
        });
    }

    bookmarkFolderFilter.appendChild(fragment);

    if (currentValue && Array.from(bookmarkFolderFilter.options).some(opt => opt.value === currentValue)) {
        bookmarkFolderFilter.value = currentValue;
    } else if (bookmarkFolderFilter.options.length > 0 && currentValue !== ARCHIVE_FOLDER_ID) {
        if (bookmarkFolderFilter.value !== ARCHIVE_FOLDER_ID && bookmarkFolderFilter.value !== "") {
        }
    }
    console.log("renderBookmarkFolders: –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –≤ —Ñ–∏–ª—å—Ç—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω, –≤–∫–ª—é—á–∞—è '–ê—Ä—Ö–∏–≤'.");
}


async function loadFoldersList(foldersListElement) {
    if (!foldersListElement) {
        console.error("loadFoldersList: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω.");
        return;
    }

    foldersListElement.innerHTML = '<div class="text-center py-4 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–ø–æ–∫...</div>';

    try {
        const folders = await getAllFromIndexedDB('bookmarkFolders');

        if (!folders || folders.length === 0) {
            foldersListElement.innerHTML = '<div class="text-center py-4 text-gray-500">–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫</div>';
            return;
        }

        foldersListElement.innerHTML = '';
        const fragment = document.createDocumentFragment();

        folders.forEach(folder => {
            const folderItem = document.createElement('div');
            folderItem.className = 'folder-item flex items-center justify-between p-2 border-b border-gray-200 dark:border-gray-700 last:border-b-0';
            folderItem.dataset.folderId = folder.id;

            const colorName = folder.color || 'gray';
            const colorClass = `bg-${colorName}-500`;

            folderItem.innerHTML = `
                <div class="flex items-center flex-grow min-w-0 mr-2">
                    <span class="w-4 h-4 rounded-full ${colorClass} mr-2 flex-shrink-0"></span>
                    <span class="truncate" title="${folder.name}">${folder.name}</span>
                </div>
                <div class="flex-shrink-0">
                    <button class="edit-folder-btn p-1 text-gray-500 hover:text-primary" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="delete-folder-btn p-1 text-gray-500 hover:text-red-500 ml-1" title="–£–¥–∞–ª–∏—Ç—å">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;

            const deleteBtn = folderItem.querySelector('.delete-folder-btn');
            if (deleteBtn) {
                deleteBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É "${folder.name}"? –ó–∞–∫–ª–∞–¥–∫–∏ –≤ –Ω–µ–π –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –ø–æ—Ç–µ—Ä—è—é—Ç –ø—Ä–∏–≤—è–∑–∫—É –∫ –ø–∞–ø–∫–µ.`)) {
                        handleDeleteBookmarkFolderClick(folder.id, folderItem);
                    }
                });
            }

            const editBtn = folderItem.querySelector('.edit-folder-btn');
            if (editBtn) {
                editBtn.addEventListener('click', async (e) => {
                    e.stopPropagation();
                    const modal = document.getElementById('foldersModal');
                    if (!modal) return;

                    const form = modal.querySelector('#folderForm');
                    if (!form) return;

                    try {
                        const folderData = await getFromIndexedDB('bookmarkFolders', folder.id);
                        if (folderData) {
                            form.elements.folderName.value = folderData.name;
                            const colorInput = form.querySelector(`input[name="folderColor"][value="${folderData.color || 'blue'}"]`);
                            if (colorInput) colorInput.checked = true;
                            form.dataset.editingId = folder.id;
                            const submitButton = form.querySelector('button[type="submit"]');
                            if (submitButton) submitButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
                            form.elements.folderName.focus();
                        } else {
                            showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "error");
                        }
                    } catch (error) {
                        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
                        showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–∫–∏", "error");
                    }
                });
            }

            fragment.appendChild(folderItem);
        });

        foldersListElement.appendChild(fragment);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫:", error);
        foldersListElement.innerHTML = '<div class="text-center py-4 text-red-500">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–ø–∫–∏</div>';
        showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫", "error");
    }
}


async function renderBookmarks(bookmarks, folderMap = {}) {
    const bookmarksContainer = document.getElementById('bookmarksContainer');
    if (!bookmarksContainer) {
        console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #bookmarksContainer –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
        return;
    }

    const currentView = viewPreferences['bookmarksContainer'] || bookmarksContainer.dataset.defaultView || 'cards';

    const bookmarksTabContent = document.getElementById('bookmarksContent');
    if (bookmarksTabContent) {
        bookmarksTabContent.style.overflowY = 'auto';
        bookmarksTabContent.style.minHeight = '0px';
    }

    bookmarksContainer.innerHTML = '';

    if (!bookmarks?.length) {
        bookmarksContainer.innerHTML = '<div class="col-span-full text-center py-6 text-gray-500 dark:text-gray-400">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫</div>';
        if (typeof applyCurrentView === 'function') {
            applyCurrentView('bookmarksContainer');
        } else {
            console.warn("applyCurrentView –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–∏–¥ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω.");
        }
        return;
    }

    const fragment = document.createDocumentFragment();

    for (const bookmark of bookmarks) {
        if (!bookmark || typeof bookmark.id === 'undefined') {
            console.warn("–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id –∏–ª–∏ —Å–∞–º –æ–±—ä–µ–∫—Ç):", bookmark);
            continue;
        }
        const bookmarkElement = await createBookmarkElement(bookmark, folderMap, currentView);

        if (bookmarkElement) {
            fragment.appendChild(bookmarkElement);
        } else {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏:", bookmark);
        }
    }

    bookmarksContainer.appendChild(fragment);

    if (bookmarksContainer._handleBookmarkAction) {
        bookmarksContainer.removeEventListener('click', bookmarksContainer._handleBookmarkAction);
    }
    bookmarksContainer._handleBookmarkAction = handleBookmarkAction;
    bookmarksContainer.addEventListener('click', handleBookmarkAction);

    if (typeof applyCurrentView === 'function') {
        applyCurrentView('bookmarksContainer');
    } else {
        console.warn("applyCurrentView –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–∏–¥ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω.");
    }
}


async function handleBookmarkAction(event) {
    const target = event.target;
    const bookmarksContainer = document.getElementById('bookmarksContainer');

    if (target.closest('.toggle-favorite-btn')) {
        return;
    }

    const bookmarkItem = target.closest('.bookmark-item[data-id]');
    if (!bookmarkItem) return;

    const bookmarkId = parseInt(bookmarkItem.dataset.id, 10);
    if (isNaN(bookmarkId)) {
        console.error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –∑–∞–∫–ª–∞–¥–∫–∏:", bookmarkItem.dataset.id);
        return;
    }

    const button = target.closest('button[data-action], a[data-action]');
    const actionTarget = button || target;
    let action = button ? button.dataset.action : null;

    if (!action && actionTarget.closest('.bookmark-item')) {
        const currentView = (bookmarksContainer && viewPreferences['bookmarksContainer']) || bookmarksContainer?.dataset.defaultView || 'cards';
        if (currentView === 'cards') {
            const opensUrl = bookmarkItem.dataset.opensUrl === 'true';
            if (opensUrl) {
                action = 'open-card-url';
            } else {
                action = 'view-details';
            }
        } else {
            action = 'view-details';
        }
    }

    if (!action) {
        console.log("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –∑–∞–∫–ª–∞–¥–∫–µ ID:", bookmarkId);
        return;
    }

    console.log(`–î–µ–π—Å—Ç–≤–∏–µ '${action}' –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ ID: ${bookmarkId}`);

    if (button && (button.tagName === 'A' || button.type === 'button') && action !== 'open-card-url') {
        event.preventDefault();
    }

    if (action === 'move-to-archive') {
        if (typeof moveBookmarkToArchive === 'function') {
            await moveBookmarkToArchive(bookmarkId);
        } else {
            console.error("–§—É–Ω–∫—Ü–∏—è moveBookmarkToArchive –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
            if (typeof showNotification === 'function') showNotification("–§—É–Ω–∫—Ü–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
        }
    } else if (action === 'restore-from-archive') {
        if (typeof restoreBookmarkFromArchive === 'function') {
            await restoreBookmarkFromArchive(bookmarkId);
        } else {
            console.error("–§—É–Ω–∫—Ü–∏—è restoreBookmarkFromArchive –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
            if (typeof showNotification === 'function') showNotification("–§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∞—Ä—Ö–∏–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
        }
    } else if (action === 'edit') {
        if (typeof showEditBookmarkModal === 'function') {
            showEditBookmarkModal(bookmarkId);
        } else {
            console.error("–§—É–Ω–∫—Ü–∏—è showEditBookmarkModal (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
            if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                NotificationService.add("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
            }
        }
    } else if (action === 'delete') {
        const title = bookmarkItem.querySelector('h3')?.title || `–∑–∞–∫–ª–∞–¥–∫—É —Å ID ${bookmarkId}`;
        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É "${title}"?`)) {
            if (typeof deleteBookmark === 'function') {
                deleteBookmark(bookmarkId);
            } else {
                console.error("–§—É–Ω–∫—Ü–∏—è deleteBookmark –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
                if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                    NotificationService.add("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
                }
            }
        }
    } else if (action === 'open-link-icon' || action === 'open-link-hostname' || action === 'open-card-url') {
        const urlToOpen = action === 'open-card-url'
            ? bookmarkItem.querySelector('a.bookmark-url')?.href
            : (button || actionTarget)?.href;

        if (urlToOpen) {
            try {
                new URL(urlToOpen);
                window.open(urlToOpen, '_blank', 'noopener,noreferrer');
            } catch (e) {
                console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —É –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ ${bookmarkId}: ${urlToOpen}`, e);
                if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                    NotificationService.add("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —É —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", "error");
                }
            }
        } else {
            console.warn(`–ù–µ—Ç URL –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '${action}' —É –∑–∞–∫–ª–∞–¥–∫–∏ ID: ${bookmarkId}.`);
            if (action === 'open-card-url') {
                if (typeof showBookmarkDetailModal === 'function') {
                    showBookmarkDetailModal(bookmarkId);
                }
            } else {
                if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                    NotificationService.add("URL –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error");
                }
            }
        }
    } else if (action === 'view-screenshots') {
        if (typeof handleViewBookmarkScreenshots === 'function') {
            handleViewBookmarkScreenshots(bookmarkId);
        } else {
            console.error("–§—É–Ω–∫—Ü–∏—è handleViewBookmarkScreenshots –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
            if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                NotificationService.add("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
            }
        }
    } else if (action === 'view-details') {
        if (typeof showBookmarkDetailModal === 'function') {
            showBookmarkDetailModal(bookmarkId);
        } else {
            console.warn("–§—É–Ω–∫—Ü–∏—è showBookmarkDetailModal –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
            if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                NotificationService.add("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏.", "info");
            }
        }
    }
}


async function restoreBookmarkFromArchive(bookmarkId) {
    if (typeof bookmarkId !== 'number' || isNaN(bookmarkId)) {
        console.error("restoreBookmarkFromArchive: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–ª–∞–¥–∫–∏.", bookmarkId);
        if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.", "error");
        return;
    }
    console.log(`[restoreBookmarkFromArchive] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ ID ${bookmarkId} –∏–∑ –∞—Ä—Ö–∏–≤–∞.`);
    try {
        const bookmark = await getFromIndexedDB('bookmarks', bookmarkId);
        if (!bookmark) {
            if (typeof showNotification === 'function') showNotification("–ó–∞–∫–ª–∞–¥–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error");
            return;
        }

        if (bookmark.folder !== ARCHIVE_FOLDER_ID) {
            if (typeof showNotification === 'function') showNotification("–≠—Ç–∞ –∑–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä—Ö–∏–≤–µ.", "info");
            return;
        }

        bookmark.folder = null;
        bookmark.dateUpdated = new Date().toISOString();

        await saveToIndexedDB('bookmarks', bookmark);

        if (typeof updateSearchIndex === 'function') {
            const oldDataForIndex = { ...bookmark, folder: ARCHIVE_FOLDER_ID };
            await updateSearchIndex('bookmarks', bookmarkId, bookmark, 'update', oldDataForIndex);
            console.log(`–ò–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ ${bookmarkId} (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞).`);
        } else {
            console.warn("updateSearchIndex –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω.");
        }

        if (typeof showNotification === 'function') showNotification(`–ó–∞–∫–ª–∞–¥–∫–∞ "${bookmark.title || 'ID: ' + bookmarkId}" –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞.`, "success");

        const folderFilter = document.getElementById('bookmarkFolderFilter');
        if (folderFilter && folderFilter.value === ARCHIVE_FOLDER_ID) {
            const bookmarkItemElement = document.querySelector(`.bookmark-item[data-id="${bookmarkId}"]`);
            if (bookmarkItemElement) {
                bookmarkItemElement.remove();
                const bookmarksContainer = document.getElementById('bookmarksContainer');
                if (bookmarksContainer && !bookmarksContainer.querySelector('.bookmark-item')) {
                    bookmarksContainer.innerHTML = '<div class="col-span-full text-center py-6 text-gray-500 dark:text-gray-400">–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.</div>';
                }
            } else {
                if (typeof filterBookmarks === 'function') filterBookmarks();
                else if (typeof loadBookmarks === 'function') loadBookmarks();
            }
        } else {
            if (typeof filterBookmarks === 'function') filterBookmarks();
            else if (typeof loadBookmarks === 'function') loadBookmarks();
        }

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏ ID ${bookmarkId} –∏–∑ –∞—Ä—Ö–∏–≤–∞:`, error);
        if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏.", "error");
    }
}


async function moveBookmarkToArchive(bookmarkId) {
    if (typeof bookmarkId !== 'number' || isNaN(bookmarkId)) {
        console.error("moveBookmarkToArchive: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–ª–∞–¥–∫–∏.", bookmarkId);
        if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏.", "error");
        return;
    }
    console.log(`[moveBookmarkToArchive] –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ ID ${bookmarkId} –≤ –∞—Ä—Ö–∏–≤.`);
    try {
        const bookmark = await getFromIndexedDB('bookmarks', bookmarkId);
        if (!bookmark) {
            if (typeof showNotification === 'function') showNotification("–ó–∞–∫–ª–∞–¥–∫–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error");
            return;
        }

        const oldFolder = bookmark.folder;
        bookmark.folder = ARCHIVE_FOLDER_ID;
        bookmark.dateUpdated = new Date().toISOString();

        await saveToIndexedDB('bookmarks', bookmark);

        if (typeof updateSearchIndex === 'function') {
            const oldDataForIndex = { ...bookmark, folder: oldFolder };
            await updateSearchIndex('bookmarks', bookmarkId, bookmark, 'update', oldDataForIndex);
            console.log(`–ò–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ ${bookmarkId} (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤).`);
        } else {
            console.warn("updateSearchIndex –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω.");
        }

        if (typeof showNotification === 'function') showNotification(`–ó–∞–∫–ª–∞–¥–∫–∞ "${bookmark.title || 'ID: ' + bookmarkId}" –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.`, "success");

        const bookmarkItemElement = document.querySelector(`.bookmark-item[data-id="${bookmarkId}"]`);
        if (bookmarkItemElement) {
            const folderFilter = document.getElementById('bookmarkFolderFilter');
            if (folderFilter && folderFilter.value !== ARCHIVE_FOLDER_ID && folderFilter.value !== "") {
                bookmarkItemElement.remove();
                const bookmarksContainer = document.getElementById('bookmarksContainer');
                if (bookmarksContainer && !bookmarksContainer.querySelector('.bookmark-item')) {
                    bookmarksContainer.innerHTML = '<div class="col-span-full text-center py-6 text-gray-500 dark:text-gray-400">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫</div>';
                }
            } else if (folderFilter && (folderFilter.value === ARCHIVE_FOLDER_ID || folderFilter.value === "")) {
                if (typeof filterBookmarks === 'function') filterBookmarks();
                else if (typeof loadBookmarks === 'function') loadBookmarks();
            }
        } else {
            if (typeof filterBookmarks === 'function') filterBookmarks();
            else if (typeof loadBookmarks === 'function') loadBookmarks();
        }


    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏ ID ${bookmarkId} –≤ –∞—Ä—Ö–∏–≤:`, error);
        if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏.", "error");
    }
}


async function handleViewBookmarkScreenshots(bookmarkId) {
    console.log(`[handleViewBookmarkScreenshots] –ó–∞–ø—Ä–æ—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ ID: ${bookmarkId}`);
    const button = document.querySelector(`.bookmark-item[data-id="${bookmarkId}"] button[data-action="view-screenshots"]`);
    let originalContent, iconElement, originalIconClass;

    if (button) {
        originalContent = button.innerHTML;
        iconElement = button.querySelector('i');
        originalIconClass = iconElement ? iconElement.className : null;
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    }

    try {
        const allParentScreenshots = await getAllFromIndex('screenshots', 'parentId', bookmarkId);

        const bookmarkScreenshots = allParentScreenshots.filter(s => s.parentType === 'bookmark');
        console.log(`[handleViewBookmarkScreenshots] –ù–∞–π–¥–µ–Ω–æ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${bookmarkScreenshots.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.`);

        if (bookmarkScreenshots.length === 0) {
            showNotification("–î–ª—è —ç—Ç–æ–π –∑–∞–∫–ª–∞–¥–∫–∏ –Ω–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.", "info");
            return;
        }

        let bookmarkTitle = `–ó–∞–∫–ª–∞–¥–∫–∞ ID ${bookmarkId}`;
        try {
            const bookmarkData = await getFromIndexedDB('bookmarks', bookmarkId);
            if (bookmarkData && bookmarkData.title) {
                bookmarkTitle = bookmarkData.title;
            }
        } catch (titleError) {
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ ${bookmarkId}:`, titleError);
        }

        if (typeof showScreenshotViewerModal === 'function') {
            await showScreenshotViewerModal(bookmarkScreenshots, bookmarkId, bookmarkTitle);
        } else {
            console.error("–§—É–Ω–∫—Ü–∏—è showScreenshotViewerModal –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
            showNotification("–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
        }

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ ID ${bookmarkId}:`, error);
        showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, "error");
    } finally {
        if (button) {
            button.disabled = false;
            button.innerHTML = originalContent;
        }
    }
}


async function deleteBookmark(id) {
    const numericId = parseInt(id, 10);
    if (isNaN(numericId)) {
        console.error("deleteBookmark: –ü–µ—Ä–µ–¥–∞–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ID:", id);
        showNotification("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "error");
        return;
    }

    let bookmarkToDelete = null;
    let screenshotIdsToDelete = [];
    let transaction;

    try {
        try {
            bookmarkToDelete = await getFromIndexedDB('bookmarks', numericId);
            if (!bookmarkToDelete) {
                console.warn(`–ó–∞–∫–ª–∞–¥–∫–∞ —Å ID ${numericId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.`);
                removeBookmarkFromDOM(numericId);
                showNotification("–ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω–∞).", "warning");
                return;
            }
            if (Array.isArray(bookmarkToDelete.screenshotIds) && bookmarkToDelete.screenshotIds.length > 0) {
                screenshotIdsToDelete = [...bookmarkToDelete.screenshotIds];
                console.log(`–ù–∞–π–¥–µ–Ω—ã ID —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ [${screenshotIdsToDelete.join(',')}] –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ —Å –∑–∞–∫–ª–∞–¥–∫–æ–π ${numericId}.`);
            } else {
                console.log(`–°–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ ${numericId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.`);
            }
        } catch (fetchError) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–∫–∏ ${numericId} –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º:`, fetchError);
            showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –Ω–æ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É.", "warning");
        }

        if (bookmarkToDelete && typeof updateSearchIndex === 'function') {
            try {
                await updateSearchIndex('bookmarks', numericId, null, 'delete', bookmarkToDelete);
                console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (delete) –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ ID: ${numericId} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ.`);
            } catch (indexError) {
                console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏ ${numericId}:`, indexError);
                showNotification("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞.", "warning");
            }
        } else {
            console.warn(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ ${numericId} –ø—Ä–æ–ø—É—â–µ–Ω–æ (–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞).`);
        }

        const stores = ['bookmarks'];
        if (screenshotIdsToDelete.length > 0) {
            stores.push('screenshots');
        }

        transaction = db.transaction(stores, 'readwrite');
        const bookmarkStore = transaction.objectStore('bookmarks');
        const screenshotStore = stores.includes('screenshots') ? transaction.objectStore('screenshots') : null;

        const deletePromises = [];

        deletePromises.push(new Promise((resolve, reject) => {
            const req = bookmarkStore.delete(numericId);
            req.onsuccess = () => { console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ ${numericId} —É—Å–ø–µ—à–µ–Ω.`); resolve(); };
            req.onerror = (e) => { console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ ${numericId}:`, e.target.error); reject(e.target.error); };
        }));

        if (screenshotStore && screenshotIdsToDelete.length > 0) {
            screenshotIdsToDelete.forEach(screenshotId => {
                deletePromises.push(new Promise((resolve, reject) => {
                    const req = screenshotStore.delete(screenshotId);
                    req.onsuccess = () => { console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ${screenshotId} —É—Å–ø–µ—à–µ–Ω.`); resolve(); };
                    req.onerror = (e) => { console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ${screenshotId}:`, e.target.error); reject(e.target.error); };
                }));
            });
        }

        await Promise.all(deletePromises);
        console.log("–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (–∑–∞–∫–ª–∞–¥–∫–∞ + —Å–∫—Ä–∏–Ω—à–æ—Ç—ã) —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω—ã.");

        await new Promise((resolve, reject) => {
            transaction.oncomplete = () => {
                console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏ ${numericId} –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
                resolve();
            };
            transaction.onerror = (e) => {
                console.error(`–û—à–∏–±–∫–∞ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏ ${numericId}:`, e.target.error);
                reject(e.target.error || new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"));
            };
            transaction.onabort = (e) => {
                console.warn(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏ ${numericId} –ø—Ä–µ—Ä–≤–∞–Ω–∞:`, e.target.error);
                reject(e.target.error || new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞"));
            };
        });

        removeBookmarkFromDOM(numericId);
        showNotification("–ó–∞–∫–ª–∞–¥–∫–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã");

    } catch (error) {
        console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏ ID ${numericId}:`, error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏: " + (error.message || error), "error");
        if (transaction && transaction.abort && transaction.readyState !== 'done') {
            try { transaction.abort(); } catch (abortErr) { console.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ catch:", abortErr); }
        }
        await loadBookmarks();
    }
}


async function showEditBookmarkModal(id) {
    const modalElements = await ensureBookmarkModal();
    if (!modalElements || !modalElements.form) {
        showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏", "error");
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑ ensureBookmarkModal –≤ showEditBookmarkModal.");
        return;
    }
    const { modal, form, modalTitle, submitButton, idInput, titleInput, urlInput, descriptionInput, folderSelect, thumbsContainer } = modalElements;

    if (thumbsContainer) thumbsContainer.innerHTML = '';
    delete form._tempScreenshotBlobs;
    delete form.dataset.screenshotsToDelete;
    form.dataset.existingScreenshotIds = '';
    form.dataset.existingRendered = 'false';


    try {
        const bookmark = await getFromIndexedDB('bookmarks', id);
        if (!bookmark) {
            showNotification("–ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error");
            modal.classList.add('hidden');
            return;
        }

        form.reset();

        idInput.value = bookmark.id;
        titleInput.value = bookmark.title || '';
        urlInput.value = bookmark.url || '';
        descriptionInput.value = bookmark.description || '';

        if (typeof populateBookmarkFolders === 'function') {
            await populateBookmarkFolders(folderSelect);
            folderSelect.value = bookmark.folder || '';
        } else {
            console.warn("populateBookmarkFolders –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ showEditBookmarkModal.");
        }

        modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–ª–∞–¥–∫—É';
        submitButton.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        submitButton.disabled = false;

        const existingIds = bookmark.screenshotIds || [];
        form.dataset.existingScreenshotIds = existingIds.join(',');
        if (existingIds.length > 0 && typeof renderExistingThumbnail === 'function') {
            const renderPromises = existingIds.map(screenshotId =>
                renderExistingThumbnail(screenshotId, thumbsContainer, form)
            );
            await Promise.all(renderPromises);
        }
        form.dataset.existingRendered = 'true';

        form._initialState = getCurrentBookmarkFormState(form);
        console.log("–ó–∞—Ö–≤–∞—á–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è EDIT bookmarkModal:", JSON.parse(JSON.stringify(form._initialState)));


        modal.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
        if (typeof addEscapeHandler === 'function') addEscapeHandler(modal);

        if (titleInput) {
            setTimeout(() => {
                try { titleInput.focus(); }
                catch (focusError) { console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–∫—É—Å (edit bookmark):", focusError); }
            }, 50);
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
        showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–ª–∞–¥–∫–∏", "error");
        modal.classList.add('hidden');
    }
}


function renderLinks(links) {
    const linksContainer = document.getElementById('linksContainer');
    if (!linksContainer) return;

    linksContainer.innerHTML = '';

    if (!links?.length) {
        linksContainer.innerHTML = '<div class="text-center py-6 text-gray-500">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫</div>';
        if (typeof applyCurrentView === 'function') {
            applyCurrentView('linksContainer');
        } else {
            console.warn("–§—É–Ω–∫—Ü–∏—è applyCurrentView –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.");
        }
        return;
    }

    const categoryStyles = {
        common: { name: '–û–±—â–∏–µ', classes: 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-200' },
        reports: { name: '–û—Ç—á–µ—Ç—ã', classes: 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-200' },
        settings: { name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', classes: 'bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-200' },
        help: { name: '–°–ø—Ä–∞–≤–∫–∞', classes: 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-200' },
        default: { name: '', classes: 'bg-gray-200 text-gray-700 dark:bg-gray-600 dark:text-gray-300' }
    };

    const fragment = document.createDocumentFragment();
    links.forEach(link => {
        const linkElement = document.createElement('div');
        let categoryBadgeHTML = '';
        if (link.category) {
            const style = categoryStyles[link.category] || { ...categoryStyles.default, name: link.category };
            categoryBadgeHTML = `<span class="link-category-badge inline-block px-2 py-0.5 rounded text-xs ${style.classes} whitespace-nowrap">${style.name}</span>`;
        }

        linkElement.className = 'cib-link-item view-item flex items-start p-4 border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-750 transition duration-150 ease-in-out';
        linkElement.dataset.id = link.id;
        if (link.category) linkElement.dataset.category = link.category;

        linkElement.innerHTML = `
            <div class="flex-grow min-w-0 mr-3">
                <h3 class="font-bold truncate text-gray-900 dark:text-gray-100" title="${link.title}">${link.title}</h3>
                <p class="link-description text-gray-600 dark:text-gray-400 text-sm mt-1 truncate">${link.description || ''}</p>
                <div class="link-meta mt-2 flex flex-wrap items-center gap-x-3 gap-y-1">
                    ${categoryBadgeHTML}
                    <a href="${link.url}" target="_blank" rel="noopener noreferrer" class="link-url text-primary hover:underline text-sm inline-flex items-center">
                        <i class="fas fa-external-link-alt mr-1 text-xs"></i>–û—Ç–∫—Ä—ã—Ç—å
                    </a>
                </div>
                <div class="link-code-container mt-2">
                    <code class="text-xs bg-gray-100 dark:bg-gray-700 p-1 rounded inline-block break-all">${link.url}</code>
                </div>
            </div>
            <div class="flex flex-shrink-0 items-center space-x-1">
                <button data-action="edit" class="edit-link p-1 text-gray-500 hover:text-primary dark:text-gray-400 dark:hover:text-blue-400 rounded focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    <i class="fas fa-edit fa-fw"></i>
                </button>
                <button data-action="delete" class="delete-link p-1 text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-400 rounded focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500" title="–£–¥–∞–ª–∏—Ç—å">
                    <i class="fas fa-trash fa-fw"></i>
                </button>
            </div>`;
        fragment.appendChild(linkElement);
    });

    linksContainer.appendChild(fragment);

    if (typeof applyCurrentView === 'function') {
        applyCurrentView('linksContainer');
    } else {
        console.warn("–§—É–Ω–∫—Ü–∏—è applyCurrentView –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Å—ã–ª–æ–∫.");
    }
}


function handleLinkAction(event) {
    const target = event.target;
    const button = target.closest('button[data-action]');
    const linkItem = target.closest('.link-item');

    if (!linkItem || !button) return;

    const linkId = parseInt(linkItem.dataset.id, 10);
    const action = button.dataset.action;

    event.stopPropagation();

    if (action === 'edit') {
        showEditLinkModal(linkId);
    } else if (action === 'delete') {
        deleteLink(linkId);
    }
}


async function deleteLink(linkId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É?')) return;

    try {
        await deleteFromIndexedDB('links', parseInt(linkId, 10));
        const links = await getAllFromIndexedDB('links');
        renderLinks(links);
        showNotification("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.");
    } catch (error) {
        console.error("Error deleting link:", error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.", "error");
    }
}


function filterItems(options) {
    const { containerSelector, itemSelector, searchInputSelector, filterSelectSelector, dataAttribute, textSelectors } = options;

    const searchInput = document.getElementById(searchInputSelector);
    const filterSelect = filterSelectSelector ? document.getElementById(filterSelectSelector) : null;
    const container = document.querySelector(containerSelector);

    if (!searchInput) {
        console.error(`filterItems: Search input #${searchInputSelector} not found.`);
        return;
    }
    if (!container) {
        console.error(`filterItems: Container ${containerSelector} not found.`);
        return;
    }

    const items = container.querySelectorAll(itemSelector);

    if (!items.length && container.textContent.includes('–ó–∞–≥—Ä—É–∑–∫–∞')) {
        console.log("filterItems: Items not found, likely still loading.");
        return;
    }

    const searchValue = searchInput.value.trim().toLowerCase();
    const filterValue = filterSelect ? filterSelect.value : '';

    let visibleCount = 0;

    items.forEach(item => {
        const itemFilterValue = (filterSelect && dataAttribute) ? (item.dataset[dataAttribute] || '') : '';
        const matchesFilter = !filterValue || itemFilterValue === filterValue;

        let matchesSearch = !searchValue;
        if (searchValue) {
            matchesSearch = textSelectors.some(selector => {
                const element = item.querySelector(selector);
                const elementText = element?.textContent?.toLowerCase() || '';
                const isMatch = elementText.includes(searchValue);
                return isMatch;
            });
        }

        const shouldHide = !(matchesSearch && matchesFilter);
        item.classList.toggle('hidden', shouldHide);
        if (!shouldHide) visibleCount++;
    });
}


async function filterBookmarks() {
    const searchInput = document.getElementById('bookmarkSearchInput');
    const folderFilter = document.getElementById('bookmarkFolderFilter');

    if (!searchInput || !folderFilter) {
        console.error("filterBookmarks: Search input or folder filter not found.");
        if (typeof renderBookmarks === 'function') renderBookmarks([], {});
        return;
    }

    const searchValue = searchInput.value.trim().toLowerCase();
    const selectedFolderValue = folderFilter.value;

    try {
        const allBookmarks = await getAllBookmarks();
        const folders = await getAllFromIndexedDB('bookmarkFolders');
        const folderMap = (folders || []).reduce((map, folder) => {
            if (folder && typeof folder.id !== 'undefined') {
                map[folder.id] = folder;
            }
            return map;
        }, {});

        let bookmarksToDisplay = [];

        if (selectedFolderValue === "") {
            bookmarksToDisplay = allBookmarks.filter(bm => bm.folder !== ARCHIVE_FOLDER_ID);
        } else if (selectedFolderValue === ARCHIVE_FOLDER_ID) {
            bookmarksToDisplay = allBookmarks.filter(bm => bm.folder === ARCHIVE_FOLDER_ID);
        } else {
            const numericFolderId = parseInt(selectedFolderValue, 10);
            if (!isNaN(numericFolderId)) {
                bookmarksToDisplay = allBookmarks.filter(bm => bm.folder === numericFolderId);
            } else {
                console.warn(`filterBookmarks: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–∞–ø–∫–∏ '${selectedFolderValue}'. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ.`);
                bookmarksToDisplay = allBookmarks.filter(bm => bm.folder !== ARCHIVE_FOLDER_ID);
            }
        }

        if (searchValue) {
            bookmarksToDisplay = bookmarksToDisplay.filter(bm => {
                const titleMatch = bm.title && bm.title.toLowerCase().includes(searchValue);
                const descMatch = bm.description && bm.description.toLowerCase().includes(searchValue);
                const urlMatch = bm.url && bm.url.toLowerCase().includes(searchValue);
                return titleMatch || descMatch || urlMatch;
            });
        }

        if (typeof renderBookmarks === 'function') {
            renderBookmarks(bookmarksToDisplay, folderMap);
        } else {
            console.error("renderBookmarks function is not defined for filterBookmarks");
        }

        if (typeof ensureBookmarksScroll === 'function') {
            ensureBookmarksScroll();
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–ª–∞–¥–æ–∫:", error);
        if (typeof showNotification === 'function') showNotification("–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–ª–∞–¥–æ–∫", "error");
        if (typeof renderBookmarks === 'function') renderBookmarks([], {});
    }
}


function filterLinks() {
    filterItems({
        containerSelector: '#linksContainer',
        itemSelector: '.cib-link-item',
        searchInputSelector: '#linkSearchInput',
        textSelectors: ['h3', 'code', 'p']
    });
}


document.getElementById('bookmarkSearchInput')?.addEventListener('input', debounce(filterBookmarks, 250));
document.getElementById('linkSearchInput')?.addEventListener('input', debounce(filterLinks, 250));
document.getElementById('bookmarkFolderFilter')?.addEventListener('change', filterBookmarks);

async function importBookmarks(bookmarks) {
    if (!db || !Array.isArray(bookmarks)) return false;

    try {
        await clearIndexedDBStore('bookmarks');
        await Promise.all(bookmarks.map(bookmark => saveToIndexedDB('bookmarks', bookmark)));
        return true;
    } catch (error) {
        console.error("Error importing bookmarks:", error);
        return false;
    }
}


function getRequiredElements(ids) {
    const elements = {};
    for (const id of ids) {
        elements[id] = document.getElementById(id);
        if (!elements[id]) {
            console.error(`Required element with ID "${id}" not found.`);
            return null;
        }
    }
    return elements;
}


async function showAddBookmarkModal(bookmarkToEditId = null) {
    const modalElements = await ensureBookmarkModal();
    if (!modalElements || !modalElements.form) {
        showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ –∑–∞–∫–ª–∞–¥–∫–∏", "error");
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑ ensureBookmarkModal –≤ showAddBookmarkModal.");
        return;
    }

    const { modal, form, modalTitle, submitButton, idInput, titleInput, urlInput, descriptionInput, folderSelect, thumbsContainer } = modalElements;

    form.reset();
    idInput.value = '';
    if (thumbsContainer) thumbsContainer.innerHTML = '';
    delete form._tempScreenshotBlobs;
    delete form.dataset.screenshotsToDelete;
    form.dataset.existingScreenshotIds = '';
    form.dataset.existingRendered = 'true';

    try {
        if (typeof populateBookmarkFolders === 'function') {
            await populateBookmarkFolders(folderSelect);
        } else {
            console.warn("–§—É–Ω–∫—Ü–∏—è populateBookmarkFolders –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ showAddBookmarkModal.");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞–ø–æ–∫ –≤ showAddBookmarkModal:", error);
        showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã.", "warning");
    }

    submitButton.disabled = false;
    modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É';
    submitButton.innerHTML = '<i class="fas fa-plus mr-1"></i> –î–æ–±–∞–≤–∏—Ç—å';

    form._initialState = getCurrentBookmarkFormState(form);
    console.log("–ó–∞—Ö–≤–∞—á–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ADD bookmarkModal:", JSON.parse(JSON.stringify(form._initialState)));

    modal.classList.remove('hidden');
    document.body.classList.add('overflow-hidden');
    if (typeof addEscapeHandler === 'function') addEscapeHandler(modal);

    if (titleInput) {
        setTimeout(() => {
            try { titleInput.focus(); }
            catch (focusError) { console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (add bookmark):", focusError); }
        }, 50);
    }
}


async function populateBookmarkFolders(folderSelectElement) {
    const folderSelect = folderSelectElement || document.getElementById('bookmarkFolder');
    if (!folderSelect) return;

    folderSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É</option>';

    try {
        const folders = await getAllFromIndexedDB('bookmarkFolders');

        if (folders?.length > 0) {
            const fragment = document.createDocumentFragment();
            folders.forEach(folder => {
                const option = document.createElement('option');
                option.value = folder.id;
                option.textContent = folder.name;
                fragment.appendChild(option);
            });
            folderSelect.appendChild(fragment);
        }
    } catch (error) {
        console.error("Error loading folders for dropdown:", error);
    }
}


function showOrganizeFoldersModal() {
    let modal = document.getElementById('foldersModal');
    let isNewModal = false;

    if (!modal) {
        isNewModal = true;
        modal = document.createElement('div');
        modal.id = 'foldersModal';
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 hidden z-50 p-4';
        modal.innerHTML = `
            <div class="flex items-center justify-center min-h-full">
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">
                    <div class="p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-xl font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏</h2>
                            <button class="close-modal text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                                <i class="fas fa-times text-xl"></i>
                            </button>
                        </div>
                        
                        <div id="foldersList" class="max-h-60 overflow-y-auto mb-4">
                            <div class="text-center py-4 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–ø–æ–∫...</div>
                        </div>
                        
                        <form id="folderForm" class="border-t border-gray-200 dark:border-gray-700 pt-4">
                            <input type="hidden" name="editingFolderId">
                            <div class="mb-4">
                                <label class="block text-sm font-medium mb-1" for="folderName">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏</label>
                                <input type="text" id="folderName" required class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base">
                            </div>
                            <div class="mb-4">
                                <label class="block text-sm font-medium mb-1">–¶–≤–µ—Ç</label>
                                <div class="flex gap-2 flex-wrap">
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="folderColor" value="gray" class="form-radio text-gray-600 focus:ring-gray-500">
                                        <span class="ml-2 w-5 h-5 rounded-full bg-gray-500 border border-gray-300"></span>
                                    </label>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="folderColor" value="red" class="form-radio text-red-600 focus:ring-red-500">
                                        <span class="ml-2 w-5 h-5 rounded-full bg-red-600"></span>
                                    </label>
                                     <label class="inline-flex items-center">
                                        <input type="radio" name="folderColor" value="orange" class="form-radio text-orange-600 focus:ring-orange-500">
                                        <span class="ml-2 w-5 h-5 rounded-full bg-orange-500"></span>
                                    </label>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="folderColor" value="yellow" class="form-radio text-yellow-500 focus:ring-yellow-400">
                                        <span class="ml-2 w-5 h-5 rounded-full bg-yellow-400"></span>
                                    </label>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="folderColor" value="green" class="form-radio text-green-600 focus:ring-green-500">
                                        <span class="ml-2 w-5 h-5 rounded-full bg-green-500"></span>
                                    </label>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="folderColor" value="teal" class="form-radio text-teal-600 focus:ring-teal-500">
                                        <span class="ml-2 w-5 h-5 rounded-full bg-teal-500"></span>
                                    </label>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="folderColor" value="blue" checked class="form-radio text-blue-600 focus:ring-blue-500">
                                        <span class="ml-2 w-5 h-5 rounded-full bg-blue-600"></span>
                                    </label>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="folderColor" value="indigo" class="form-radio text-indigo-600 focus:ring-indigo-500">
                                        <span class="ml-2 w-5 h-5 rounded-full bg-indigo-600"></span>
                                    </label>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="folderColor" value="purple" class="form-radio text-purple-600 focus:ring-purple-500">
                                        <span class="ml-2 w-5 h-5 rounded-full bg-purple-600"></span>
                                    </label>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="folderColor" value="pink" class="form-radio text-pink-600 focus:ring-pink-500">
                                        <span class="ml-2 w-5 h-5 rounded-full bg-pink-600"></span>
                                    </label>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="folderColor" value="rose" class="form-radio text-rose-600 focus:ring-rose-500">
                                        <span class="ml-2 w-5 h-5 rounded-full bg-rose-500"></span>
                                    </label>
                                </div>
                            </div>
                            <div class="flex justify-end">
                                <button type="submit" id="folderSubmitBtn" class="px-4 py-2 bg-primary hover:bg-secondary text-white rounded-md transition">
                                    –î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(modal);

        modal.addEventListener('click', (e) => {
            if (e.target.closest('.close-modal')) {
                modal.classList.add('hidden');
                if (typeof removeEscapeHandler === 'function') {
                    removeEscapeHandler(modal);
                }
                if (getVisibleModals().length === 0) {
                    document.body.classList.remove('modal-open');
                }

                const form = modal.querySelector('#folderForm');
                if (form && form.dataset.editingId) {
                    form.reset();
                    delete form.dataset.editingId;
                    const submitButton = form.querySelector('#folderSubmitBtn');
                    if (submitButton) submitButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É';
                    const defaultColorInput = form.querySelector('input[name="folderColor"][value="blue"]');
                    if (defaultColorInput) defaultColorInput.checked = true;
                }
            }
        });

        const form = modal.querySelector('#folderForm');
        if (!form.dataset.submitListenerAttached) {
            if (typeof handleSaveFolderSubmit === 'function') {
                form.addEventListener('submit', handleSaveFolderSubmit);
                form.dataset.submitListenerAttached = 'true';
            } else {
                console.error("–§—É–Ω–∫—Ü–∏—è handleSaveFolderSubmit –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
                form.addEventListener('submit', (e) => {
                    e.preventDefault();
                    showNotification("–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error");
                });
            }
        }
    }

    const form = modal.querySelector('#folderForm');
    if (form) {
        form.reset();
        delete form.dataset.editingId;
        const submitButton = form.querySelector('#folderSubmitBtn');
        if (submitButton) submitButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É';
        const defaultColorInput = form.querySelector('input[name="folderColor"][value="blue"]');
        if (defaultColorInput) defaultColorInput.checked = true;
    }

    const foldersListElement = modal.querySelector('#foldersList');
    if (foldersListElement) {
        loadFoldersList(foldersListElement);
    } else {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç #foldersList –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø–∞–ø–æ–∫.");
    }

    if (modal && typeof addEscapeHandler === 'function') {
        addEscapeHandler(modal);
    } else if (modal) {
        console.warn("[showOrganizeFoldersModal] addEscapeHandler function not found.");
    }

    modal.classList.remove('hidden');
    document.body.classList.add('modal-open');
}


async function handleDeleteBookmarkFolderClick(folderId, folderItem) {
    try {
        if (typeof getAllFromIndex !== 'function') {
            console.error("–§—É–Ω–∫—Ü–∏—è getAllFromIndex –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏!");
            showNotification("–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏.", "error");
            return;
        }

        const bookmarksInFolder = await getAllFromIndex('bookmarks', 'folder', folderId);
        const folderToDelete = await getFromIndexedDB('bookmarkFolders', folderId);

        let confirmationMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É "${folderToDelete?.name || 'ID ' + folderId}"?`;
        let shouldDeleteBookmarks = false;
        let screenshotIdsToDelete = [];

        if (bookmarksInFolder && bookmarksInFolder.length > 0) {
            confirmationMessage += `\n\n–í —ç—Ç–æ–π –ø–∞–ø–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç${bookmarksInFolder.length === 1 ? '—Å—è' : '—Å—è'} ${bookmarksInFolder.length} –∑–∞–∫–ª–∞–¥${bookmarksInFolder.length === 1 ? '–∫–∞' : (bookmarksInFolder.length < 5 ? '–∫–∏' : '–æ–∫')}. –û–Ω–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –£–î–ê–õ–ï–ù–´ –≤–º–µ—Å—Ç–µ —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏!`;
            shouldDeleteBookmarks = true;
            bookmarksInFolder.forEach(bm => {
                if (Array.isArray(bm.screenshotIds) && bm.screenshotIds.length > 0) {
                    screenshotIdsToDelete.push(...bm.screenshotIds);
                }
            });
            screenshotIdsToDelete = [...new Set(screenshotIdsToDelete)];
            console.log(`–ö —É–¥–∞–ª–µ–Ω–∏—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${bookmarksInFolder.length} –∑–∞–∫–ª–∞–¥–æ–∫ –∏ ${screenshotIdsToDelete.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.`);
        }

        if (!confirm(confirmationMessage)) {
            console.log("–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
            return;
        }

        console.log(`–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ ID: ${folderId}. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–æ–∫: ${shouldDeleteBookmarks}. –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${screenshotIdsToDelete.length > 0}`);

        const indexUpdatePromises = [];
        if (folderToDelete && typeof updateSearchIndex === 'function') {
            indexUpdatePromises.push(
                updateSearchIndex('bookmarkFolders', folderId, folderToDelete, 'delete')
                    .catch(err => console.error(`–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ ${folderId}):`, err))
            );
            if (shouldDeleteBookmarks) {
                bookmarksInFolder.forEach(bm => {
                    indexUpdatePromises.push(
                        updateSearchIndex('bookmarks', bm.id, bm, 'delete')
                            .catch(err => console.error(`–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ ${bm.id}):`, err))
                    );
                });
            }
        } else {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è updateSearchIndex –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
        }
        await Promise.allSettled(indexUpdatePromises);
        console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (—É–¥–∞–ª–µ–Ω–∏–µ) –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");

        let transaction;
        try {
            const stores = ['bookmarkFolders'];
            if (shouldDeleteBookmarks) stores.push('bookmarks');
            if (screenshotIdsToDelete.length > 0) stores.push('screenshots');

            transaction = db.transaction(stores, 'readwrite');
            const folderStore = transaction.objectStore('bookmarkFolders');
            const bookmarkStore = stores.includes('bookmarks') ? transaction.objectStore('bookmarks') : null;
            const screenshotStore = stores.includes('screenshots') ? transaction.objectStore('screenshots') : null;

            const deleteRequests = [];

            deleteRequests.push(new Promise((resolve, reject) => {
                const req = folderStore.delete(folderId);
                req.onsuccess = resolve;
                req.onerror = (e) => reject(e.target.error || new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ ${folderId}`));
            }));

            if (bookmarkStore && shouldDeleteBookmarks) {
                bookmarksInFolder.forEach(bm => {
                    deleteRequests.push(new Promise((resolve, reject) => {
                        const req = bookmarkStore.delete(bm.id);
                        req.onsuccess = resolve;
                        req.onerror = (e) => reject(e.target.error || new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏ ${bm.id}`));
                    }));
                });
            }

            if (screenshotStore && screenshotIdsToDelete.length > 0) {
                screenshotIdsToDelete.forEach(screenshotId => {
                    deleteRequests.push(new Promise((resolve, reject) => {
                        const req = screenshotStore.delete(screenshotId);
                        req.onsuccess = resolve;
                        req.onerror = (e) => reject(e.target.error || new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ${screenshotId}`));
                    }));
                });
            }

            await Promise.all(deleteRequests);

            await new Promise((resolve, reject) => {
                transaction.oncomplete = resolve;
                transaction.onerror = (e) => reject(e.target.error || new Error("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è"));
                transaction.onabort = (e) => reject(e.target.error || new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞"));
            });

            console.log(`–ü–∞–ø–∫–∞ ${folderId}, ${bookmarksInFolder.length} –∑–∞–∫–ª–∞–¥–æ–∫ –∏ ${screenshotIdsToDelete.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î.`);

            if (folderItem && folderItem.parentNode) folderItem.remove();
            else console.warn(`–≠–ª–µ–º–µ–Ω—Ç –ø–∞–ø–∫–∏ ${folderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ DOM.`);

            await populateBookmarkFolders();
            await loadBookmarks();

            showNotification("–ü–∞–ø–∫–∞ –∏ –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–¥–∞–ª–µ–Ω—ã");

            const foldersList = document.getElementById('foldersList');
            if (foldersList && !foldersList.querySelector('.folder-item')) {
                foldersList.innerHTML = '<div class="text-center py-4 text-gray-500">–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫</div>';
            }

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏/–∑–∞–∫–ª–∞–¥–æ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
            showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: " + (error.message || error), "error");
            if (transaction && transaction.readyState !== 'done' && transaction.abort) {
                try { transaction.abort(); } catch (abortErr) { console.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ:", abortErr); }
            }
            await loadBookmarks();
            const foldersList = document.getElementById('foldersList');
            if (foldersList) await loadFoldersList(foldersList);
        }

    } catch (error) {
        console.error("–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫ (–≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏):", error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: " + (error.message || error), "error");
    }
}


function initCibLinkSystem() {
    const essentialIds = ['addLinkBtn', 'linksContainer', 'linksContent', 'linkSearchInput'];
    const coreElements = getRequiredElements(essentialIds);

    if (!coreElements) {
        console.error("!!! –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã CIB –≤ initCibLinkSystem. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.");
        return;
    }

    const { addLinkBtn, linksContainer, linksContent, linkSearchInput } = coreElements;

    try {
        addLinkBtn.addEventListener('click', () => showAddEditCibLinkModal());
    } catch (e) { console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ addLinkBtn:", e); }

    if (typeof debounce === 'function' && typeof filterLinks === 'function') {
        try {
            linkSearchInput.addEventListener('input', debounce(filterLinks, 250));
        } catch (e) { console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ linkSearchInput:", e); }

        if (typeof setupClearButton === 'function') {
            setupClearButton('linkSearchInput', 'clearLinkSearchInputBtn', filterLinks);
        } else {
            console.warn("–§—É–Ω–∫—Ü–∏—è setupClearButton –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ 1–°.");
        }
    } else {
        console.error("!!! –§—É–Ω–∫—Ü–∏–∏ debounce –∏–ª–∏ filterLinks –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ 1–° —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç.");
    }

    loadCibLinks();

    try {
        linksContent.querySelectorAll('.view-toggle').forEach(button => {
            if (typeof handleViewToggleClick === 'function') {
                button.removeEventListener('click', handleViewToggleClick);
                button.addEventListener('click', handleViewToggleClick);
            } else {
                console.warn("–§—É–Ω–∫—Ü–∏—è handleViewToggleClick –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∏–¥–∞ —Å—Å—ã–ª–æ–∫ 1–°.");
            }
        });
    } catch (e) { console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫ –∫–Ω–æ–ø–∫–∞–º –≤–∏–¥–∞ —Å—Å—ã–ª–æ–∫ 1–°:", e); }

    try {
        linksContainer.removeEventListener('click', handleLinkActionClick);
        linksContainer.addEventListener('click', handleLinkActionClick);
    } catch (e) { console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ linksContainer:", e); }

    initCibLinkModal();

    console.log("–°–∏—Å—Ç–µ–º–∞ —Å—Å—ã–ª–æ–∫ 1–° –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
}


function filterLinks() {
    filterItems({
        containerSelector: '#linksContainer',
        itemSelector: '.cib-link-item',
        searchInputSelector: 'linkSearchInput',
        textSelectors: ['h3', 'code', 'p']
    });
}


function initCibLinkModal() {
    const modal = document.getElementById('cibLinkModal');
    if (!modal) {
        console.warn("CIB Link modal (#cibLinkModal) not found during init.");
        return;
    }

    const form = modal.querySelector('#cibLinkForm');
    if (!form) {
        console.error("CIB Link modal form (#cibLinkForm) not found.");
        return;
    }

    modal.querySelectorAll('.close-modal, .cancel-modal').forEach(button => {
        button.removeEventListener('click', closeModalHandler);
        button.addEventListener('click', closeModalHandler);
    });

    function closeModalHandler() {
        modal.classList.add('hidden');
        removeEscapeHandler(modal);
        if (getVisibleModals().length === 0) {
            document.body.classList.remove('overflow-hidden');
        }
    }

    form.removeEventListener('submit', handleCibLinkSubmit);
    form.addEventListener('submit', handleCibLinkSubmit);
}


async function showAddEditCibLinkModal(linkId = null) {
    const modalElements = getRequiredElements([
        'cibLinkModal', 'cibLinkForm', 'cibLinkModalTitle', 'cibLinkId',
        'saveCibLinkBtn', 'cibLinkTitle', 'cibLinkValue', 'cibLinkDescription'
    ]);
    if (!modalElements) return;

    const {
        cibLinkModal: modal,
        cibLinkForm: form,
        cibLinkModalTitle: modalTitle,
        cibLinkId: linkIdInput,
        saveCibLinkBtn: saveButton,
        cibLinkTitle: titleInput,
        cibLinkValue: linkValueInput,
        cibLinkDescription: descriptionInput
    } = modalElements;

    form.reset();
    linkIdInput.value = linkId ? linkId : '';

    try {
        if (linkId) {
            modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É 1–°';
            saveButton.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';

            const link = await getFromIndexedDB('links', linkId);
            if (!link) {
                showNotification(`–°—Å—ã–ª–∫–∞ —Å ID ${linkId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, "error");
                return;
            }
            titleInput.value = link.title ?? '';
            linkValueInput.value = link.link ?? '';
            descriptionInput.value = link.description ?? '';

        } else {
            modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É 1–°';
            saveButton.innerHTML = '<i class="fas fa-plus mr-1"></i> –î–æ–±–∞–≤–∏—Ç—å';
        }

        modal.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
        addEscapeHandler(modal);
        titleInput.focus();

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ ${linkId ? '–∑–∞–≥—Ä—É–∑–∫–µ' : '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ'} —Å—Å—ã–ª–∫–∏ 1–°:`, error);
        showNotification(`–ù–µ —É–¥–∞–ª–æ—Å—å ${linkId ? '–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' : '–æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É'} —Å—Å—ã–ª–∫–∏`, "error");
    }
}


function handleLinkActionClick(event) {
    const target = event.target;

    const buttonOrAnchor = target.closest('button[data-action], a[data-action]');
    const linkItem = target.closest('.cib-link-item[data-id]');

    if (!linkItem) return;

    const linkId = parseInt(linkItem.dataset.id, 10);
    if (isNaN(linkId)) {
        console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Å—ã–ª–∫–∏ 1–°:", linkItem.dataset.id);
        return;
    }

    const codeElement = linkItem.querySelector('code');

    if (buttonOrAnchor) {
        event.stopPropagation();
        const action = buttonOrAnchor.dataset.action;

        switch (action) {
            case 'copy':
                if (codeElement) {
                    copyToClipboard(codeElement.textContent, '–°—Å—ã–ª–∫–∞ 1–° —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
                }
                break;
            case 'edit':
                if (typeof showAddEditCibLinkModal === 'function') {
                    showAddEditCibLinkModal(linkId);
                } else {
                    console.error("–§—É–Ω–∫—Ü–∏—è showAddEditCibLinkModal –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    showNotification("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
                }
                break;
            case 'delete':
                const titleElement = linkItem.querySelector('h3');
                const linkTitle = titleElement ? (titleElement.getAttribute('title') || titleElement.textContent) : `ID ${linkId}`;
                if (typeof deleteCibLink === 'function') {
                    deleteCibLink(linkId, linkTitle);
                } else {
                    console.error("–§—É–Ω–∫—Ü–∏—è deleteCibLink –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    showNotification("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
                }
                break;
            default:
                console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '${action}' –¥–ª—è —Å—Å—ã–ª–∫–∏ 1–°.`);
        }
    } else {
        if (codeElement) {
            copyToClipboard(codeElement.textContent, '–°—Å—ã–ª–∫–∞ 1–° —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
        }
    }
}


async function loadCibLinks() {
    const linksContainer = document.getElementById('linksContainer');
    if (!linksContainer) {
        console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Å—ã–ª–æ–∫ (#linksContainer) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ loadCibLinks.");
        return;
    }

    linksContainer.innerHTML = '<div class="col-span-full text-center py-6 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–æ–∫...</div>';

    try {
        let links = await getAllFromIndexedDB('links');
        let linksToRender = links;

        if (!links || links.length === 0) {
            console.log("–ë–∞–∑–∞ —Å—Å—ã–ª–æ–∫ 1–° –ø—É—Å—Ç–∞. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä.");

            const linksToSave = [...DEFAULT_CIB_LINKS];
            const savedLinkIds = await Promise.all(
                linksToSave.map(link => saveToIndexedDB('links', link))
            );
            const linksWithIds = linksToSave.map((link, index) => ({ ...link, id: savedLinkIds[index] }));

            console.log("–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ IndexedDB.");

            if (typeof updateSearchIndex === 'function') {
                try {
                    await Promise.all(linksWithIds.map(link =>
                        updateSearchIndex('links', link.id, link, 'add', null)
                            .catch(err => console.error(`–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ 1–° ${link.id}:`, err))
                    ));
                    console.log("–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ 1–° –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.");
                } catch (indexingError) {
                    console.error("–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ 1–°:", indexingError);
                }
            } else {
                console.warn("–§—É–Ω–∫—Ü–∏—è updateSearchIndex –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ 1–°.");
            }

            linksToRender = linksWithIds;
        }

        renderCibLinks(linksToRender);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Å—ã–ª–æ–∫ 1–°:", error);
        linksContainer.innerHTML = '<div class="col-span-full text-center py-6 text-red-500">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Å—ã–ª–∫–∏.</div>';
        if (typeof applyCurrentView === 'function') {
            applyCurrentView('linksContainer');
        } else {
            console.warn("–§—É–Ω–∫—Ü–∏—è applyCurrentView –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏.");
        }
    }
}


async function getAllCibLinks() {
    try {
        const links = await getAllFromIndexedDB('links');
        return links || [];
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ 1–°:", error);
        return [];
    }
}


async function renderCibLinks(links) {
    const linksContainer = document.getElementById('linksContainer');
    if (!linksContainer) {
        console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Å—ã–ª–æ–∫ (#linksContainer) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ renderCibLinks.");
        return;
    }

    linksContainer.innerHTML = '';

    if (!links || links.length === 0) {
        linksContainer.innerHTML = '<div class="col-span-full text-center py-6 text-gray-500">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ 1–°. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É".</div>';
        if (typeof applyCurrentView === 'function') {
            applyCurrentView('linksContainer');
        } else {
            console.warn("–§—É–Ω–∫—Ü–∏—è applyCurrentView –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ —Å—Å—ã–ª–æ–∫ 1–°.");
            if (typeof applyView === 'function') {
                applyView(linksContainer, linksContainer.dataset.defaultView || 'cards');
            }
        }
        return;
    }

    const fragment = document.createDocumentFragment();

    links.forEach(link => {
        if (!link || typeof link.id === 'undefined') {
            console.warn("–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ 1–° –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ:", link);
            return;
        }

        const linkElement = document.createElement('div');

        linkElement.className = 'cib-link-item view-item group relative border border-gray-200 dark:border-gray-700 bg-white dark:bg-[#374151] rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 cursor-pointer';
        linkElement.dataset.id = link.id;

        const buttonsHTML = `
            <div class="absolute top-2 right-2 z-10 flex items-center gap-1 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-200">
                <button data-action="copy" class="copy-cib-link p-1.5 text-gray-500 hover:text-primary rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É">
                    <i class="fas fa-copy fa-fw"></i>
                </button>
                <button data-action="edit" class="edit-cib-link p-1.5 text-gray-500 hover:text-primary rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    <i class="fas fa-edit fa-fw"></i>
                </button>
                <button data-action="delete" class="delete-cib-link p-1.5 text-gray-500 hover:text-red-500 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" title="–£–¥–∞–ª–∏—Ç—å">
                    <i class="fas fa-trash fa-fw"></i>
                </button>
            </div>
        `;

        const contentHTML = `
            <div class="p-4 flex flex-col h-full">
                <h3 class="font-semibold text-base text-gray-900 dark:text-gray-100 mb-1 pr-20" title="${link.title || ''}">${link.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                <div class="mb-2">
                    <code class="text-xs text-gray-600 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded break-all inline-block w-full">${link.link || ''}</code>
                </div>
                ${link.description ? `<p class="text-gray-500 dark:text-gray-400 text-sm mt-auto flex-grow">${link.description}</p>` : '<div class="flex-grow"></div>'}
            </div>
        `;

        linkElement.innerHTML = buttonsHTML + contentHTML;
        fragment.appendChild(linkElement);
    });

    linksContainer.appendChild(fragment);

    if (typeof applyCurrentView === 'function') {
        applyCurrentView('linksContainer');
    } else {
        console.warn("–§—É–Ω–∫—Ü–∏—è applyCurrentView –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∞ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Å—ã–ª–æ–∫ 1–°.");
        if (typeof applyView === 'function') {
            applyView(linksContainer, linksContainer.dataset.defaultView || 'cards');
        }
    }
}


async function showAddEditCibLinkModal(linkId = null) {
    const modalElements = getRequiredElements([
        'cibLinkModal', 'cibLinkForm', 'cibLinkModalTitle', 'cibLinkId',
        'saveCibLinkBtn', 'cibLinkTitle', 'cibLinkValue', 'cibLinkDescription'
    ]);
    if (!modalElements) return;

    const {
        cibLinkModal: modal,
        cibLinkForm: form,
        cibLinkModalTitle: modalTitle,
        cibLinkId: linkIdInput,
        saveCibLinkBtn: saveButton,
        cibLinkTitle: titleInput,
        cibLinkValue: linkValueInput,
        cibLinkDescription: descriptionInput
    } = modalElements;

    form.reset();
    linkIdInput.value = linkId ? linkId : '';

    try {
        if (linkId) {
            modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É 1–°';
            saveButton.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';

            const link = await getFromIndexedDB('links', linkId);
            if (!link) {
                showNotification(`–°—Å—ã–ª–∫–∞ —Å ID ${linkId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, "error");
                return;
            }
            titleInput.value = link.title ?? '';
            linkValueInput.value = link.link ?? '';
            descriptionInput.value = link.description ?? '';

        } else {
            modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É 1–°';
            saveButton.innerHTML = '<i class="fas fa-plus mr-1"></i> –î–æ–±–∞–≤–∏—Ç—å';
        }

        modal.classList.remove('hidden');
        titleInput.focus();

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ ${linkId ? '–∑–∞–≥—Ä—É–∑–∫–µ' : '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ'} —Å—Å—ã–ª–∫–∏ 1–°:`, error);
        showNotification(`–ù–µ —É–¥–∞–ª–æ—Å—å ${linkId ? '–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' : '–æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É'} —Å—Å—ã–ª–∫–∏`, "error");
    }
}


async function handleCibLinkSubmit(event) {
    event.preventDefault();
    const form = event.target;
    const saveButton = form.querySelector('button[type="submit"]');
    if (saveButton) saveButton.disabled = true;

    const id = form.elements.cibLinkId.value;
    const title = form.elements.cibLinkTitle.value.trim();
    const linkValue = form.elements.cibLinkValue.value.trim();
    const description = form.elements.cibLinkDescription.value.trim();

    if (!title || !linkValue) {
        showNotification("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è '–ù–∞–∑–≤–∞–Ω–∏–µ' –∏ '–°—Å—ã–ª–∫–∞ 1–°'", "error");
        if (saveButton) saveButton.disabled = false;
        return;
    }

    const newData = {
        title,
        link: linkValue,
        description,
    };

    const isEditing = !!id;
    let oldData = null;
    let finalId = null;

    try {
        const timestamp = new Date().toISOString();
        if (isEditing) {
            newData.id = parseInt(id, 10);
            finalId = newData.id;

            try {
                oldData = await getFromIndexedDB('links', newData.id);
                newData.dateAdded = oldData?.dateAdded || timestamp;
            } catch (fetchError) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ 1–° (${newData.id}) –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞:`, fetchError);
                newData.dateAdded = timestamp;
            }
            newData.dateUpdated = timestamp;
        } else {
            newData.dateAdded = timestamp;
        }

        const savedResult = await saveToIndexedDB('links', newData);

        if (!isEditing) {
            finalId = savedResult;
            newData.id = finalId;
        }

        if (typeof updateSearchIndex === 'function') {
            try {
                await updateSearchIndex(
                    'links',
                    finalId,
                    newData,
                    isEditing ? 'update' : 'add',
                    oldData
                );
                const oldDataStatus = oldData ? '—Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏' : '(–±–µ–∑ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö)';
                console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏ 1–° (${finalId}) –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ ${oldDataStatus}.`);
            } catch (indexError) {
                console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏ 1–° ${finalId}:`, indexError);
                showNotification("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏.", "warning");
            }
        } else {
            console.warn("–§—É–Ω–∫—Ü–∏—è updateSearchIndex –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
        }

        showNotification(isEditing ? "–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞" : "–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
        document.getElementById('cibLinkModal')?.classList.add('hidden');
        loadCibLinks();

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ 1–°:", error);
        showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", "error");
    } finally {
        if (saveButton) saveButton.disabled = false;
    }
}


async function deleteCibLink(linkId, linkTitle) {
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É "${linkTitle || `ID ${linkId}`}"?`)) {
        try {
            const linkToDelete = await getFromIndexedDB('links', linkId);
            if (!linkToDelete) {
                console.warn(`–°—Å—ã–ª–∫–∞ 1–° —Å ID ${linkId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–Ω–¥–µ–∫—Å–∞.`);
            }

            if (linkToDelete && typeof updateSearchIndex === 'function') {
                try {
                    await updateSearchIndex('links', linkId, linkToDelete, 'delete');
                    console.log(`Search index updated (delete) for CIB link ID: ${linkId}`);
                } catch (indexError) {
                    console.error(`Error updating search index for CIB link deletion ${linkId}:`, indexError);
                }
            } else if (!linkToDelete) {

            } else {
                console.warn("updateSearchIndex function not available for CIB link deletion.");
            }

            await deleteFromIndexedDB('links', linkId);
            showNotification("–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞");
            loadCibLinks();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ 1–°:", error);
            showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É", "error");
        }
    }
}


function copyToClipboard(text, successMessage = "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!") {
    if (!navigator.clipboard) {
        const textArea = document.createElement("textarea");
        textArea.value = text;
        textArea.style.position = "fixed";
        textArea.style.left = "-9999px";
        textArea.style.opacity = "0";
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        try {
            const successful = document.execCommand('copy');
            if (successful) {
                showNotification(successMessage);
            } else {
                console.error('Fallback: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å');
                showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ (fallback)", "error");
            }
        } catch (err) {
            console.error('Fallback: –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', err);
            showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ (fallback)", "error");
        } finally {
            document.body.removeChild(textArea);
        }
        return;
    }
    navigator.clipboard.writeText(text).then(() => {
        showNotification(successMessage);
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: ', err);
        showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", "error");
    });
}


function initReglamentsSystem() {
    const addReglamentBtnOriginal = document.getElementById('addReglamentBtn');
    const categoryGrid = document.getElementById('reglamentCategoryGrid');
    const reglamentsListDiv = document.getElementById('reglamentsList');
    const backToCategoriesBtn = document.getElementById('backToCategories');
    const globalReglamentActionsBar = document.getElementById('globalReglamentActionsBar');

    if (!categoryGrid || !reglamentsListDiv || !globalReglamentActionsBar) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.");
        return;
    }

    if (!categoryGrid.dataset.sectionId) {
        categoryGrid.dataset.sectionId = 'reglamentCategoryGrid';
    }
    if (!categoryGrid.dataset.defaultView) {
        categoryGrid.dataset.defaultView = 'cards';
    }
    const reglamentsContainer = document.getElementById('reglamentsContainer');
    if (reglamentsContainer) {
        if (!reglamentsContainer.dataset.sectionId) {
            reglamentsContainer.dataset.sectionId = 'reglamentsContainer';
        }
        if (!reglamentsContainer.dataset.defaultView) {
            reglamentsContainer.dataset.defaultView = 'list';
        }
    }

    if (addReglamentBtnOriginal) {
        addReglamentBtnOriginal.addEventListener('click', () => {
            const currentCategoryId = reglamentsListDiv && !reglamentsListDiv.classList.contains('hidden')
                ? reglamentsListDiv.dataset.currentCategory
                : null;
            showAddReglamentModal(currentCategoryId);
        });
    } else {
        console.error("–ö–Ω–æ–ø–∫–∞ #addReglamentBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    renderReglamentCategories();
    if (typeof applyCurrentView === 'function') {
        applyCurrentView('reglamentCategoryGrid');
    }

    populateReglamentCategoryDropdowns();

    categoryGrid.addEventListener('click', (event) => {
        const categoryElement = event.target.closest('.reglament-category');
        if (!categoryElement) return;
        const categoryId = categoryElement.dataset.category;

        if (event.target.closest('.delete-category-btn')) {
            // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–±—Ä–∞–Ω
            // if (typeof handleDeleteCategoryClick === 'function') handleDeleteCategoryClick(event);
            // else console.error("–§—É–Ω–∫—Ü–∏—è handleDeleteCategoryClick –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        } else if (event.target.closest('.edit-category-btn')) {
            // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–±—Ä–∞–Ω
            // event.stopPropagation();
            // if (typeof showAddCategoryModal === 'function') showAddCategoryModal(categoryId);
            // else console.error("–§—É–Ω–∫—Ü–∏—è showAddCategoryModal (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        } else {
            showReglamentsForCategory(categoryId);
            if (reglamentsListDiv) reglamentsListDiv.dataset.currentCategory = categoryId;
        }
    });

    if (backToCategoriesBtn) {
        backToCategoriesBtn.addEventListener('click', () => {
            if (reglamentsListDiv) {
                reglamentsListDiv.classList.add('hidden');
                delete reglamentsListDiv.dataset.currentCategory;
            }
            if (categoryGrid) categoryGrid.classList.remove('hidden');

            if (typeof applyCurrentView === 'function') {
                applyCurrentView('reglamentCategoryGrid');
            }

            const reglamentsContainer = document.getElementById('reglamentsContainer');
            if (reglamentsContainer) reglamentsContainer.innerHTML = '';
            const currentCategoryTitle = document.getElementById('currentCategoryTitle');
            if (currentCategoryTitle) currentCategoryTitle.textContent = '';
        });
    } else {
        console.error("–ö–Ω–æ–ø–∫–∞ #backToCategories –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    const viewTogglesInGlobalBar = globalReglamentActionsBar.querySelectorAll('.view-toggle');
    viewTogglesInGlobalBar.forEach(button => {
        if (button._clickHandlerReglaments) {
            button.removeEventListener('click', button._clickHandlerReglaments);
        }
        button._clickHandlerReglaments = (event) => {
            handleViewToggleClick(event);
        };
        button.addEventListener('click', button._clickHandlerReglaments);
    });
    console.log("–°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
}


async function showReglamentDetail(reglamentId) {
    if (typeof reglamentId !== 'number' && typeof reglamentId !== 'string') {
        console.error("showReglamentDetail: Invalid reglamentId provided:", reglamentId);
        showNotification("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞.", "error");
        return;
    }
    const numericId = parseInt(reglamentId, 10);
    if (isNaN(numericId)) {
        console.error("showReglamentDetail: Could not parse reglamentId to number:", reglamentId);
        showNotification("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞.", "error");
        return;
    }

    const modalId = 'reglamentDetailModal';
    const modalClassName = 'fixed inset-0 bg-black bg-opacity-50 hidden z-[70] p-4 flex items-center justify-center';

    const modalHTML = `
        <div class="flex items-center justify-center min-h-full">
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-[95%] max-w-4xl max-h-[90vh] flex flex-col overflow-hidden">
                <div class="flex-shrink-0 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="flex justify-between items-center">
                        <h2 class="text-xl font-bold text-gray-800 dark:text-gray-100" id="reglamentDetailTitle">–î–µ—Ç–∞–ª–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞</h2>
                        <div class="flex items-center">
                            <div class="fav-btn-placeholder-modal-reglament mr-1"></div>
                            <button id="exportReglamentToPdfBtn" type="button" class="inline-block p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors align-middle" title="–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF">
                                <i class="fas fa-file-pdf"></i>
                            </button>
                            <button id="toggleFullscreenReglamentDetailBtn" type="button" class="inline-block p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors align-middle" title="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω">
                                <i class="fas fa-expand"></i>
                            </button>
                            <button class="close-detail-modal ml-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
                                <i class="fas fa-times text-xl"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="flex-1 overflow-y-auto p-6" id="reglamentDetailContent">
                    <p class="text-center text-gray-500 dark:text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                </div>
                <div class="flex-shrink-0 px-6 py-4 bg-gray-50 dark:bg-gray-700 border-t border-gray-200 dark:border-gray-600">
                    <div class="flex flex-col sm:flex-row justify-between items-center gap-3">
                        <span class="text-xs text-gray-500 dark:text-gray-400 text-center sm:text-left" id="reglamentDetailMeta"></span>
                        <div class="flex items-center gap-2 flex-shrink-0">
                            <button type="button" id="editReglamentFromDetailBtn" class="px-4 py-2 bg-primary hover:bg-secondary text-white rounded-md transition text-sm font-medium inline-flex items-center disabled:opacity-50 disabled:cursor-not-allowed">
                                <i class="fas fa-edit mr-1.5"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            <button type="button" class="close-detail-modal px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-200 rounded-md transition text-sm font-medium">
                                –ó–∞–∫—Ä—ã—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>`;

    const setupDetailModal = (modalElement, isNew) => {
        const editButton = modalElement.querySelector('#editReglamentFromDetailBtn');
        if (editButton) {
            if (editButton._clickHandler) {
                editButton.removeEventListener('click', editButton._clickHandler);
            }
            editButton._clickHandler = () => {
                const currentId = modalElement.dataset.currentReglamentId;
                if (currentId) {
                    if (typeof editReglament === 'function') {
                        modalElement.classList.add('hidden');
                        removeEscapeHandler(modalElement);
                        if (getVisibleModals().filter(m => m.id !== modalId).length === 0) {
                            document.body.classList.remove('modal-open');
                        }
                        editReglament(parseInt(currentId, 10));
                    } else {
                        console.error("–§—É–Ω–∫—Ü–∏—è editReglament –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                        showNotification("–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
                    }
                } else {
                    console.error("–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ dataset –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞");
                    showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", "error");
                }
            };
            editButton.addEventListener('click', editButton._clickHandler);
        } else {
            console.error("–ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è #editReglamentFromDetailBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –¥–µ—Ç–∞–ª–µ–π");
        }

        const fullscreenBtn = modalElement.querySelector('#toggleFullscreenReglamentDetailBtn');
        if (fullscreenBtn) {
            if (fullscreenBtn._fullscreenToggleHandler) {
                fullscreenBtn.removeEventListener('click', fullscreenBtn._fullscreenToggleHandler);
            }
            fullscreenBtn._fullscreenToggleHandler = () => {
                if (typeof toggleModalFullscreen === 'function') {
                    toggleModalFullscreen(
                        reglamentDetailModalConfig.modalId,
                        reglamentDetailModalConfig.buttonId,
                        reglamentDetailModalConfig.classToggleConfig,
                        reglamentDetailModalConfig.innerContainerSelector,
                        reglamentDetailModalConfig.contentAreaSelector
                    );
                } else {
                    console.error("–§—É–Ω–∫—Ü–∏—è toggleModalFullscreen –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                    showNotification("–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
                }
            };
            fullscreenBtn.addEventListener('click', fullscreenBtn._fullscreenToggleHandler);
            console.log(`Fullscreen listener attached to ${reglamentDetailModalConfig.buttonId} for ${reglamentDetailModalConfig.modalId}.`);
        } else {
            console.error("–ö–Ω–æ–ø–∫–∞ #toggleFullscreenReglamentDetailBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞!");
        }

        const exportBtn = modalElement.querySelector('#exportReglamentToPdfBtn');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => {
                const content = document.getElementById('reglamentDetailContent');
                const title = document.getElementById('reglamentDetailTitle').textContent;
                ExportService.exportElementToPdf(content, title);
            });
        }
    };

    const modal = getOrCreateModal(modalId, modalClassName, modalHTML, setupDetailModal);
    const titleElement = modal.querySelector('#reglamentDetailTitle');
    const contentElement = modal.querySelector('#reglamentDetailContent');
    const metaElement = modal.querySelector('#reglamentDetailMeta');
    const editButton = modal.querySelector('#editReglamentFromDetailBtn');

    const favoriteButtonContainer = modal.querySelector('.fav-btn-placeholder-modal-reglament');

    if (titleElement) titleElement.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞...';
    if (contentElement) contentElement.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>';
    if (metaElement) metaElement.textContent = '';
    if (editButton) editButton.disabled = true;
    modal.dataset.currentReglamentId = String(numericId);

    modal.classList.remove('hidden');
    document.body.classList.add('modal-open');

    try {
        const reglament = await getFromIndexedDB('reglaments', numericId);

        if (!reglament) {
            if (titleElement) titleElement.textContent = '–û—à–∏–±–∫–∞';
            if (contentElement) contentElement.innerHTML = `<p class="text-red-500 text-center font-semibold">–†–µ–≥–ª–∞–º–µ–Ω—Ç —Å ID ${numericId} –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>`;
            showNotification("–†–µ–≥–ª–∞–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "error");
            if (editButton) editButton.disabled = true;
            return;
        }

        if (favoriteButtonContainer) {
            const isFav = isFavorite('reglament', String(reglament.id));
            const favButtonHTML = getFavoriteButtonHTML(reglament.id, 'reglament', 'reglaments', reglament.title, reglament.content?.substring(0, 100) + "...", isFav);
            favoriteButtonContainer.innerHTML = favButtonHTML;
        }

        if (titleElement) titleElement.textContent = reglament.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';

        if (contentElement) {
            try {
                const preElement = document.createElement('pre');
                preElement.className = 'whitespace-pre-wrap break-words text-sm font-sans';
                preElement.style.fontSize = '102%';
                preElement.textContent = reglament.content || '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.';
                contentElement.innerHTML = '';
                contentElement.appendChild(preElement);

            } catch (error) {
                console.error("Error setting reglament content:", error);
                contentElement.textContent = '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.';
            }
        }

        if (metaElement) {
            const categoryInfo = reglament.category ? categoryDisplayInfo[reglament.category] : null;
            const categoryName = categoryInfo ? categoryInfo.title : reglament.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
            const dateAdded = reglament.dateAdded ? new Date(reglament.dateAdded).toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            const dateUpdated = reglament.dateUpdated ? new Date(reglament.dateUpdated).toLocaleDateString() : null;

            let metaParts = [
                `ID: ${reglament.id}`,
                `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`,
                `–î–æ–±–∞–≤–ª–µ–Ω: ${dateAdded}`
            ];
            if (dateUpdated && dateUpdated !== dateAdded) {
                metaParts.push(`–û–±–Ω–æ–≤–ª–µ–Ω: ${dateUpdated}`);
            }
            metaElement.textContent = metaParts.join(' | ');
        }

        if (editButton) editButton.disabled = false;

    } catch (error) {
        console.error(`Error fetching or displaying reglament ${numericId}:`, error);
        if (titleElement) titleElement.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
        if (contentElement) contentElement.innerHTML = `<p class="text-red-500 text-center font-semibold">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç.</p>`;
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞", "error");
        if (editButton) editButton.disabled = true;
    }
}


function renderReglamentCategories() {
    const categoryGrid = document.getElementById('reglamentCategoryGrid');
    if (!categoryGrid) {
        console.error("Category grid container (#reglamentCategoryGrid) not found.");
        return;
    }
    categoryGrid.innerHTML = '';

    Object.entries(categoryDisplayInfo).forEach(([categoryId, info]) => {
        const categoryElement = createCategoryElement(categoryId, info.title, info.icon, info.color);
        categoryGrid.appendChild(categoryElement);
    });
}


function createCategoryElement(categoryId, title, iconClass = 'fa-folder', color = 'gray') {
    const categoryElement = document.createElement('div');
    categoryElement.className = `reglament-category view-item bg-white dark:bg-gray-700 p-content rounded-lg shadow-sm hover:shadow-md transition cursor-pointer flex flex-col justify-between group relative border-l-4 border-transparent`;
    categoryElement.dataset.category = categoryId;

    const iconColorMap = {
        'red': 'text-red-400',
        'blue': 'text-blue-400',
        'orange': 'text-orange-400',
        'gray': 'text-gray-300',
        'default': 'text-gray-300'
    };

    const iconColorClass = iconColorMap[color] || iconColorMap['default'];
    const titleBaseColorClass = 'text-gray-100';
    const titleHoverColorClass = 'group-hover:text-primary';

    categoryElement.innerHTML = `
        <div class="category-content-wrapper flex-grow flex flex-col items-center text-center md:items-start md:text-left">
            <div class="category-header-info flex flex-col md:flex-row items-center md:items-center mb-2">
                <i class="category-icon fas ${iconClass} ${iconColorClass} text-3xl md:text-2xl md:mr-3"></i>
                <h4 class="category-title font-bold text-lg ${titleBaseColorClass} ${titleHoverColorClass} transition-colors duration-150 ease-in-out">${title}</h4>
            </div>
        </div>
    `;
    return categoryElement;
}


async function handleSaveFolderSubmit(event) {
    event.preventDefault();
    const folderForm = event.target;
    const saveButton = folderForm.querySelector('#folderSubmitBtn');
    if (!folderForm || !saveButton) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ä–º—É –∏–ª–∏ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–ø–∫–∏.");
        return;
    }

    saveButton.disabled = true;
    saveButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';

    const nameInput = folderForm.elements.folderName;
    const name = nameInput.value.trim();
    const colorInput = folderForm.querySelector('input[name="folderColor"]:checked');
    const color = colorInput?.value ?? 'blue';

    if (!name) {
        showNotification("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏", "error");
        saveButton.disabled = false;
        saveButton.innerHTML = folderForm.dataset.editingId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É';
        nameInput.focus();
        return;
    }

    const isEditing = folderForm.dataset.editingId;
    const folderData = {
        name,
        color,
    };

    let oldData = null;
    let finalId = null;
    const timestamp = new Date().toISOString();

    try {
        if (isEditing) {
            folderData.id = parseInt(isEditing);
            finalId = folderData.id;
            try {
                oldData = await getFromIndexedDB('bookmarkFolders', finalId);
                folderData.dateAdded = oldData?.dateAdded || timestamp;
            } catch (fetchError) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫ (${finalId}):`, fetchError);
                folderData.dateAdded = timestamp;
            }
            folderData.dateUpdated = timestamp;
            console.log("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏:", folderData);
        } else {
            folderData.dateAdded = timestamp;
            console.log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:", folderData);
        }

        const savedResult = await saveToIndexedDB('bookmarkFolders', folderData);
        if (!isEditing) {
            finalId = savedResult;
            folderData.id = finalId;
        }

        if (typeof updateSearchIndex === 'function') {
            try {
                await updateSearchIndex(
                    'bookmarkFolders',
                    finalId,
                    folderData,
                    isEditing ? 'update' : 'add',
                    oldData
                );
                console.log(`–ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–∞–ø–∫–∏ ID: ${finalId}`);
            } catch (indexError) {
                console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –ø–∞–ø–∫–∏ ${finalId}:`, indexError);
                showNotification("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –ø–∞–ø–∫–∏.", "warning");
            }
        } else {
            console.warn("–§—É–Ω–∫—Ü–∏—è updateSearchIndex –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–∞–ø–∫–∏.");
        }

        const foldersList = document.getElementById('foldersList');
        if (foldersList) {
            await loadFoldersList(foldersList);
        }

        await populateBookmarkFolders();
        await loadBookmarks();

        showNotification(isEditing ? "–ü–∞–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞" : "–ü–∞–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞");

        folderForm.reset();
        delete folderForm.dataset.editingId;
        const submitButton = folderForm.querySelector('#folderSubmitBtn');
        if (submitButton) submitButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É';
        const defaultColorInput = folderForm.querySelector('input[name="folderColor"][value="blue"]');
        if (defaultColorInput) defaultColorInput.checked = true;

        const modal = document.getElementById('foldersModal');
        if (modal) {
            modal.classList.add('hidden');
            if (typeof removeEscapeHandler === 'function') {
                removeEscapeHandler(modal);
            }
            if (getVisibleModals().length === 0) {
                document.body.classList.remove('modal-open');
                document.body.classList.remove('overflow-hidden');
            }
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–ø–∫–∏:", error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: " + (error.message || error), "error");
    } finally {
        saveButton.disabled = false;
        saveButton.innerHTML = folderForm.dataset.editingId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É';
    }
}


async function handleDeleteCategoryClick(event) {
    const deleteButton = event.target.closest('.delete-category-btn');
    if (!deleteButton) return;

    event.stopPropagation();

    const categoryElement = deleteButton.closest('.reglament-category');
    const categoryId = categoryElement?.dataset.category;
    const categoryTitle = categoryElement?.querySelector('h4')?.textContent || '–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è';

    if (!categoryId) {
        console.error("Could not determine category ID for deletion.");
        return;
    }

    const protectedCategories = ['difficult-client', 'tech-support', 'emergency'];
    if (protectedCategories.includes(categoryId)) {
        showNotification(`–ö–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryTitle}" –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å (—Å–∏—Å—Ç–µ–º–Ω–∞—è).`, "warning");
        return;
    }

    try {
        const regulations = await getReglamentsByCategory(categoryId);
        if (regulations && regulations.length > 0) {
            showNotification(`–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryTitle}", —Ç.–∫. –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ${regulations.length} —Ä–µ–≥–ª–∞–º–µ–Ω—Ç(–æ–≤). –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã.`, "error", 5000);
            return;
        }

        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryTitle}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`)) {
            if (categoryDisplayInfo[categoryId]) {
                delete categoryDisplayInfo[categoryId];
                const success = await saveCategoryInfo();
                if (success) {
                    renderReglamentCategories();
                    populateReglamentCategoryDropdowns();
                    showNotification(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryTitle}" —É–¥–∞–ª–µ–Ω–∞.`);
                } else {
                    showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", "error");
                }
            } else {
                showNotification("–û—à–∏–±–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.", "error");
                if (categoryElement && categoryElement.parentNode) {
                    categoryElement.remove();
                }
                renderReglamentCategories();
            }
        }
    } catch (error) {
        console.error("Error checking/deleting category:", error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", "error");
    }
}


async function loadReglaments() {
    if (!db) {
        console.warn("[loadReglaments - CORRECTED] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
        return false;
    }

    try {
        const reglaments = await getAllFromIndexedDB('reglaments');
        if (!reglaments || reglaments.length === 0) {
            console.log("[loadReglaments - CORRECTED] –•—Ä–∞–Ω–∏–ª–∏—â–µ 'reglaments' –ø—É—Å—Ç–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö. –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –ù–ï —Å–æ–∑–¥–∞—é—Ç—Å—è.");
        } else {
            console.log(`[loadReglaments - CORRECTED] –í –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω–æ ${reglaments.length} —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.`);
        }
        return true;
    } catch (error) {
        console.error("[loadReglaments - CORRECTED] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤:", error);
        return false;
    }
}


async function getAllReglaments() {
    try {
        const reglaments = await getAllFromIndexedDB('reglaments');
        return reglaments || [];
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤:", error);
        return [];
    }
}


async function importReglaments(reglaments) {
    if (!db || !Array.isArray(reglaments)) {
        console.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.");
        return false;
    }

    console.log(`–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ ${reglaments.length} —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤...`);
    try {
        await clearIndexedDBStore('reglaments');
        console.log("–•—Ä–∞–Ω–∏–ª–∏—â–µ 'reglaments' –æ—á–∏—â–µ–Ω–æ.");

        const savePromises = reglaments.map(reglament => {
            const { id, ...reglamentData } = reglament;
            return saveToIndexedDB('reglaments', reglamentData);
        });

        const savedIds = await Promise.all(savePromises);
        console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedIds.length} —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –≤ IndexedDB.`);

        if (typeof updateSearchIndex === 'function') {
            console.log("–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤...");
            const indexPromises = reglaments.map((reglament, index) => {
                const newId = savedIds[index];
                if (newId === undefined || newId === null) {
                    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${reglament.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}. –ü—Ä–æ–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.`);
                    return Promise.resolve();
                }
                const reglamentWithId = { ...reglament, id: newId };
                return updateSearchIndex('reglaments', newId, reglamentWithId, 'add')
                    .catch(err => console.error(`–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ ID ${newId}:`, err));
            });
            await Promise.all(indexPromises);
            console.log("–ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.");
        } else {
            console.warn("–§—É–Ω–∫—Ü–∏—è updateSearchIndex –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞.");
            showNotification("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω.", "warning");
        }

        console.log("–ò–º–ø–æ—Ä—Ç —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.");
        await renderReglamentCategories();
        const reglamentsListDiv = document.getElementById('reglamentsList');
        const currentCategoryId = reglamentsListDiv?.dataset.currentCategory;
        if (currentCategoryId && reglamentsListDiv && !reglamentsListDiv.classList.contains('hidden')) {
            await showReglamentsForCategory(currentCategoryId);
        }

        return true;

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤:", error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤. –°–º. –∫–æ–Ω—Å–æ–ª—å.", "error");
        return false;
    }
}


async function showReglamentsForCategory(categoryId) {
    const reglamentsContainer = document.getElementById('reglamentsContainer');
    const reglamentsListDiv = document.getElementById('reglamentsList');
    const currentCategoryTitleEl = document.getElementById('currentCategoryTitle');
    const categoryGridElement = document.getElementById('reglamentCategoryGrid');

    if (!reglamentsContainer || !reglamentsListDiv || !currentCategoryTitleEl || !categoryGridElement) {
        console.error("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.");
        showNotification("–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤", "error");
        return;
    }

    const title = categoryDisplayInfo[categoryId]?.title || categoryId;
    currentCategoryTitleEl.textContent = title;

    categoryGridElement.classList.add('hidden');
    reglamentsListDiv.classList.remove('hidden');
    reglamentsListDiv.dataset.currentCategory = categoryId;

    reglamentsContainer.innerHTML = '<div class="text-center py-6 text-gray-500 dark:text-gray-400 col-span-full">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤...</div>';

    if (reglamentsListDiv._reglamentActionHandler) {
        reglamentsListDiv.removeEventListener('click', reglamentsListDiv._reglamentActionHandler);
    }
    reglamentsListDiv._reglamentActionHandler = handleReglamentAction;
    reglamentsListDiv.addEventListener('click', reglamentsListDiv._reglamentActionHandler);

    try {
        const reglaments = await getReglamentsByCategory(categoryId);
        reglamentsContainer.innerHTML = '';

        if (!reglaments || reglaments.length === 0) {
            reglamentsContainer.innerHTML = '<div class="py-6 text-gray-500 dark:text-gray-400 col-span-full text-center">–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤. <br> –í—ã –º–æ–∂–µ—Ç–µ <button class="text-primary hover:underline font-medium" data-action="add-reglament-from-empty">–¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç</button> –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.</div>';
            applyCurrentView('reglamentsContainer');
            return;
        }

        const fragment = document.createDocumentFragment();
        reglaments.forEach(reglament => {
            const reglamentElement = document.createElement('div');
            reglamentElement.className = 'reglament-item view-item group relative flex flex-col mb-2';
            reglamentElement.dataset.id = reglament.id;

            const isFav = isFavorite('reglament', String(reglament.id));
            const favButtonHTML = getFavoriteButtonHTML(reglament.id, 'reglament', 'reglaments', reglament.title, reglament.content?.substring(0, 100) + "...", isFav);

            reglamentElement.innerHTML = `
                <div class="flex flex-col justify-center h-full min-h-[3rem] sm:min-h-[3.5rem]" data-action="view"> 
                    <h4 class="font-semibold text-gray-900 dark:text-gray-100 group-hover:text-primary dark:group-hover:text-primary truncate" title="${escapeHtml(reglament.title)}">
                        ${escapeHtml(reglament.title)}
                    </h4>
                </div>
                <div class="reglament-actions absolute top-2 right-2 z-10 flex items-center space-x-0.5 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-200">
                    ${favButtonHTML}
                    <button data-action="edit" class="edit-reglament-inline p-1.5 text-gray-500 hover:text-primary dark:text-gray-400 dark:hover:text-blue-400 rounded-full hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        <i class="fas fa-edit fa-sm"></i>
                    </button>
                    <button data-action="delete" class="delete-reglament-inline p-1.5 text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-400 rounded-full hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none ml-1" title="–£–¥–∞–ª–∏—Ç—å">
                        <i class="fas fa-trash fa-sm"></i>
                    </button>
                </div>
            `;
            fragment.appendChild(reglamentElement);
        });

        reglamentsContainer.appendChild(fragment);
        applyCurrentView('reglamentsContainer');

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, error);
        reglamentsContainer.innerHTML = '<div class="text-center py-6 text-red-500 col-span-full">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã.</div>';
        showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤", "error");
    } finally {
        reglamentsListDiv.scrollTop = 0;
    }
}


function handleReglamentAction(event) {
    const target = event.target;

    if (target.closest('.toggle-favorite-btn')) {
        console.log("[handleReglamentAction] Click on favorite button detected, returning early.");
        return;
    }

    const addTrigger = target.closest('button[data-action="add-reglament-from-empty"]');
    if (addTrigger) {
        event.preventDefault();
        const reglamentsListDiv = document.getElementById('reglamentsList');
        const currentCategoryId = reglamentsListDiv?.dataset.currentCategory;
        showAddReglamentModal(currentCategoryId);
        return;
    }

    const reglamentItem = target.closest('.reglament-item[data-id]');
    if (!reglamentItem) return;

    const reglamentId = parseInt(reglamentItem.dataset.id);

    const actionButton = target.closest('button[data-action]');

    if (actionButton) {
        const action = actionButton.dataset.action;

        if (action === 'edit') {
            editReglament(reglamentId);
        } else if (action === 'delete') {
            const title = reglamentItem.querySelector('h4')?.title || `ID ${reglamentId}`;
            if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç "${title}"?`)) {
                deleteReglamentFromList(reglamentId, reglamentItem);
            }
        }
    } else {
        showReglamentDetail(reglamentId);
    }
}


async function handleExtLinkFormSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const modalElements = ensureExtLinkModal();

    if (!modalElements || !modalElements.modal || !modalElements.form || !modalElements.saveButton) {
        console.error("handleExtLinkFormSubmit: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫.");
        showNotification("–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", "error");
        return;
    }

    const { modal, idInput, titleInput, urlInput, descriptionInput, categoryInput, saveButton } = modalElements;

    if (saveButton) saveButton.disabled = true;

    const id = idInput.value;
    const title = titleInput.value.trim();
    const url = urlInput.value.trim();
    const description = descriptionInput.value.trim() || null;

    const categoryValue = categoryInput.value;
    let category = null;
    if (categoryValue && !isNaN(parseInt(categoryValue, 10))) {
        category = parseInt(categoryValue, 10);
    }

    if (!title || !url) {
        showNotification("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è '–ù–∞–∑–≤–∞–Ω–∏–µ' –∏ 'URL'", "error");
        if (saveButton) saveButton.disabled = false;
        return;
    }
    try {
        let testUrl = url;
        if (!testUrl.match(/^([a-zA-Z][a-zA-Z0-9+.-]*:)/i) && testUrl.includes('.')) {
            if (!testUrl.startsWith('//')) {
                testUrl = "https://" + testUrl;
            }
        }
        new URL(testUrl);
    } catch (_) {
        showNotification("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com)", "error");
        if (saveButton) saveButton.disabled = false;
        return;
    }

    const newData = {
        title,
        url,
        description,
        category
    };

    const isEditing = !!id;
    let oldData = null;
    let finalId = null;

    try {
        const timestamp = new Date().toISOString();
        if (isEditing) {
            newData.id = parseInt(id, 10);
            finalId = newData.id;

            try {
                oldData = await getFromIndexedDB('extLinks', newData.id);
                newData.dateAdded = oldData?.dateAdded || timestamp;
            } catch (fetchError) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ (${newData.id}):`, fetchError);
                newData.dateAdded = timestamp;
            }
            newData.dateUpdated = timestamp;
        } else {
            newData.dateAdded = timestamp;
        }

        const savedResult = await saveToIndexedDB('extLinks', newData);
        if (!isEditing) {
            finalId = savedResult;
            newData.id = finalId;
        }

        if (typeof updateSearchIndex === 'function') {
            try {
                await updateSearchIndex(
                    'extLinks',
                    finalId,
                    newData,
                    isEditing ? 'update' : 'add',
                    oldData
                );
                const oldDataStatus = oldData ? '—Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏' : '(–±–µ–∑ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö)';
                console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ (${finalId}) –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ ${oldDataStatus}.`);
            } catch (indexError) {
                console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ ${finalId}:`, indexError);
                showNotification("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞.", "warning");
            }
        } else {
            console.warn("–§—É–Ω–∫—Ü–∏—è updateSearchIndex –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
        }

        const updatedLinks = await getAllExtLinks();
        renderExtLinks(updatedLinks, extLinkCategoryInfo);
        showNotification(isEditing ? "–†–µ—Å—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω" : "–†–µ—Å—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω");
        modal.classList.add('hidden');

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:", error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", "error");
    } finally {
        if (saveButton) saveButton.disabled = false;
    }
}


async function deleteReglamentFromList(reglamentId, reglamentItemElement) {
    const numericId = parseInt(reglamentId, 10);
    if (isNaN(numericId)) {
        console.error("deleteReglamentFromList: –ü–µ—Ä–µ–¥–∞–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ID —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞:", reglamentId);
        if (typeof showNotification === 'function') {
            showNotification("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "error");
        }
        return;
    }

    let reglamentToDelete = null;

    try {
        try {
            reglamentToDelete = await getFromIndexedDB('reglaments', numericId);
        } catch (fetchError) {
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ ${numericId} –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (–¥–ª—è –∏–Ω–¥–µ–∫—Å–∞):`, fetchError);
        }

        await deleteFromIndexedDB('reglaments', numericId);
        console.log(`–†–µ–≥–ª–∞–º–µ–Ω—Ç —Å ID ${numericId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ IndexedDB.`);

        if (reglamentItemElement && reglamentItemElement.parentNode) {
            const parentContainer = reglamentItemElement.parentNode;
            reglamentItemElement.remove();
            console.log(`DOM-—ç–ª–µ–º–µ–Ω—Ç —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ ${numericId} —É–¥–∞–ª–µ–Ω.`);

            if (parentContainer.id === 'reglamentsContainer' && parentContainer.children.length === 0) {
                parentContainer.innerHTML = '<div class="py-6 text-gray-500 dark:text-gray-400 col-span-full text-center">–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤. <br> –í—ã –º–æ–∂–µ—Ç–µ <button class="text-primary hover:underline font-medium" data-action="add-reglament-from-empty">–¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç</button> –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.</div>';
                if (typeof applyCurrentView === 'function') {
                    applyCurrentView('reglamentsContainer');
                }
            }
        } else {
            console.warn(`DOM-—ç–ª–µ–º–µ–Ω—Ç —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ ${numericId} –Ω–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω. –°–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏.`);
            const reglamentsListDiv = document.getElementById('reglamentsList');
            const currentCategoryId = reglamentsListDiv?.dataset.currentCategory;
            if (currentCategoryId && typeof showReglamentsForCategory === 'function') {
                await showReglamentsForCategory(currentCategoryId);
            }
        }

        if (typeof showNotification === 'function') {
            showNotification("–†–µ–≥–ª–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", "success");
        }

        if (reglamentToDelete && typeof updateSearchIndex === 'function') {
            await updateSearchIndex('reglaments', numericId, reglamentToDelete, 'delete');
            console.log(`–ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω (—É–¥–∞–ª–µ–Ω–∏–µ) –¥–ª—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ ID ${numericId}.`);
        } else if (typeof updateSearchIndex !== 'function') {
            console.warn("–§—É–Ω–∫—Ü–∏—è updateSearchIndex –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω.");
        } else if (!reglamentToDelete) {
            console.warn(`–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ (reglamentToDelete) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è ID ${numericId}. –ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`);
        }

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ ID ${numericId}:`, error);
        if (typeof showNotification === 'function') {
            showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞: " + (error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"), "error");
        }
        const reglamentsListDiv = document.getElementById('reglamentsList');
        const currentCategoryId = reglamentsListDiv?.dataset.currentCategory;
        if (currentCategoryId && typeof showReglamentsForCategory === 'function') {
            await showReglamentsForCategory(currentCategoryId);
        }
    }
}


function getReglamentsByCategory(category) {
    return new Promise((resolve, reject) => {
        if (!db) {
            console.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è getReglamentsByCategory");
            return reject("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞");
        }
        try {
            const transaction = db.transaction('reglaments', 'readonly');
            const store = transaction.objectStore('reglaments');
            const index = store.index('category');
            const request = index.getAll(category);

            request.onsuccess = (event) => {
                resolve(event.target.result || []);
            };
            request.onerror = (event) => {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∏–Ω–¥–µ–∫—Å—É 'category':", event.target.error);
                reject(event.target.error);
            };
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É/–∏–Ω–¥–µ–∫—Å—É:", error);
            reject(error);
        }
    });
}

const getOrCreateModal = (id, baseClassName, innerHTML, setupCallback) => {
    let modal = document.getElementById(id);
    let isNew = false;

    if (!modal) {
        isNew = true;
        modal = document.createElement('div');
        modal.id = id;
        modal.className = baseClassName;
        if (!baseClassName.includes('flex')) {
            modal.classList.add('flex', 'items-center', 'justify-center');
        }
        modal.innerHTML = innerHTML;

        if (!document.body) {
            console.error(`[getOrCreateModal] document.body –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ #${id}. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM.`);
            throw new Error(`document.body –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ #${id}`);
        }
        document.body.appendChild(modal);
        console.log(`[getOrCreateModal] Created new modal #${id}.`);


        if (modal._overlayClickHandler) {
            modal.removeEventListener('click', modal._overlayClickHandler);
        }

        const overlayClickHandler = (event) => {
            const currentModal = document.getElementById(id);
            if (!currentModal || currentModal.classList.contains('hidden')) return;

            if (event.target.closest('.close-modal, .cancel-modal, .close-detail-modal')) {
                console.log(`[Click Close for ${id}] Closing modal via button.`);
                currentModal.classList.add('hidden');
                removeEscapeHandler(currentModal);
                if (getVisibleModals().length === 0) {
                    document.body.classList.remove('modal-open');
                }
            }
        };

        modal.addEventListener('click', overlayClickHandler);
        modal._overlayClickHandler = overlayClickHandler;
        modal.dataset.baseListenersAdded = 'true';
        console.log(`[getOrCreateModal] Attached NEW overlay click handler (buttons only) for #${id}.`);

    } else {
        console.log(`[getOrCreateModal] Modal #${id} already exists.`);

        if (!modal.dataset.baseListenersAdded) {
            if (modal._overlayClickHandler) {
                modal.removeEventListener('click', modal._overlayClickHandler);
            }
            const overlayClickHandler = (event) => {
                const currentModal = document.getElementById(id);
                if (!currentModal || currentModal.classList.contains('hidden')) return;
                if (event.target.closest('.close-modal, .cancel-modal, .close-detail-modal')) {
                    currentModal.classList.add('hidden');
                    removeEscapeHandler(currentModal);
                    if (getVisibleModals().length === 0) {
                        document.body.classList.remove('modal-open');
                    }
                }
            };
            modal.addEventListener('click', overlayClickHandler);
            modal._overlayClickHandler = overlayClickHandler;
            modal.dataset.baseListenersAdded = 'true';
            console.log(`[getOrCreateModal] Attached NEW overlay click handler (buttons only) for EXISTING #${id}.`);
        }
    }

    if (typeof setupCallback === 'function' && (!modal.dataset.setupComplete || isNew)) {
        const modalForSetup = document.getElementById(id);
        if (modalForSetup) {
            try {
                setupCallback(modalForSetup, isNew);
                modalForSetup.dataset.setupComplete = 'true';
                console.log(`[getOrCreateModal] Setup callback executed for #${id} (isNew=${isNew}).`);
            } catch (error) {
                console.error(`[getOrCreateModal] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è setupCallback –¥–ª—è #${id} (isNew=${isNew}):`, error);
                modalForSetup.classList.add('hidden');
                removeEscapeHandler(modalForSetup);
                if (typeof showNotification === 'function') {
                    showNotification(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ ${id}`, "error");
                }
                throw new Error(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ #${id}: ${error.message}`);
            }
        } else {
            console.error(`[getOrCreateModal] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ #${id} –≤ DOM –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º setupCallback.`);
            throw new Error(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ #${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è setupCallback.`);
        }
    }
    return document.getElementById(id);
};

const addEscapeHandler = (modalElement) => {
    if (!modalElement) return;
    console.log(`[addEscapeHandler STUB] –í—ã–∑–≤–∞–Ω–∞ –¥–ª—è #${modalElement.id}, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç (–æ–±—Ä–∞–±–æ—Ç–∫–∞ Escape —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞).`);
};


function requestCloseModal(modalElement) {
    if (!modalElement) return false;

    const modalId = modalElement.id;
    let modalType = null;
    let needsCleanupForScreenshots = false;

    if (modalId === 'editModal') {
        modalType = 'edit';
        needsCleanupForScreenshots = true;
    } else if (modalId === 'addModal') {
        modalType = 'add';
        needsCleanupForScreenshots = true;
    } else if (modalId === 'customizeUIModal') {
        modalType = 'customizeUI';
    } else if (modalId === 'reglamentModal') {
        modalType = 'reglament';
    } else if (modalId === 'bookmarkModal') {
        modalType = 'bookmark';
    }
    else {
        console.warn("requestCloseModal: –í—ã–∑–≤–∞–Ω–æ –¥–ª—è –æ–∫–Ω–∞ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:", modalId);
        modalElement.classList.add('hidden');
        if (typeof removeEscapeHandler === 'function') {
            removeEscapeHandler(modalElement);
        }
        if (getVisibleModals().length === 0) {
            document.body.classList.remove('modal-open');
            document.body.classList.remove('overflow-hidden');
        }
        return true;
    }

    let changesDetected = false;

    if (modalType === 'edit' || modalType === 'add') {
        changesDetected = hasChanges(modalType);
    } else if (modalType === 'customizeUI') {
        changesDetected = isUISettingsDirty;
    }

    let performClose = true;

    if (changesDetected) {
        if (!confirm("–í—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?")) {
            console.log(`–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ ${modalId} –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`);
            performClose = false;
        } else {
            console.log(`–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ ${modalId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏).`);
            if (modalType === 'customizeUI') {
                if (typeof applyPreviewSettings === 'function' && typeof window.originalUISettings !== 'undefined') {
                    applyPreviewSettings(originalUISettings);
                    window.isUISettingsDirty = false;
                    console.log("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ UI –æ—Ç–∫–∞—á–µ–Ω –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º.");
                }
                const inputField = document.getElementById('employeeExtensionInput');
                if (inputField && !inputField.classList.contains('hidden')) {
                    const displaySpan = document.getElementById('employeeExtensionDisplay');
                    inputField.classList.add('hidden');
                    if (displaySpan) displaySpan.classList.remove('hidden');
                    if (typeof loadEmployeeExtension === 'function') loadEmployeeExtension();
                }
            }
        }
    } else {
        console.log(`–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ ${modalId} (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π).`);
    }

    if (performClose) {
        if (needsCleanupForScreenshots) {
            const stepsContainerSelector = modalType === 'edit' ? '#editSteps' : '#newSteps';
            const stepsContainer = modalElement.querySelector(stepsContainerSelector);
            if (stepsContainer) {
                const stepDivs = stepsContainer.querySelectorAll('.edit-step');
                stepDivs.forEach(stepDiv => {
                    const thumbsContainer = stepDiv.querySelector('#screenshotThumbnailsContainer');
                    if (thumbsContainer && typeof clearTemporaryThumbnailsFromContainer === 'function') {
                        clearTemporaryThumbnailsFromContainer(thumbsContainer);
                    } else if (thumbsContainer) {
                        const tempThumbs = thumbsContainer.querySelectorAll('.screenshot-thumbnail.temporary img[data-object-url]');
                        tempThumbs.forEach(img => {
                            if (img.dataset.objectUrl && img.dataset.objectUrlRevoked !== 'true') {
                                try { URL.revokeObjectURL(img.dataset.objectUrl); } catch (e) { }
                            }
                        });
                        thumbsContainer.innerHTML = '';
                        console.warn("clearTemporaryThumbnailsFromContainer –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –æ—á–∏—â–µ–Ω—ã –≤—Ä—É—á–Ω—É—é –≤ requestCloseModal.");
                    }
                    delete stepDiv._tempScreenshotBlobs;
                    delete stepDiv.dataset.screenshotsToDelete;
                    delete stepDiv.dataset.existingScreenshotIds;
                });
                if (stepsContainer.children.length === 0 && modalType === 'add') {
                    stepsContainer.innerHTML = '<p class="text-gray-500 dark:text-gray-400 text-center">–î–æ–±–∞–≤—å—Ç–µ —à–∞–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.</p>';
                }
            }
        }

        modalElement.classList.add('hidden');
        if (typeof removeEscapeHandler === 'function') {
            removeEscapeHandler(modalElement);
        }

        if (getVisibleModals().length === 0) {
            document.body.classList.remove('modal-open');
            document.body.classList.remove('overflow-hidden');
        }

        if (modalType === 'edit') {
            initialEditState = null;
        } else if (modalType === 'add') {
            initialAddState = null;
        } else if (modalType === 'customizeUI') {
            window.isUISettingsDirty = false;
        }
    }
    return performClose;
}


const removeEscapeHandler = (modalElement) => {
    if (modalElement?._escapeHandler) {
        document.removeEventListener('keydown', modalElement._escapeHandler);
        delete modalElement._escapeHandler;
        console.log(`[removeEscapeHandler] Removed Escape handler for #${modalElement.id}`);
    }
};

async function showAddReglamentModal(currentCategoryId = null) {
    const modalId = 'reglamentModal';
    const modalClassName = 'fixed inset-0 bg-black bg-opacity-50 hidden z-50 p-4 flex items-center justify-center';
    const modalHTML = `
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-[95%] max-w-5xl h-[90vh] flex flex-col overflow-hidden p-2 modal-inner-container">
                    <div class="flex-shrink-0 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                        <div class="flex justify-between items-center">
                            <h2 class="text-xl font-bold" id="reglamentModalTitle">–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç</h2>
                            <div>
                                <button id="toggleFullscreenReglamentBtn" type="button" class="inline-block p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors align-middle" title="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω">
                                    <i class="fas fa-expand"></i>
                                </button>
                                <button class="close-modal inline-block p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors align-middle" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
                                    <i class="fas fa-times text-xl"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="flex-1 overflow-y-auto p-6 modal-content-area">
                        <form id="reglamentForm" class="h-full flex flex-col">
                            <input type="hidden" id="reglamentId" name="reglamentId">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label class="block text-sm font-medium mb-1" for="reglamentTitle">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                                    <input type="text" id="reglamentTitle" name="reglamentTitle" required class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium mb-1" for="reglamentCategory">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                                    <select id="reglamentCategory" name="reglamentCategory" required class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base">
                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                    </select>
                                </div>
                            </div>
                            <div class="mb-4 flex-1 flex flex-col">
                                <label class="block text-sm font-medium mb-1" for="reglamentContent">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</label>
                                <textarea id="reglamentContent" name="reglamentContent" required class="w-full flex-1 px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base resize-none"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="flex-shrink-0 px-6 py-4 bg-gray-50 dark:bg-gray-700 border-t border-gray-200 dark:border-gray-600">
                        <div class="flex justify-end">
                            <button type="button" class="cancel-modal px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-200 rounded-md transition mr-2">
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button type="submit" form="reglamentForm" id="saveReglamentBtn" class="px-4 py-2 bg-primary hover:bg-secondary text-white rounded-md transition">
                                <i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            `;

    const setupModalSpecifics = (modalElement, isNew) => {
        const form = modalElement.querySelector('#reglamentForm');
        const titleInput = form.elements.reglamentTitle;
        const categorySelect = form.elements.reglamentCategory;
        const contentTextarea = form.elements.reglamentContent;
        const idInput = form.elements.reglamentId;
        const saveButton = modalElement.querySelector('#saveReglamentBtn');
        const modalTitleEl = modalElement.querySelector('#reglamentModalTitle');

        if (!form.dataset.submitHandlerAttached) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                if (saveButton) {
                    saveButton.disabled = true;
                    saveButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
                }

                const title = titleInput.value.trim();
                const category = categorySelect.value;
                const content = contentTextarea.value.trim();
                const reglamentId = idInput.value;

                if (!title || !category || !content) {
                    if (typeof showNotification === 'function') { showNotification("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ù–∞–∑–≤–∞–Ω–∏–µ, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ)", "error"); }
                    else { alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è."); }
                    if (saveButton) {
                        saveButton.disabled = false;
                        saveButton.innerHTML = `<i class="fas fa-save mr-1"></i> ${reglamentId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}`;
                    }
                    return;
                }

                const newData = { title, category, content };
                const isEditing = !!reglamentId;
                let oldData = null;
                let finalId = null;
                const timestamp = new Date().toISOString();

                try {
                    if (isEditing) {
                        newData.id = parseInt(reglamentId, 10);
                        finalId = newData.id;
                        try { oldData = await getFromIndexedDB('reglaments', newData.id); newData.dateAdded = oldData?.dateAdded || timestamp; }
                        catch (fetchError) { console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ (${newData.id}):`, fetchError); newData.dateAdded = timestamp; }
                        newData.dateUpdated = timestamp;
                    } else { newData.dateAdded = timestamp; }

                    const savedResult = await saveToIndexedDB('reglaments', newData);
                    if (!isEditing) { finalId = savedResult; newData.id = finalId; }

                    console.log(`–†–µ–≥–ª–∞–º–µ–Ω—Ç ${finalId} ${isEditing ? '–æ–±–Ω–æ–≤–ª–µ–Ω' : '–¥–æ–±–∞–≤–ª–µ–Ω'} —É—Å–ø–µ—à–Ω–æ.`);

                    if (typeof updateSearchIndex === 'function') {
                        updateSearchIndex('reglaments', finalId, newData, isEditing ? 'update' : 'add', oldData)
                            .then(() => console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ (${finalId}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.`))
                            .catch(indexError => { console.error(`–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ ${finalId}:`, indexError); if (typeof showNotification === 'function') { showNotification("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞.", "warning"); } });
                    } else { console.warn("–§—É–Ω–∫—Ü–∏—è updateSearchIndex –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); }

                    if (typeof showNotification === 'function') { showNotification(isEditing ? "–†–µ–≥–ª–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω" : "–†–µ–≥–ª–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", "success"); }

                    const reglamentsListDiv = document.getElementById('reglamentsList');
                    if (reglamentsListDiv && !reglamentsListDiv.classList.contains('hidden')) {
                        const displayedCategoryId = reglamentsListDiv.dataset.currentCategory;
                        if (displayedCategoryId === category && typeof showReglamentsForCategory === 'function') {
                            console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}.`);
                            await showReglamentsForCategory(category);
                        }
                    }

                    modalElement.classList.add('hidden');
                    if (typeof removeEscapeHandler === 'function') { removeEscapeHandler(modalElement); }
                    form.reset();
                    idInput.value = '';
                    if (modalTitleEl) modalTitleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç';
                    if (saveButton) saveButton.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
                    if (getVisibleModals().length === 0) {
                        document.body.classList.remove('modal-open');
                    }

                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ ${isEditing ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' : '–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏'} —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞:`, error);
                    if (typeof showNotification === 'function') { showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞: ${error.message || error}`, "error"); }
                } finally { if (saveButton) { saveButton.disabled = false; } }
            });
            form.dataset.submitHandlerAttached = 'true';
            console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ submit –¥–ª—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –ø—Ä–∏–≤—è–∑–∞–Ω.');
        }

        const fullscreenBtn = modalElement.querySelector('#toggleFullscreenReglamentBtn');
        if (fullscreenBtn && !fullscreenBtn.dataset.fullscreenListenerAttached) {
            fullscreenBtn.addEventListener('click', () => {
                if (typeof toggleModalFullscreen === 'function') {
                    toggleModalFullscreen(
                        reglamentModalConfigGlobal.modalId,
                        reglamentModalConfigGlobal.buttonId,
                        reglamentModalConfigGlobal.classToggleConfig,
                        reglamentModalConfigGlobal.innerContainerSelector,
                        reglamentModalConfigGlobal.contentAreaSelector
                    );
                } else {
                    console.error('–§—É–Ω–∫—Ü–∏—è toggleModalFullscreen –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
                    if (typeof showNotification === 'function') {
                        showNotification("–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
                    }
                }
            });
            fullscreenBtn.dataset.fullscreenListenerAttached = 'true';
            console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ fullscreen –¥–ª—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –ø—Ä–∏–≤—è–∑–∞–Ω.');
        } else if (!fullscreenBtn && isNew) {
            console.error('–ö–Ω–æ–ø–∫–∞ #toggleFullscreenReglamentBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–æ–≤–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞.');
        }
    };

    try {
        const modal = getOrCreateModal(modalId, modalClassName, modalHTML, setupModalSpecifics);
        const categorySelect = modal.querySelector('#reglamentCategory');
        const titleInput = modal.querySelector('#reglamentTitle');
        const form = modal.querySelector('#reglamentForm');
        const idInput = modal.querySelector('#reglamentId');
        const saveBtn = modal.querySelector('#saveReglamentBtn');
        const modalTitleEl = modal.querySelector('#reglamentModalTitle');

        if (!categorySelect || !titleInput || !form || !idInput || !saveBtn || !modalTitleEl) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ getOrCreateModal.");
            if (typeof showNotification === 'function') { showNotification("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞.", "error"); }
            return;
        }

        form.reset();
        idInput.value = '';
        modalTitleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç';
        saveBtn.disabled = false;
        saveBtn.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        saveBtn.setAttribute('form', 'reglamentForm');

        if (categorySelect) {
            while (categorySelect.options.length > 1) {
                categorySelect.remove(1);
            }
            if (typeof populateReglamentCategoryDropdowns === 'function') {
                try {
                    await populateReglamentCategoryDropdowns([categorySelect]);
                    console.log("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ showAddReglamentModal.");

                    if (currentCategoryId) {
                        const optionExists = categorySelect.querySelector(`option[value="${currentCategoryId}"]`);
                        if (optionExists) {
                            categorySelect.value = currentCategoryId;
                            console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${currentCategoryId}`);
                        } else {
                            console.warn(`–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${currentCategoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.`);
                            categorySelect.value = '';
                        }
                    } else {
                        categorySelect.value = '';
                    }
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞:", error);
                    if (typeof showNotification === 'function') { showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", "error"); }
                }
            } else {
                console.error("–§—É–Ω–∫—Ü–∏—è populateReglamentCategoryDropdowns –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }
        }

        modal.classList.remove('hidden');
        document.body.classList.add('modal-open');

        if (typeof addEscapeHandler === 'function') {
            addEscapeHandler(modal);
        } else {
            console.warn('–§—É–Ω–∫—Ü–∏—è addEscapeHandler –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }

        if (titleInput) {
            titleInput.focus();
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞:", error);
        if (typeof showNotification === 'function') { showNotification(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞: ${error.message || error}`, "error"); }
    }
}


async function editReglament(id) {
    try {
        const reglament = await getFromIndexedDB('reglaments', id);
        if (!reglament) {
            if (typeof showNotification === 'function') { showNotification("–†–µ–≥–ª–∞–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "error"); }
            else { console.error("–†–µ–≥–ª–∞–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏ —Ñ—É–Ω–∫—Ü–∏—è showNotification –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); }
            return;
        }

        await showAddReglamentModal(reglament.category);

        const modal = document.getElementById('reglamentModal');
        if (!modal) {
            console.error("–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ showAddReglamentModal –≤ editReglament.");
            return;
        }

        const form = modal.querySelector('#reglamentForm');
        const titleInput = modal.querySelector('#reglamentTitle');
        const categorySelect = modal.querySelector('#reglamentCategory');
        const contentTextarea = modal.querySelector('#reglamentContent');
        const idInput = modal.querySelector('#reglamentId');
        const saveButton = modal.querySelector('#saveReglamentBtn');
        const modalTitle = modal.querySelector('#reglamentModalTitle');

        if (!form || !titleInput || !categorySelect || !contentTextarea || !idInput || !saveButton || !modalTitle) {
            console.error("–ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞.");
            if (typeof showNotification === 'function') { showNotification("–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", "error"); }
            modal.classList.add('hidden');
            if (typeof removeEscapeHandler === 'function') { removeEscapeHandler(modal); }
            return;
        }

        modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç';
        saveButton.innerHTML = '<i class="fas fa-save mr-1"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        saveButton.disabled = false;

        idInput.value = reglament.id;
        titleInput.value = reglament.title || '';
        contentTextarea.value = reglament.content || '';

        if (categorySelect.querySelector(`option[value="${reglament.category}"]`)) {
            categorySelect.value = reglament.category;
        } else {
            console.warn(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è ID ${reglament.category} –¥–ª—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.`);
            categorySelect.value = '';
        }
        titleInput.focus();

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
        if (typeof showNotification === 'function') { showNotification(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message || error}`, "error"); }
    }
}


async function loadExtLinks() {
    const LOG_PREFIX = "[loadExtLinks V.Fix with data correction]";
    console.log(`${LOG_PREFIX} –ó–∞–ø—É—Å–∫...`);
    try {
        const migrationStatus = await getFromIndexedDB('preferences', EXT_LINKS_MIGRATION_KEY);
        if (db && (!migrationStatus || !migrationStatus.done)) {
            console.log(`${LOG_PREFIX} –ó–ê–ü–£–°–ö –ú–ò–ì–†–ê–¶–ò–ò: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.`);

            const defaultCategoriesRaw = {
                docs: { name: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', color: 'blue', icon: 'fa-file-alt' },
                gov: { name: '–ì–æ—Å. —Å–∞–π—Ç—ã', color: 'red', icon: 'fa-landmark' },
                tools: { name: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', color: 'green', icon: 'fa-tools' },
                other: { name: '–ü—Ä–æ—á–µ–µ', color: 'yellow', icon: 'fa-link' }
            };

            const existingCategories = await getAllFromIndexedDB('extLinkCategories');
            const existingCategoryNames = new Set(existingCategories.map(cat => cat.name));
            console.log(`${LOG_PREFIX} –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`, existingCategoryNames);

            const oldToNewIdMap = {};
            existingCategories.forEach(cat => {
                for (const [legacyKey, legacyData] of Object.entries(defaultCategoriesRaw)) {
                    if (legacyData.name === cat.name) {
                        oldToNewIdMap[legacyKey] = cat.id;
                    }
                }
            });

            for (const [key, catData] of Object.entries(defaultCategoriesRaw)) {
                if (!existingCategoryNames.has(catData.name)) {
                    console.log(`${LOG_PREFIX} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "${catData.name}"`);
                    const newId = await saveToIndexedDB('extLinkCategories', catData);
                    oldToNewIdMap[key] = newId;
                } else {
                    console.log(`${LOG_PREFIX} –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${catData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.`);
                }
            }

            const allLinksForMigration = await getAllExtLinks();
            if (allLinksForMigration.length > 0) {
                const updatePromises = allLinksForMigration.map(link => {
                    if (link.category && typeof link.category === 'string' && oldToNewIdMap[link.category]) {
                        console.log(`${LOG_PREFIX} –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ "${link.title}" —Å–æ —Å—Ç–∞—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${link.category}" –Ω–∞ –Ω–æ–≤—ã–π ID ${oldToNewIdMap[link.category]}`);
                        link.category = oldToNewIdMap[link.category];
                        return saveToIndexedDB('extLinks', link);
                    }
                    return Promise.resolve();
                });
                await Promise.all(updatePromises);
            }

            await saveToIndexedDB('preferences', { id: EXT_LINKS_MIGRATION_KEY, done: true });
            console.log(`${LOG_PREFIX} –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê. –§–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
        }

        const allLinks = await getAllExtLinks();
        const linksToFix = allLinks.filter(link => typeof link.category === 'string' && !isNaN(parseInt(link.category, 10)));
        if (linksToFix.length > 0) {
            console.warn(`${LOG_PREFIX} –ù–∞–π–¥–µ–Ω–æ ${linksToFix.length} —Å—Å—ã–ª–æ–∫ —Å ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏. –ó–∞–ø—É—Å–∫–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.`);
            const fixPromises = linksToFix.map(link => {
                const numericId = parseInt(link.category, 10);
                console.log(`   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ "${link.title}": –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${link.category}" -> ${numericId}`);
                link.category = numericId;
                return saveToIndexedDB('extLinks', link);
            });
            await Promise.all(fixPromises);
            showNotification("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", "info");
        }

    } catch (migrationError) {
        console.error(`${LOG_PREFIX} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:`, migrationError);
        if (typeof showNotification === 'function') {
            showNotification(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${migrationError.message}`, "error");
        }
    }

    try {
        const categories = await getAllFromIndexedDB('extLinkCategories');
        extLinkCategoryInfo = categories.reduce((acc, cat) => {
            if (cat && cat.id !== undefined) {
                acc[cat.id] = cat;
            }
            return acc;
        }, {});
        console.log(`${LOG_PREFIX} –ö—ç—à 'extLinkCategoryInfo' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`);

        await populateExtLinkCategoryFilter();
        console.log(`${LOG_PREFIX} –§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.`);
    } catch (error) {
        console.error(`${LOG_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:`, error);
        extLinkCategoryInfo = {};
        if (typeof showNotification === 'function') {
            showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.", "error");
        }
    }
}


async function populateExtLinkCategoryFilter() {
    const filterSelect = document.getElementById('extLinkCategoryFilter');
    if (!filterSelect) {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω select –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ (#extLinkCategoryFilter)");
        return;
    }

    const currentValue = filterSelect.value;
    filterSelect.innerHTML = '<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';

    try {
        const categories = await getAllFromIndexedDB('extLinkCategories');
        if (categories && categories.length > 0) {
            const fragment = document.createDocumentFragment();
            const sortedCategories = categories.sort((a, b) => a.name.localeCompare(b.name));

            sortedCategories.forEach(cat => {
                const option = document.createElement('option');
                option.value = cat.id;
                option.textContent = cat.name;
                fragment.appendChild(option);
            });
            filterSelect.appendChild(fragment);
        }

        if (currentValue && filterSelect.querySelector(`option[value="${currentValue}"]`)) {
            filterSelect.value = currentValue;
        } else {
            filterSelect.value = "";
        }
        console.log("–§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –ë–î.");

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:", error);
    }
}


async function handleExtLinkContainerClick(event) {
    const target = event.target;

    if (target.closest('.toggle-favorite-btn')) {
        console.log("[handleExtLinkContainerClick] Click on favorite button detected, returning early.");
        return;
    }

    const clickedCard = target.closest('.ext-link-item');
    if (!clickedCard) {
        return;
    }

    const isActionClick = target.closest('button.edit-ext-link, button.delete-ext-link, a.ext-link-url');
    if (isActionClick) {
        console.log("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –∏–∫–æ–Ω–∫–µ —Å—Å—ã–ª–∫–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞, –∞ –Ω–µ –ø–æ —Å–∞–º–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ.");
        return;
    }

    const linkElement = clickedCard.querySelector('a.ext-link-url');
    const url = linkElement?.href;

    if (url) {
        try {
            new URL(url);
            console.log(`–û—Ç–∫—Ä—ã—Ç–∏–µ URL –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞: ${url}`);
            window.open(url, '_blank', 'noopener,noreferrer');
        } catch (e) {
            console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —É –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ ${clickedCard.dataset.id}: ${url}`, e);
            if (typeof showNotification === 'function') {
                showNotification("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —É —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", "error");
            }
        }
    } else {
        console.warn(`URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ ${clickedCard.dataset.id}`);
        if (typeof showNotification === 'function') {
            showNotification("URL –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", "warning");
        }
    }
}


async function handleExtLinkAction(event) {
    const target = event.target;
    const linkItem = target.closest('.ext-link-item[data-id]');
    if (!linkItem) return;

    const linkId = parseInt(linkItem.dataset.id, 10);
    if (isNaN(linkId)) {
        console.error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:", linkItem.dataset.id);
        return;
    }

    const actionButton = target.closest('button[data-action]');
    const action = actionButton ? actionButton.dataset.action : (target.closest('[data-action="open-link"]') ? 'open-link' : null);

    if (!action) return;

    event.stopPropagation();

    switch (action) {
        case 'open-link':
            const urlToOpen = linkItem.dataset.url;
            if (urlToOpen) {
                window.open(urlToOpen, '_blank', 'noopener,noreferrer');
            } else {
                showNotification("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π URL.", "warning");
            }
            break;
        case 'edit':
            showAddEditExtLinkModal(linkId);
            break;
        case 'delete':
            const title = linkItem.querySelector('h3')?.title || `—Ä–µ—Å—É—Ä—Å ID ${linkId}`;
            if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å "${title}"?`)) {
                deleteExtLink(linkId);
            }
            break;
    }
}


function filterExtLinks() {
    const container = document.getElementById('extLinksContainer');
    const searchInput = document.getElementById('extLinkSearchInput');
    const categoryFilter = document.getElementById('extLinkCategoryFilter');

    if (!container || !searchInput || !categoryFilter) {
        console.error("filterExtLinks: –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –ø–æ–∏—Å–∫ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä) –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    const items = container.querySelectorAll('.ext-link-item');
    const searchValue = searchInput.value.trim().toLowerCase();
    const categoryValue = categoryFilter.value;

    items.forEach(item => {
        const title = item.querySelector('h3')?.textContent?.toLowerCase() || '';
        const description = item.querySelector('p.ext-link-description')?.textContent?.toLowerCase() || '';
        const itemCategory = item.dataset.category || '';

        const matchesSearch = !searchValue || title.includes(searchValue) || description.includes(searchValue);
        const matchesCategory = !categoryValue || itemCategory === categoryValue;

        if (matchesSearch && matchesCategory) {
            item.classList.remove('hidden');
        } else {
            item.classList.add('hidden');
        }
    });
}


function ensureExtLinkModal() {
    const modalId = 'extLinkModal';
    let modal = document.getElementById(modalId);

    if (!modal) {
        console.log(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ #${modalId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ.`);
        modal = document.createElement('div');
        modal.id = modalId;
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 hidden z-50 p-4 flex items-center justify-center';
        modal.innerHTML = `
                                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">
                                    <div class="p-6">
                                    <div class="flex justify-between items-center mb-4">
                                    <h2 class="text-xl font-bold" id="extLinkModalTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞</h2>
                                    <button class="close-modal text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" title="–ó–∞–∫—Ä—ã—Ç—å">
                                    <i class="fas fa-times text-xl"></i>
                                    </button>
                                    </div>
                                    <form id="extLinkForm" novalidate>
                                    <input type="hidden" id="extLinkId">
                                    <div class="mb-4">
                                    <label class="block text-sm font-medium mb-1" for="extLinkTitle">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                                    <input type="text" id="extLinkTitle" name="extLinkTitle" required class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base">
                                    </div>
                                    <div class="mb-4">
                                    <label class="block text-sm font-medium mb-1" for="extLinkUrl">URL</label>
                                    <input type="url" id="extLinkUrl" name="extLinkUrl" required placeholder="https://example.com" class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base">
                                    </div>
                                    <div class="mb-4">
                                    <label class="block text-sm font-medium mb-1" for="extLinkDescription">–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                                    <textarea id="extLinkDescription" name="extLinkDescription" rows="3" class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base"></textarea>
                                    </div>
                                    <div class="mb-4">
                                    <label class="block text-sm font-medium mb-1" for="extLinkCategory">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                                    <select id="extLinkCategory" name="extLinkCategory" class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary text-base">
                                    <option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                                    </select>
                                    </div>
                                    <div class="flex justify-end mt-6">
                                    <button type="button" class="cancel-modal px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 rounded-md transition mr-2">–û—Ç–º–µ–Ω–∞</button>
                                    <button type="submit" id="saveExtLinkBtn" class="px-4 py-2 bg-primary hover:bg-secondary text-white rounded-md transition">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                                    </div>
                                    </form>
                                    </div>
                                    </div>`;
        document.body.appendChild(modal);
        const closeModal = () => {
            modal.classList.add('hidden');
            if (typeof removeEscapeHandler === 'function') {
                removeEscapeHandler(modal);
            }
            if (getVisibleModals().length === 0) {
                document.body.classList.remove('modal-open');
            }
        };
        modal.querySelectorAll('.close-modal, .cancel-modal').forEach(btn => btn.addEventListener('click', closeModal));

        const form = modal.querySelector('#extLinkForm');
        if (form) {
            if (typeof handleExtLinkFormSubmit === 'function') {
                if (!form.dataset.listenerAttached) {
                    form.addEventListener('submit', handleExtLinkFormSubmit);
                    form.dataset.listenerAttached = 'true';
                    console.log("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ handleExtLinkFormSubmit –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Ñ–æ—Ä–º–µ #extLinkForm.");
                }
            } else {
                console.error("–û—à–∏–±–∫–∞: –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleExtLinkFormSubmit –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞!");
            }
        } else {
            console.error("–§–æ—Ä–º–∞ #extLinkForm –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞!");
        }
    }

    const elements = {
        modal: modal,
        form: modal.querySelector('#extLinkForm'),
        titleEl: modal.querySelector('#extLinkModalTitle'),
        idInput: modal.querySelector('#extLinkId'),
        titleInput: modal.querySelector('#extLinkTitle'),
        urlInput: modal.querySelector('#extLinkUrl'),
        descriptionInput: modal.querySelector('#extLinkDescription'),
        categoryInput: modal.querySelector('#extLinkCategory'),
        saveButton: modal.querySelector('#saveExtLinkBtn')
    };

    for (const key in elements) {
        if (!elements[key]) {
            console.warn(`[ensureExtLinkModal] –≠–ª–µ–º–µ–Ω—Ç '${key}' –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ #${modalId}!`);
        }
    }

    if (elements.modal && typeof addEscapeHandler === 'function') {
        addEscapeHandler(elements.modal);
    } else if (elements.modal) {
        console.warn("[ensureExtLinkModal] addEscapeHandler function not found.");
    }

    const categorySelect = elements.categoryInput;
    if (categorySelect && !categorySelect.dataset.populated) {
        while (categorySelect.options.length > 1) {
            categorySelect.remove(1);
        }
        const fragment = document.createDocumentFragment();
        Object.entries(extLinkCategoryInfo).forEach(([key, info]) => {
            const option = document.createElement('option');
            option.value = key;
            option.textContent = info.name;
            fragment.appendChild(option);
        });
        categorySelect.appendChild(fragment);
        categorySelect.dataset.populated = 'true';
        console.log("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
    }

    return elements;
}


function showAddExtLinkModal() {
    const { modal, form, titleEl, idInput } = ensureExtLinkModal();
    if (!form) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º—É –∏–∑ ensureExtLinkModal");
        return;
    }
    form.reset();
    idInput.value = '';
    titleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å';
    modal.classList.remove('hidden');
    form.elements.extLinkTitle?.focus();
}


async function showEditExtLinkModal(id) {
    const { modal, form, titleEl, idInput, titleInput, urlInput, descriptionInput, categoryInput } = ensureExtLinkModal();

    if (!form) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º—É –∏–∑ ensureExtLinkModal –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
        if (typeof showNotification === 'function') {
            showNotification("–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", "error");
        }
        return;
    }

    try {
        const link = await getFromIndexedDB('extLinks', id);
        if (!link) {
            if (typeof showNotification === 'function') {
                showNotification("–í–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", "error");
            }
            console.warn(`–í–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`);
            return;
        }

        form.reset();
        idInput.value = link.id;
        titleInput.value = link.title || '';
        urlInput.value = link.url || '';
        descriptionInput.value = link.description || '';
        categoryInput.value = link.category || '';
        titleEl.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å';

        modal.classList.remove('hidden');
        titleInput.focus();

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
        if (typeof showNotification === 'function') {
            showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "error");
        }
        if (modal) {
            modal.classList.add('hidden');
        }
    }
}


async function deleteExtLink(id) {
    const numericId = parseInt(id);
    if (isNaN(numericId)) {
        console.error("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º ID:", id);
        showNotification("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "error");
        return;
    }

    try {
        const linkToDelete = await getFromIndexedDB('extLinks', numericId);
        if (!linkToDelete) {
            console.warn(`–í–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å —Å ID ${numericId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–Ω–¥–µ–∫—Å–∞.`);
        }

        if (linkToDelete && typeof updateSearchIndex === 'function') {
            try {
                await updateSearchIndex('extLinks', numericId, linkToDelete, 'delete');
                console.log(`Search index updated (delete) for external link ID: ${numericId}`);
            } catch (indexError) {
                console.error(`Error updating search index for external link deletion ${numericId}:`, indexError);
            }
        } else if (!linkToDelete) {
        } else {
            console.warn("updateSearchIndex function is not available for external link deletion.");
        }

        await deleteFromIndexedDB('extLinks', numericId);
        const links = await getAllExtLinks();
        renderExtLinks(links, extLinkCategoryInfo);
        showNotification("–í–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å —É–¥–∞–ª–µ–Ω");

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:", error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", "error");
    }
}


function initUICustomization() {
    injectCustomizationStyles();

    const getElem = (id) => document.getElementById(id);

    const customizeUIBtn = getElem('customizeUIBtn');
    const customizeUIModal = getElem('customizeUIModal');
    if (!customizeUIBtn || !customizeUIModal) {
        console.warn("initUICustomization: –ö–Ω–æ–ø–∫–∞ –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.");
        return;
    }
    const closeCustomizeUIModalBtn = getElem('closeCustomizeUIModalBtn');
    const saveUISettingsBtn = getElem('saveUISettingsBtn');
    const cancelUISettingsBtn = getElem('cancelUISettingsBtn');
    const resetUiBtn = getElem('resetUiBtn');

    const colorTargetSelector = getElem('colorTargetSelector');

    const colorPickerState = { h: 0, s: 80, b: 88 };
    const colorPreview = getElem('color-preview-swatch');
    const saturationSliderGradient = getElem('saturation-slider-gradient');
    const brightnessSliderGradient = getElem('brightness-slider-gradient');
    const hueSlider = getElem('hue-slider');
    const hueHandle = getElem('hue-handle');
    const saturationSlider = getElem('saturation-slider');
    const saturationHandle = getElem('saturation-handle');
    const brightnessSlider = getElem('brightness-slider');
    const brightnessHandle = getElem('brightness-handle');
    const hueValueInput = getElem('hue-value');
    const saturationValueInput = getElem('saturation-value');
    const brightnessValueInput = getElem('brightness-value');

    const decreaseFontBtn = getElem('decreaseFontBtn');
    const increaseFontBtn = getElem('increaseFontBtn');
    const resetFontBtn = getElem('resetFontBtn');
    const fontSizeLabel = getElem('fontSizeLabel');
    const borderRadiusSlider = getElem('borderRadiusSlider');
    const densitySlider = getElem('densitySlider');

    const genericChangeHandler = async (updateFn) => {
        if (typeof currentPreviewSettings !== 'object' || currentPreviewSettings === null) {
            currentPreviewSettings = JSON.parse(JSON.stringify(originalUISettings || DEFAULT_UI_SETTINGS));
        }
        updateFn();
        if (typeof applyPreviewSettings === 'function') {
            await applyPreviewSettings(currentPreviewSettings);
        }
        isUISettingsDirty = !deepEqual(originalUISettings, getSettingsFromModal());
    };

    const setColorPickerStateFromHex = (hex) => {
        const rgb = hexToRgb(hex);
        if (rgb) {
            const hsb = rgbToHsb(rgb.r, rgb.g, rgb.b);
            Object.assign(colorPickerState, hsb);
            _updatePickerVisualsWithoutTriggeringChange();
        }
    };

    const _updatePickerVisualsWithoutTriggeringChange = () => {
        if (!saturationSliderGradient || !brightnessSliderGradient || !hueHandle || !saturationHandle || !brightnessHandle || !colorPreview || !hueValueInput || !saturationValueInput || !brightnessValueInput) {
            return;
        }
        const { h, s, b } = colorPickerState;

        const pureHueRgb = hsbToRgb(h, 100, 100);
        const pureHueHex = rgbToHex(pureHueRgb.r, pureHueRgb.g, pureHueRgb.b);
        saturationSliderGradient.style.background = `linear-gradient(to right, rgb(128,128,128), ${pureHueHex})`;
        brightnessSliderGradient.style.background = `linear-gradient(to right, #000, ${pureHueHex})`;

        const huePercentFraction = h / 360;
        hueHandle.style.left = `calc(${huePercentFraction * 99}% - ${huePercentFraction}rem)`;

        const saturationPercentFraction = s / 100;
        saturationHandle.style.left = `calc(${saturationPercentFraction * 99}% - ${saturationPercentFraction}rem)`;

        const brightnessPercentFraction = b / 100;
        brightnessHandle.style.left = `calc(${brightnessPercentFraction * 99}% - ${brightnessPercentFraction}rem)`;

        const currentRgb = hsbToRgb(h, s, b);
        const currentHex = rgbToHex(currentRgb.r, currentRgb.g, currentRgb.b);
        colorPreview.style.backgroundColor = currentHex;

        hueValueInput.value = `${Math.round(h)}¬∞`;
        saturationValueInput.value = `${Math.round(s)}%`;
        brightnessValueInput.value = `${Math.round(b)}%`;
    };

    const updatePickerUI = () => {
        _updatePickerVisualsWithoutTriggeringChange();
        const currentRgb = hsbToRgb(colorPickerState.h, colorPickerState.s, colorPickerState.b);
        const currentHex = rgbToHex(currentRgb.r, currentRgb.g, currentRgb.b);

        genericChangeHandler(() => {
            if (!currentPreviewSettings) return;
            if (uiModalState.currentColorTarget === 'elements') {
                currentPreviewSettings.primaryColor = currentHex;
            } else if (uiModalState.currentColorTarget === 'background') {
                currentPreviewSettings.backgroundColor = currentHex;
                currentPreviewSettings.isBackgroundCustom = true;
            } else if (uiModalState.currentColorTarget === 'text') {
                currentPreviewSettings.customTextColor = currentHex;
                currentPreviewSettings.isTextCustom = true;
            }
        });
    };

    const setupDraggable = (element, onDrag) => {
        const handler = (e_down) => { if (!element) return; e_down.preventDefault(); const rect = element.getBoundingClientRect(); const moveHandler = (e_move) => { const moveEvent = e_move.touches ? e_move.touches[0] : e_move; onDrag(moveEvent, rect); }; const upHandler = () => { document.removeEventListener('mousemove', moveHandler); document.removeEventListener('mouseup', upHandler); document.removeEventListener('touchmove', moveHandler); document.removeEventListener('touchend', upHandler); }; document.addEventListener('mousemove', moveHandler); document.addEventListener('mouseup', upHandler); document.addEventListener('touchmove', moveHandler, { passive: false }); document.addEventListener('touchend', upHandler); const downEvent = e_down.touches ? e_down.touches[0] : e_down; onDrag(downEvent, rect); };
        element.addEventListener('mousedown', handler);
        element.addEventListener('touchstart', handler, { passive: false });
    };

    if (hueSlider) setupDraggable(hueSlider, (e, rect) => { let percent = ((e.clientX - rect.left) / rect.width) * 100; colorPickerState.h = Math.max(0, Math.min(359.9, percent * 3.6)); updatePickerUI(); });
    if (saturationSlider) setupDraggable(saturationSlider, (e, rect) => { let percent = ((e.clientX - rect.left) / rect.width) * 100; colorPickerState.s = Math.max(0, Math.min(100, percent)); updatePickerUI(); });
    if (brightnessSlider) setupDraggable(brightnessSlider, (e, rect) => { let percent = ((e.clientX - rect.left) / rect.width) * 100; colorPickerState.b = Math.max(0, Math.min(100, percent)); updatePickerUI(); });

    if (colorTargetSelector) {
        colorTargetSelector.addEventListener('change', (event) => {
            const target = event.target.value;
            if (['elements', 'background', 'text'].includes(target)) {
                uiModalState.currentColorTarget = target;
                let colorToSet;

                if (target === 'elements') {
                    colorToSet = currentPreviewSettings.primaryColor;
                } else if (target === 'background') {
                    if (currentPreviewSettings.isBackgroundCustom) {
                        colorToSet = currentPreviewSettings.backgroundColor;
                    } else {
                        const computedBg = getComputedStyle(document.body).backgroundColor;
                        const match = /rgb\((\d+), (\d+), (\d+)\)/.exec(computedBg);
                        if (match) {
                            colorToSet = rgbToHex(parseInt(match[1]), parseInt(match[2]), parseInt(match[3]));
                        } else {
                            colorToSet = document.documentElement.classList.contains('dark') ? '#111827' : '#F9FAFB';
                        }
                    }
                } else if (target === 'text') {
                    if (currentPreviewSettings.isTextCustom) {
                        colorToSet = currentPreviewSettings.customTextColor;
                    } else {
                        const computedText = getComputedStyle(document.body).color;
                        const match = /rgb\((\d+), (\d+), (\d+)\)/.exec(computedText);
                        if (match) {
                            colorToSet = rgbToHex(parseInt(match[1]), parseInt(match[2]), parseInt(match[3]));
                        } else {
                            colorToSet = document.documentElement.classList.contains('dark') ? '#f9fafb' : '#111827';
                        }
                    }
                }
                setColorPickerStateFromHex(colorToSet);
            }
        });
    }

    const openModal = async () => {
        await loadUISettings();
        uiModalState.currentColorTarget = 'elements';
        const elementsRadio = colorTargetSelector.querySelector('input[value="elements"]');
        if (elementsRadio) elementsRadio.checked = true;
        const initialColor = currentPreviewSettings.primaryColor || DEFAULT_UI_SETTINGS.primaryColor;
        setColorPickerStateFromHex(initialColor);
        populateModalControls(currentPreviewSettings);
        customizeUIModal.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
        requestAnimationFrame(() => _updatePickerVisualsWithoutTriggeringChange());
        isUISettingsDirty = false;
    };

    customizeUIBtn.addEventListener('click', openModal);

    const handleCloseRequest = async () => {
        if (typeof requestCloseModal === 'function') {
            requestCloseModal(customizeUIModal);
        } else {
            customizeUIModal.classList.add('hidden');
            document.body.classList.remove('overflow-hidden');
        }
    };

    if (closeCustomizeUIModalBtn) closeCustomizeUIModalBtn.addEventListener('click', handleCloseRequest);
    if (cancelUISettingsBtn) cancelUISettingsBtn.addEventListener('click', handleCloseRequest);
    if (saveUISettingsBtn) saveUISettingsBtn.addEventListener('click', async () => {
        updatePreviewSettingsFromModal();
        if (await saveUISettings()) {
            customizeUIModal.classList.add('hidden');
            document.body.classList.remove('overflow-hidden');
            isUISettingsDirty = false;
        }
    });

    if (resetUiBtn) {
        resetUiBtn.addEventListener('click', () => {
            if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
                resetUISettingsInModal();
            }
        });
    }


    const FONT_SIZE_STEP = 5, MIN_FONT_SIZE = 50, MAX_FONT_SIZE = 150;
    const updateFontSizeUIAndSettings = (newSize) => { const clampedSize = Math.max(MIN_FONT_SIZE, Math.min(MAX_FONT_SIZE, newSize)); if (fontSizeLabel) fontSizeLabel.textContent = clampedSize + '%'; if (currentPreviewSettings) currentPreviewSettings.fontSize = clampedSize; };
    if (decreaseFontBtn) decreaseFontBtn.addEventListener('click', () => genericChangeHandler(() => updateFontSizeUIAndSettings(parseInt(fontSizeLabel.textContent) - FONT_SIZE_STEP)));
    if (increaseFontBtn) increaseFontBtn.addEventListener('click', () => genericChangeHandler(() => updateFontSizeUIAndSettings(parseInt(fontSizeLabel.textContent) + FONT_SIZE_STEP)));
    if (resetFontBtn) resetFontBtn.addEventListener('click', () => genericChangeHandler(() => updateFontSizeUIAndSettings(100)));
    if (borderRadiusSlider) borderRadiusSlider.addEventListener('input', () => genericChangeHandler(() => currentPreviewSettings.borderRadius = parseInt(borderRadiusSlider.value)));
    if (densitySlider) densitySlider.addEventListener('input', () => genericChangeHandler(() => currentPreviewSettings.contentDensity = parseInt(densitySlider.value)));

    document.querySelectorAll('input[name="themeMode"], input[name="mainLayout"]').forEach(radio => {
        radio.addEventListener('change', () => genericChangeHandler(() => { if (radio.name === "themeMode") currentPreviewSettings.themeMode = radio.value; if (radio.name === "mainLayout") currentPreviewSettings.mainLayout = radio.value; }));
    });

    const panelSortContainer = getElem('panelSortContainer');
    if (panelSortContainer && typeof Sortable !== 'undefined') {
        new Sortable(panelSortContainer, { animation: 150, handle: '.fa-grip-lines', ghostClass: 'my-sortable-ghost', onEnd: () => genericChangeHandler(updatePreviewSettingsFromModal), });
    }
    if (typeof setupExtensionFieldListeners === 'function') {
        setupExtensionFieldListeners();
    }
    if (typeof setupBackgroundImageControls === 'function') {
        setupBackgroundImageControls();
    } else {
        console.error("–§—É–Ω–∫—Ü–∏—è setupBackgroundImageControls –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }
}


function hexToRgb(hex) {
    if (!hex || typeof hex !== 'string') return null;
    let r = 0, g = 0, b = 0;
    hex = hex.startsWith('#') ? hex.slice(1) : hex;
    if (hex.length === 3) {
        r = parseInt(hex[0] + hex[0], 16);
        g = parseInt(hex[1] + hex[1], 16);
        b = parseInt(hex[2] + hex[2], 16);
    } else if (hex.length === 6) {
        r = parseInt(hex.substring(0, 2), 16);
        g = parseInt(hex.substring(2, 4), 16);
        b = parseInt(hex.substring(4, 6), 16);
    } else {
        return null;
    }
    return { r, g, b };
}


function rgbToHex(r, g, b) {
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();
}


function rgbToHsb(r, g, b) {
    r /= 255; g /= 255; b /= 255;
    const max = Math.max(r, g, b), min = Math.min(r, g, b);
    let h = 0, s = 0, v = max;
    const d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max !== min) {
        switch (max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }
    return { h: h * 360, s: s * 100, b: v * 100 };
}


function hsbToRgb(h, s, b) {
    h /= 360; s /= 100; b /= 100;
    let r, g, v;
    const i = Math.floor(h * 6);
    const f = h * 6 - i;
    const p = b * (1 - s);
    const q = b * (1 - f * s);
    const t = b * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0: r = b, g = t, v = p; break;
        case 1: r = q, g = b, v = p; break;
        case 2: r = p, g = b, v = t; break;
        case 3: r = p, g = q, v = b; break;
        case 4: r = t, g = p, v = b; break;
        case 5: r = b, g = p, v = q; break;
    }
    return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(v * 255)
    };
}


function injectCustomizationStyles() {
    const styleId = 'ui-customization-fixes';
    if (document.getElementById(styleId)) return;

    const style = document.createElement('style');
    style.id = styleId;
    style.textContent = `
        /* –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª–µ–π —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ü–≤–µ—Ç–∞ */
        #hue-value, #saturation-value, #brightness-value {
            pointer-events: none;
            cursor: default;
            user-select: none;
        }
    `;
    document.head.appendChild(style);
    console.log("–°—Ç–∏–ª–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.");
}


function populateModalControls(settings) {
    const modal = document.getElementById('customizeUIModal');
    if (!modal) return;

    if (typeof settings !== 'object' || settings === null) {
        settings = { ...DEFAULT_UI_SETTINGS, themeMode: userPreferences.theme };
    }

    const layoutRadio = modal.querySelector(`input[name="mainLayout"][value="${settings.mainLayout || 'horizontal'}"]`);
    if (layoutRadio) layoutRadio.checked = true;

    const themeRadio = modal.querySelector(`input[name="themeMode"][value="${settings.themeMode || 'auto'}"]`);
    if (themeRadio) themeRadio.checked = true;

    const fontSizeLabel = modal.querySelector('#fontSizeLabel');
    if (fontSizeLabel) fontSizeLabel.textContent = (settings.fontSize ?? 100) + '%';

    const borderRadiusSlider = modal.querySelector('#borderRadiusSlider');
    if (borderRadiusSlider) borderRadiusSlider.value = settings.borderRadius ?? 8;

    const densitySlider = modal.querySelector('#densitySlider');
    if (densitySlider) densitySlider.value = settings.contentDensity ?? 3;

    const panelSortContainer = document.getElementById('panelSortContainer');
    if (panelSortContainer) {
        panelSortContainer.innerHTML = '';
        const idToConfigMap = tabsConfig.reduce((map, tab) => (map[tab.id] = tab, map), {});

        const order = settings.panelOrder || defaultPanelOrder;
        const visibility = settings.panelVisibility || defaultPanelVisibility;

        order.forEach((panelId, index) => {
            const config = idToConfigMap[panelId];
            if (config) {
                const isVisible = visibility[index] ?? true;
                const panelItem = createPanelItemElement(config.id, config.name, isVisible);
                panelSortContainer.appendChild(panelItem);
            }
        });

        panelSortContainer.querySelectorAll('.toggle-visibility').forEach(button => {
            button.addEventListener('click', handleModalVisibilityToggle);
        });
    }
}


if (typeof applyUISettings === 'undefined') {
    window.applyUISettings = async () => {
        console.warn("applyUISettings (–ó–ê–ì–õ–£–®–ö–ê) –≤—ã–∑–≤–∞–Ω–∞. –†–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

        if (typeof DEFAULT_UI_SETTINGS === 'object' && typeof applyPreviewSettings === 'function') {
            try {
                await applyPreviewSettings(DEFAULT_UI_SETTINGS);
                console.log("applyUISettings (–ó–ê–ì–õ–£–®–ö–ê): –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
            } catch (e) {
                console.error("applyUISettings (–ó–ê–ì–õ–£–®–ö–ê): –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", e);
            }
        }
        return Promise.resolve();
    };
}


async function applyUISettings() {
    console.log("applyUISettings: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö UI –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ–±—ã—á–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)...");

    let settingsToApply = { ...DEFAULT_UI_SETTINGS };
    const currentPanelIds = tabsConfig.map(t => t.id);
    const knownPanelIds = new Set(currentPanelIds);

    const actualDefaultPanelOrder = (typeof defaultPanelOrder !== 'undefined' && Array.isArray(defaultPanelOrder) && defaultPanelOrder.length > 0)
        ? defaultPanelOrder
        : currentPanelIds;

    const actualDefaultPanelVisibility = (typeof defaultPanelVisibility !== 'undefined' && Array.isArray(defaultPanelVisibility) && defaultPanelVisibility.length === actualDefaultPanelOrder.length)
        ? defaultPanelVisibility
        : currentPanelIds.map(id => id !== 'sedoTypes');

    if (!DEFAULT_UI_SETTINGS.panelOrder || DEFAULT_UI_SETTINGS.panelOrder.length !== actualDefaultPanelOrder.length) {
        DEFAULT_UI_SETTINGS.panelOrder = [...actualDefaultPanelOrder];
    }
    if (!DEFAULT_UI_SETTINGS.panelVisibility || DEFAULT_UI_SETTINGS.panelVisibility.length !== actualDefaultPanelVisibility.length) {
        DEFAULT_UI_SETTINGS.panelVisibility = [...actualDefaultPanelVisibility];
    }
    settingsToApply.panelOrder = [...actualDefaultPanelOrder];
    settingsToApply.panelVisibility = [...actualDefaultPanelVisibility];

    if (!db) {
        console.warn("applyUISettings: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
    } else {
        try {
            const loadedSettings = await getFromIndexedDB('preferences', 'uiSettings');
            if (loadedSettings && typeof loadedSettings === 'object') {
                console.log("applyUISettings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ UI –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î. –°–ª–∏—è–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞...");
                settingsToApply = { ...DEFAULT_UI_SETTINGS, ...loadedSettings, id: 'uiSettings' };
                let savedOrder = settingsToApply.panelOrder || [];
                let savedVisibility = settingsToApply.panelVisibility || [];
                if (!Array.isArray(savedOrder) || savedOrder.length === 0) savedOrder = [...actualDefaultPanelOrder];
                if (!Array.isArray(savedVisibility) || savedVisibility.length === 0 || savedVisibility.length !== savedOrder.length) {
                    savedVisibility = savedOrder.map(id => {
                        const defaultIndex = actualDefaultPanelOrder.indexOf(id);
                        return defaultIndex !== -1 ? actualDefaultPanelVisibility[defaultIndex] : (id !== 'sedoTypes');
                    });
                }
                let effectiveOrder = [];
                let effectiveVisibility = [];
                const processedIds = new Set();
                savedOrder.forEach((panelId, index) => {
                    if (knownPanelIds.has(panelId)) {
                        effectiveOrder.push(panelId);
                        effectiveVisibility.push(typeof savedVisibility[index] === 'boolean' ? savedVisibility[index] : (panelId !== 'sedoTypes'));
                        processedIds.add(panelId);
                    } else {
                        console.warn(`applyUISettings (DB Load): –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID –ø–∞–Ω–µ–ª–∏ "${panelId}" –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.`);
                    }
                });
                currentPanelIds.forEach(panelId => {
                    if (!processedIds.has(panelId)) {
                        console.log(`applyUISettings (DB Load): –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ "${panelId}" –≤ –ø–æ—Ä—è–¥–æ–∫/–≤–∏–¥–∏–º–æ—Å—Ç—å.`);
                        effectiveOrder.push(panelId);
                        effectiveVisibility.push(panelId !== 'sedoTypes');
                    }
                });
                settingsToApply.panelOrder = effectiveOrder;
                settingsToApply.panelVisibility = effectiveVisibility;
                console.log("applyUISettings: –°–ª–∏—è–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω—ã.");
            } else {
                console.log("applyUISettings: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ UI –≤ –ë–î –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º/–≤–∏–¥–∏–º–æ—Å—Ç—å—é).");
            }
        } catch (error) {
            console.error("applyUISettings: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ UI –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", error);
        }
    }

    if (typeof originalUISettings !== 'object' || Object.keys(originalUISettings).length === 0) {
        originalUISettings = JSON.parse(JSON.stringify(settingsToApply));
        console.log("applyUISettings: originalUISettings –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.");
    }
    currentPreviewSettings = JSON.parse(JSON.stringify(settingsToApply));
    console.log("applyUISettings: currentPreviewSettings —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.");

    try {
        if (typeof applyPreviewSettings !== 'function') {
            console.error("applyUISettings: –§—É–Ω–∫—Ü–∏—è applyPreviewSettings –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
            throw new Error("–§—É–Ω–∫—Ü–∏—è applyPreviewSettings –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
        }
        await applyPreviewSettings(settingsToApply);
        console.log("applyUISettings: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:", JSON.parse(JSON.stringify(settingsToApply)));
        return Promise.resolve(true);
    } catch (applyError) {
        console.error("applyUISettings: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ applyPreviewSettings:", applyError);
        if (typeof applyPreviewSettings === 'function' && typeof DEFAULT_UI_SETTINGS === 'object') {
            try {
                await applyPreviewSettings(DEFAULT_UI_SETTINGS);
                console.warn("applyUISettings: –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ê–ë–°–û–õ–Æ–¢–ù–´–ï –î–ï–§–û–õ–¢–´ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö/—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.");
            } catch (emergencyError) {
                console.error("applyUISettings: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ê–ë–°–û–õ–Æ–¢–ù–´–• –î–ï–§–û–õ–¢–û–í:", emergencyError);
            }
        }
        if (typeof showNotification === 'function') {
            showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –°–±—Ä–æ—à–µ–Ω–æ –∫ –±–∞–∑–æ–≤—ã–º.", "error");
        }
        return Promise.reject(applyError);
    }
}


function calculateSecondaryColor(hex, percent = 15) {
    hex = hex.replace(/^#/, '');
    if (hex.length === 3) {
        hex = hex.split('').map(s => s + s).join('');
    }
    let r = parseInt(hex.substring(0, 2), 16);
    let g = parseInt(hex.substring(2, 4), 16);
    let b = parseInt(hex.substring(4, 6), 16);

    const factor = 1 - (percent / 100);
    r = Math.max(0, Math.floor(r * factor));
    g = Math.max(0, Math.floor(g * factor));
    b = Math.max(0, Math.floor(b * factor));

    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
}


if (typeof loadUISettings === 'undefined') { window.loadUISettings = () => console.log("loadUISettings called"); }
if (typeof saveUISettings === 'undefined') { window.saveUISettings = () => console.log("saveUISettings called"); }
if (typeof applyUISettings === 'undefined') { window.applyUISettings = () => console.log("applyUISettings called"); }
if (typeof resetUISettings === 'undefined') { window.resetUISettings = () => console.log("resetUISettings called"); }
if (typeof showNotification === 'undefined') { window.showNotification = (msg) => console.log("Notification:", msg); }
if (typeof setTheme === 'undefined') { window.setTheme = (theme) => console.log("setTheme called with:", theme); }

async function resetUISettingsInModal() {
    console.log("Resetting UI settings in modal preview...");

    currentPreviewSettings = JSON.parse(JSON.stringify(DEFAULT_UI_SETTINGS));
    currentPreviewSettings.id = 'uiSettings';
    currentPreviewSettings.isBackgroundCustom = false;
    delete currentPreviewSettings.backgroundColor;
    currentPreviewSettings.isTextCustom = false;
    delete currentPreviewSettings.customTextColor;

    document.body.classList.remove('custom-background-active');

    try {
        await deleteFromIndexedDB('preferences', 'customBackgroundImage');
        removeCustomBackgroundImage();
    } catch (err) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", err);
    }

    isUISettingsDirty = true;

    try {
        populateModalControls(currentPreviewSettings);

        uiModalState.currentColorTarget = 'elements';

        const colorTargetSelector = document.getElementById('colorTargetSelector');
        const elementsRadio = colorTargetSelector?.querySelector('input[value="elements"]');
        if (elementsRadio) elementsRadio.checked = true;

        if (typeof setColorPickerStateFromHex === 'function') {
            setColorPickerStateFromHex(currentPreviewSettings.primaryColor);
        }

        await applyPreviewSettings(currentPreviewSettings);
        console.log("UI settings reset preview applied.");
        showNotification("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å.", "info");
        return true;
    } catch (error) {
        console.error("Error resetting UI settings preview:", error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", "error");
        currentPreviewSettings = JSON.parse(JSON.stringify(originalUISettings));
        isUISettingsDirty = false;
        populateModalControls(currentPreviewSettings);
        await applyPreviewSettings(currentPreviewSettings);
        return false;
    }
}


async function applyInitialUISettings() {
    console.log("applyInitialUISettings: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö UI –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...");

    if (typeof userPreferences === 'undefined' || userPreferences === null) {
        console.error("applyInitialUISettings: userPreferences –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å...");
        await loadUserPreferences();
        if (typeof userPreferences === 'undefined' || userPreferences === null) {
            console.error("applyInitialUISettings: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - userPreferences –≤—Å–µ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏.");
            userPreferences = {
                theme: DEFAULT_UI_SETTINGS.themeMode,
                showBlacklistUsageWarning: true,
                disableForcedBackupOnImport: false,
                welcomeTextShownInitially: false
            };
        }
    }

    let loadedUiSpecificSettings = {};

    if (db) {
        try {
            const settingsFromDB = await getFromIndexedDB('preferences', 'uiSettings');
            if (settingsFromDB && typeof settingsFromDB === 'object') {
                loadedUiSpecificSettings = { ...settingsFromDB };
                delete loadedUiSpecificSettings.themeMode;
                console.log("applyInitialUISettings: UI-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ 'uiSettings' (—Ç–µ–º–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞).");
            }

            const bgImagePref = await getFromIndexedDB('preferences', 'customBackgroundImage');

            if (bgImagePref && bgImagePref.value) {
                applyCustomBackgroundImage(bgImagePref.value);
            } else {
                removeCustomBackgroundImage();
            }

        } catch (error) {
            console.error("applyInitialUISettings: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 'uiSettings', –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è UI-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.", error);
        }
    }

    let settingsToApply = {
        ...DEFAULT_UI_SETTINGS,
        ...loadedUiSpecificSettings,
        themeMode: userPreferences.theme,
        showBlacklistUsageWarning: userPreferences.showBlacklistUsageWarning,
        disableForcedBackupOnImport: userPreferences.disableForcedBackupOnImport,
        id: 'uiSettings'
    };

    const currentPanelIds = tabsConfig.map(t => t.id);
    const knownPanelIds = new Set(currentPanelIds);
    const actualDefaultPanelOrder = (typeof defaultPanelOrder !== 'undefined' && Array.isArray(defaultPanelOrder) && defaultPanelOrder.length > 0)
        ? defaultPanelOrder : currentPanelIds;
    const actualDefaultPanelVisibility = (typeof defaultPanelVisibility !== 'undefined' && Array.isArray(defaultPanelVisibility) && defaultPanelVisibility.length === actualDefaultPanelOrder.length)
        ? defaultPanelVisibility : currentPanelIds.map(id => !(id === 'sedoTypes' || id === 'blacklistedClients'));

    let savedOrder = settingsToApply.panelOrder || actualDefaultPanelOrder;
    let savedVisibility = settingsToApply.panelVisibility || actualDefaultPanelVisibility;

    if (!Array.isArray(savedOrder) || savedOrder.length === 0 || !savedOrder.every(id => typeof id === 'string' && knownPanelIds.has(id))) {
        console.warn("[applyInitialUISettings] panelOrder –≤ settingsToApply –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ ID. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è defaultPanelOrder.");
        savedOrder = [...actualDefaultPanelOrder];
    }
    if (!Array.isArray(savedVisibility) || savedVisibility.length !== savedOrder.length || !savedVisibility.every(v => typeof v === 'boolean')) {
        console.warn("[applyInitialUISettings] panelVisibility –≤ settingsToApply –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç panelOrder. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ defaultPanelVisibility –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ savedOrder.");
        savedVisibility = savedOrder.map(id => {
            const defaultIndex = actualDefaultPanelOrder.indexOf(id);
            return defaultIndex !== -1 ? actualDefaultPanelVisibility[defaultIndex] : (!(id === 'sedoTypes' || id === 'blacklistedClients'));
        });
    }
    let effectiveOrder = [];
    let effectiveVisibility = [];
    const processedIds = new Set();

    savedOrder.forEach((panelId, index) => {
        if (knownPanelIds.has(panelId)) {
            effectiveOrder.push(panelId);
            effectiveVisibility.push(savedVisibility[index]);
            processedIds.add(panelId);
        } else {
            console.warn(`applyInitialUISettings (Final Sync): –ü–∞–Ω–µ–ª—å —Å ID "${panelId}" –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ tabsConfig. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.`);
        }
    });

    currentPanelIds.forEach(panelId => {
        if (!processedIds.has(panelId)) {
            effectiveOrder.push(panelId);
            const defaultIndex = actualDefaultPanelOrder.indexOf(panelId);
            effectiveVisibility.push(
                defaultIndex !== -1 ? actualDefaultPanelVisibility[defaultIndex] : (!(panelId === 'sedoTypes' || panelId === 'blacklistedClients'))
            );
        }
    });

    settingsToApply.panelOrder = effectiveOrder;
    settingsToApply.panelVisibility = effectiveVisibility;

    originalUISettings = JSON.parse(JSON.stringify(settingsToApply));
    currentPreviewSettings = JSON.parse(JSON.stringify(settingsToApply));
    console.log("applyInitialUISettings: originalUISettings –∏ currentPreviewSettings –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.");

    try {
        if (typeof applyPreviewSettings !== 'function') {
            console.error("applyInitialUISettings: –§—É–Ω–∫—Ü–∏—è applyPreviewSettings –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            throw new Error("–§—É–Ω–∫—Ü–∏—è applyPreviewSettings –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
        }
        await applyPreviewSettings(settingsToApply);
        console.log("applyInitialUISettings: –ù–∞—á–∞–ª—å–Ω—ã–µ UI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:", JSON.parse(JSON.stringify(settingsToApply)));
        return Promise.resolve(true);
    } catch (applyError) {
        console.error("applyInitialUISettings: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ applyPreviewSettings:", applyError);
        if (typeof applyPreviewSettings === 'function' && typeof DEFAULT_UI_SETTINGS === 'object') {
            try {
                let emergencyDefaults = { ...DEFAULT_UI_SETTINGS };
                if (userPreferences && userPreferences.theme) {
                    emergencyDefaults.themeMode = userPreferences.theme;
                }
                emergencyDefaults.showBlacklistUsageWarning = true;
                emergencyDefaults.disableForcedBackupOnImport = false;

                await applyPreviewSettings(emergencyDefaults);
                console.warn("applyInitialUISettings: –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ê–ë–°–û–õ–Æ–¢–ù–´–ï –î–ï–§–û–õ–¢–´ (—Å –ø–æ–ø—ã—Ç–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.");
            } catch (emergencyError) {
                console.error("applyInitialUISettings: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ê–ë–°–û–õ–Æ–¢–ù–´–• –î–ï–§–û–õ–¢–û–í:", emergencyError);
            }
        }
        if (typeof showNotification === 'function') {
            showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –°–±—Ä–æ—à–µ–Ω–æ –∫ –±–∞–∑–æ–≤—ã–º.", "error");
        }
        return Promise.reject(applyError);
    }
}


function initClearDataFunctionality() {
    const clearAllDataBtn = document.getElementById('clearAllDataBtn');
    const confirmClearDataModal = document.getElementById('confirmClearDataModal');
    const cancelClearDataBtn = document.getElementById('cancelClearDataBtn');
    const confirmAndClearDataBtn = document.getElementById('confirmAndClearDataBtn');
    const closeConfirmClearModalBtns = confirmClearDataModal?.querySelectorAll('.close-confirm-clear-modal');
    const exportBeforeClearBtn = document.getElementById('exportBeforeClearBtn');

    if (!clearAllDataBtn || !confirmClearDataModal || !cancelClearDataBtn || !confirmAndClearDataBtn) {
        console.warn("Clear Data Functionality: One or more required elements not found. Feature disabled.");
        return;
    }

    clearAllDataBtn.addEventListener('click', () => {
        confirmClearDataModal.classList.remove('hidden');
        document.body.classList.add('modal-open');
        if (typeof addEscapeHandler === 'function') {
            addEscapeHandler(confirmClearDataModal);
        } else {
            console.warn("[initClearDataFunctionality] addEscapeHandler function not found for confirmClearDataModal.");
        }
    });

    const closeConfirmModal = () => {
        confirmClearDataModal.classList.add('hidden');
        if (typeof removeEscapeHandler === 'function') {
            removeEscapeHandler(confirmClearDataModal);
        }
        if (typeof getVisibleModals === 'function' && getVisibleModals().filter(modal => modal.id !== confirmClearDataModal.id).length === 0) {
            document.body.classList.remove('modal-open');
        } else if (typeof getVisibleModals !== 'function') {
            document.body.classList.remove('modal-open');
        }
    };

    cancelClearDataBtn.addEventListener('click', closeConfirmModal);
    closeConfirmClearModalBtns?.forEach(btn => {
        btn.addEventListener('click', closeConfirmModal);
    });

    confirmAndClearDataBtn.addEventListener('click', async () => {
        console.log("Attempting to clear all application data...");
        closeConfirmModal();

        try {
            localStorage.setItem('copilotIsReloadingAfterClear', 'true');
            console.log("Flag 'copilotIsReloadingAfterClear' set in localStorage.");
        } catch (e) {
            console.error("Failed to set 'copilotIsReloadingAfterClear' flag in localStorage:", e);
            if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                NotificationService.add("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏. –û—á–∏—Å—Ç–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.", "error", { important: true });
            }
        }

        try {
            console.log("Data clearing starting...");
            await clearAllApplicationData((percentage, message) => {
                console.log(`[ClearData Progress (no overlay visible): ${percentage}%] ${message}`);
            });

            console.log("Data clearing process finished successfully in handler.");
            console.log("Data cleared. Reloading page now...");
            window.location.reload();

        } catch (error) {
            console.error("Error during clearAllApplicationData or subsequent logic:", error);
            const errorMsg = error ? (error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.";

            if (loadingOverlayManager.overlayElement) {
                loadingOverlayManager.updateProgress(100, `–û—à–∏–±–∫–∞: ${errorMsg.substring(0, 50)}...`);
            }

            if (typeof NotificationService !== 'undefined' && NotificationService.add) {
                NotificationService.add(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${errorMsg}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`, "error", { important: true, duration: 15000 });
            } else if (typeof showNotification === 'function') {
                showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${errorMsg}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`, "error", 15000);
            }
        }
    });

    exportBeforeClearBtn?.addEventListener('click', () => {
        if (typeof exportAllData === 'function') {
            exportAllData();
        } else {
            if (typeof showNotification === 'function') {
                showNotification("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", "error");
            }
        }
    });
    console.log("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ñ–ª–∞–≥–∞ –∏ –æ–≤–µ—Ä–ª–µ—è.");
}


async function clearAllApplicationData(progressCallback) {
    console.log("Starting data clearing process with progress callback...");
    let currentProgress = 0;

    const updateAndReportProgress = (increment, message) => {
        currentProgress += increment;
        currentProgress = Math.min(currentProgress, 95);
        if (progressCallback) {
            progressCallback(currentProgress, message);
        }
        console.log(`[ClearData Progress: ${currentProgress}%] ${message}`);
    };

    updateAndReportProgress(0, "–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏...");

    try {
        updateAndReportProgress(5, "–û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...");
        const localStorageKeys = [
            'clientData', 'employeeExtension', 'viewPreferences',
            TIMER_STATE_KEY,
            'uiSettingsModalOrder',
            'lastActiveTabCopilot1CO',
            BLACKLIST_WARNING_ACCEPTED_KEY,
            USER_PREFERENCES_KEY,
            CATEGORY_INFO_KEY,
            SEDO_CONFIG_KEY,
            'copilotIsReloadingAfterClear'
        ];
        localStorageKeys.forEach(key => {
            if (localStorage.getItem(key) !== null) {
                localStorage.removeItem(key);
                console.log(`Removed key from LocalStorage: ${key}`);
            } else {
                console.log(`Key not found in LocalStorage, skipping removal: ${key}`);
            }
        });

        const appPrefix = "Copilot1CO_";
        const keysToRemoveWithPrefix = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith(appPrefix)) {
                keysToRemoveWithPrefix.push(key);
            }
        }
        keysToRemoveWithPrefix.forEach(key => {
            localStorage.removeItem(key);
            console.log(`Removed prefixed key from LocalStorage: ${key}`);
        });
        console.log("LocalStorage –æ—á–∏—â–µ–Ω.");

    } catch (error) {
        console.error("Error clearing LocalStorage:", error);
        if (progressCallback) progressCallback(currentProgress, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞!");
        throw error;
    }

    try {
        updateAndReportProgress(5, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ —É–¥–∞–ª–µ–Ω–∏—é...");
        if (db) {
            db.close();
            db = null;
            console.log("IndexedDB connection closed.");
        } else {
            console.log("IndexedDB connection was not open.");
        }
    } catch (error) {
        console.error("Error closing IndexedDB connection:", error);
        if (progressCallback) progressCallback(currentProgress, "–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!");
        throw error;
    }

    try {
        updateAndReportProgress(5, "–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
        await new Promise((resolve, reject) => {
            const deleteRequest = indexedDB.deleteDatabase(DB_NAME);
            deleteRequest.onsuccess = () => {
                console.log(`IndexedDB database "${DB_NAME}" deleted successfully.`);
                updateAndReportProgress(80, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.");
                resolve();
            };
            deleteRequest.onerror = (event) => {
                console.error(`Error deleting database "${DB_NAME}":`, event.target.error);
                if (progressCallback) progressCallback(currentProgress, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!");
                reject(event.target.error || new Error('Unknown DB deletion error'));
            };
            deleteRequest.onblocked = (event) => {
                const errorMsg = `–£–¥–∞–ª–µ–Ω–∏–µ –ë–î "${DB_NAME}" –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.`;
                console.warn(errorMsg, event);
                if (progressCallback) progressCallback(currentProgress, "–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!");
                reject(new Error(errorMsg));
            };
        });
    } catch (error) {
        console.error("Error deleting IndexedDB database:", error);
        throw error;
    }
    console.log("Data clearing process finished.");
}


function createPanelItemElement(id, name, isVisible = true) {
    const item = document.createElement('div');
    item.className = 'panel-item flex items-center p-2 bg-gray-100 dark:bg-gray-700 rounded cursor-move mb-2';
    item.setAttribute('data-section', id);
    const eyeClass = isVisible ? 'fa-eye' : 'fa-eye-slash';
    const titleText = isVisible ? '–°–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª';
    item.innerHTML = `
                                <i class="fas fa-grip-lines mr-2 text-gray-400"></i>
                                <span class="flex-grow">${name}</span>
                                <div class="ml-auto flex items-center flex-shrink-0">
                                    <button class="toggle-visibility p-1 text-gray-500 hover:text-primary mr-1" title="${titleText}">
                                        <i class="fas ${eyeClass}"></i>
                                    </button>
                                </div>`;
    return item;
}


async function applyPreviewSettings(settings) {
    console.log("[applyPreviewSettings v5 - Corrected Text Palette] Applying settings:", JSON.parse(JSON.stringify(settings || {})));
    if (typeof settings !== 'object' || settings === null) {
        settings = JSON.parse(JSON.stringify(DEFAULT_UI_SETTINGS));
    }

    const { style } = document.documentElement;
    const body = document.body;

    const primaryColor = settings?.primaryColor || DEFAULT_UI_SETTINGS.primaryColor;
    const secondaryColor = calculateSecondaryColor(primaryColor);
    style.setProperty('--color-primary', primaryColor);
    style.setProperty('--color-secondary', secondaryColor);

    let palette = {
        textPrimary: null,
        textSecondary: null,
        surface1: null,
        surface2: null,
        border: null,
        inputBg: null
    };
    let isPaletteActive = false;

    const isBackgroundCustom = settings?.isBackgroundCustom || false;
    const backgroundColor = settings?.backgroundColor;

    if (isBackgroundCustom && backgroundColor) {
        isPaletteActive = true;
        style.setProperty('--color-background', backgroundColor);

        const bgHsl = hexToHsl(backgroundColor);
        if (bgHsl) {
            const luminance = getLuminance(backgroundColor);
            const isDarkBg = luminance < 0.5;
            const textPrimary = adjustHsl(bgHsl, isDarkBg ? 85 : -85, -30);
            const textSecondary = adjustHsl(bgHsl, isDarkBg ? 60 : -60, -15);
            const surface1 = adjustHsl(bgHsl, isDarkBg ? 5 : -5, -5);
            const surface2 = adjustHsl(bgHsl, isDarkBg ? 8 : -8, -8);
            const border = adjustHsl(bgHsl, isDarkBg ? 12 : -12, -10);
            const inputBg = adjustHsl(bgHsl, isDarkBg ? 3 : -3, -5);
            palette.textPrimary = hslToHex(textPrimary.h, textPrimary.s, textPrimary.l);
            palette.textSecondary = hslToHex(textSecondary.h, textSecondary.s, textSecondary.l);
            palette.surface1 = hslToHex(surface1.h, surface1.s, surface1.l);
            palette.surface2 = hslToHex(surface2.h, surface2.s, surface2.l);
            palette.border = hslToHex(border.h, border.s, border.l);
            palette.inputBg = hslToHex(inputBg.h, inputBg.s, inputBg.l);
        }
    }

    const isTextCustom = settings?.isTextCustom || false;
    const customTextColor = settings?.customTextColor;

    if (isTextCustom && customTextColor) {
        isPaletteActive = true;

        palette.textPrimary = customTextColor;
        palette.textSecondary = customTextColor;
    }

    if (isPaletteActive) {
        body.classList.add('custom-background-active');

        if (palette.textPrimary) style.setProperty('--color-text-primary', palette.textPrimary); else style.removeProperty('--color-text-primary');
        if (palette.textSecondary) style.setProperty('--color-text-secondary', palette.textSecondary); else style.removeProperty('--color-text-secondary');
        if (palette.surface1) style.setProperty('--color-surface-1', palette.surface1); else style.removeProperty('--color-surface-1');
        if (palette.surface2) style.setProperty('--color-surface-2', palette.surface2); else style.removeProperty('--color-surface-2');
        if (palette.border) style.setProperty('--color-border', palette.border); else style.removeProperty('--color-border');
        if (palette.inputBg) style.setProperty('--color-input-bg', palette.inputBg); else style.removeProperty('--color-input-bg');
    } else {
        body.classList.remove('custom-background-active');
        style.removeProperty('--color-background');
        style.removeProperty('--color-text-primary');
        style.removeProperty('--color-text-secondary');
        style.removeProperty('--color-surface-1');
        style.removeProperty('--color-surface-2');
        style.removeProperty('--color-border');
        style.removeProperty('--color-input-bg');
    }

    const scrollbarThumbOpacity = 0.6;
    const scrollbarThumbHoverOpacity = 0.8;
    const hexToRgba = (hex, alpha = 1) => {
        if (!hex) return ''; let r = 0, g = 0, b = 0; if (hex.length == 4) { r = parseInt(hex[1] + hex[1], 16); g = parseInt(hex[2] + hex[2], 16); b = parseInt(hex[3] + hex[3], 16); } else if (hex.length == 7) { r = parseInt(hex.substring(1, 3), 16); g = parseInt(hex.substring(3, 5), 16); b = parseInt(hex.substring(5, 7), 16); } return `rgba(${r},${g},${b},${alpha})`;
    };
    style.setProperty('--scrollbar-thumb-bg', hexToRgba(primaryColor, scrollbarThumbOpacity));
    style.setProperty('--scrollbar-thumb-hover-bg', hexToRgba(primaryColor, scrollbarThumbHoverOpacity));

    style.fontSize = `${settings?.fontSize ?? DEFAULT_UI_SETTINGS.fontSize}%`;
    style.setProperty('--border-radius', `${settings?.borderRadius ?? DEFAULT_UI_SETTINGS.borderRadius}px`);
    const contentDensity = settings?.contentDensity ?? DEFAULT_UI_SETTINGS.contentDensity;
    const baseSpacingUnit = 0.25; const spacingMultiplier = 2 + contentDensity;
    style.setProperty('--content-spacing', `${(baseSpacingUnit * spacingMultiplier).toFixed(3)}rem`);

    const mainLayoutDiv = document.querySelector('#mainContent > div.grid');
    if (mainLayoutDiv) {
        const isVertical = (settings?.mainLayout || DEFAULT_UI_SETTINGS.mainLayout) === 'vertical';
        mainLayoutDiv.classList.toggle('grid-cols-1', isVertical);
        mainLayoutDiv.classList.toggle('md:grid-cols-2', !isVertical);
    }

    if (typeof setTheme === 'function') {
        setTheme(settings?.themeMode || DEFAULT_UI_SETTINGS.themeMode);
    }

    const order = settings?.panelOrder || defaultPanelOrder;
    const visibility = settings?.panelVisibility || defaultPanelVisibility;
    if (typeof applyPanelOrderAndVisibility === 'function') {
        applyPanelOrderAndVisibility(order, visibility);
        const appContentElement = document.getElementById('appContent');
        if (appContentElement && !appContentElement.classList.contains('hidden') && typeof updateVisibleTabs === 'function') {
            requestAnimationFrame(updateVisibleTabs);
        }
    }
}


function hexToHsl(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    if (!result) return null;
    let r = parseInt(result[1], 16) / 255;
    let g = parseInt(result[2], 16) / 255;
    let b = parseInt(result[3], 16) / 255;
    const max = Math.max(r, g, b), min = Math.min(r, g, b);
    let h, s, l = (max + min) / 2;
    if (max === min) {
        h = s = 0;
    } else {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }
    return { h: h * 360, s: s * 100, l: l * 100 };
}


function hslToHex(h, s, l) {
    l /= 100;
    const a = s * Math.min(l, 1 - l) / 100;
    const f = n => {
        const k = (n + h / 30) % 12;
        const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        return Math.round(255 * color).toString(16).padStart(2, '0');
    };
    return `#${f(0)}${f(8)}${f(4)}`;
}


function getLuminance(hex) {
    const rgb = hexToRgb(hex);
    if (!rgb) return 0;
    const { r, g, b } = rgb;
    const a = [r, g, b].map(function (v) {
        v /= 255;
        return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
    });
    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
}


function adjustHsl(hsl, l_adjust = 0, s_adjust = 0) {
    return {
        h: hsl.h,
        s: Math.max(0, Math.min(100, hsl.s + s_adjust)),
        l: Math.max(0, Math.min(100, hsl.l + l_adjust))
    };
}


function applyPanelOrderAndVisibility(order, visibility) {
    const tabNav = document.querySelector('header + .border-b nav.flex');
    if (!tabNav) {
        console.error("[applyPanelOrderAndVisibility v5 - State Restore] Tab navigation container not found.");
        return;
    }

    const moreTabsBtnParent = document.getElementById('moreTabsBtn')?.parentNode;
    const idToConfigMap = tabsConfig.reduce((map, tab) => {
        map[tab.id] = tab;
        return map;
    }, {});

    const currentTabButtons = tabNav.querySelectorAll('.tab-btn:not(#moreTabsBtn)');
    currentTabButtons.forEach(btn => btn.remove());

    const fragment = document.createDocumentFragment();
    const visibilityMap = order.reduce((map, panelId, index) => {
        map[panelId] = visibility[index] ?? true;
        return map;
    }, {});

    order.forEach(panelId => {
        const config = idToConfigMap[panelId];
        if (config) {
            const tabBtn = createTabButtonElement(config);
            if (!visibilityMap[panelId]) {
                tabBtn.classList.add('hidden');
            }
            fragment.appendChild(tabBtn);
        } else {
            console.warn(`[applyPanelOrderAndVisibility v5] Config not found for panel ID: ${panelId}`);
        }
    });

    if (moreTabsBtnParent) {
        tabNav.insertBefore(fragment, moreTabsBtnParent);
    } else {
        tabNav.appendChild(fragment);
    }

    if (currentSection) {
        const activeTabId = currentSection + 'Tab';
        const activeTabButton = tabNav.querySelector(`#${activeTabId}`);

        if (activeTabButton) {
            activeTabButton.classList.add('tab-active');
            activeTabButton.classList.remove('text-gray-500', 'dark:text-gray-400', 'border-transparent');
            console.log(`[applyPanelOrderAndVisibility v5] Active state restored for #${activeTabId}`);
        } else {
            console.warn(`[applyPanelOrderAndVisibility v5] Could not re-apply active state. Button with ID #${activeTabId} not found after rebuild.`);
        }
    }

    console.log("[applyPanelOrderAndVisibility v5] Panel order and visibility applied, active state restored.");

    if (typeof updateVisibleTabs === 'function') {
        requestAnimationFrame(updateVisibleTabs);
    }
}


function handleModalVisibilityToggle(event) {
    const button = event.currentTarget;
    const icon = button.querySelector('i');
    if (!icon) return;

    const isCurrentlyVisible = icon.classList.contains('fa-eye');
    const shouldBeHidden = isCurrentlyVisible;

    icon.classList.toggle('fa-eye', !shouldBeHidden);
    icon.classList.toggle('fa-eye-slash', shouldBeHidden);
    button.setAttribute('title', shouldBeHidden ? "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª" : "–°–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª");

    updatePreviewSettingsFromModal();
    if (currentPreviewSettings) {
        applyPreviewSettings(currentPreviewSettings);
        isUISettingsDirty = true;
    }
}


function getSettingsFromModal() {
    const modal = document.getElementById('customizeUIModal');
    if (!modal) return null;

    const primaryColor = currentPreviewSettings.primaryColor || DEFAULT_UI_SETTINGS.primaryColor;
    const backgroundColor = currentPreviewSettings.backgroundColor;
    const isBackgroundCustom = currentPreviewSettings.isBackgroundCustom || false;
    const customTextColor = currentPreviewSettings.customTextColor;
    const isTextCustom = currentPreviewSettings.isTextCustom || false;

    const panelItems = Array.from(modal.querySelectorAll('#panelSortContainer .panel-item'));
    const panelOrder = panelItems.map(item => item.getAttribute('data-section'));
    const panelVisibility = panelItems.map(item =>
        item.querySelector('.toggle-visibility i')?.classList.contains('fa-eye') ?? true
    );

    return {
        id: 'uiSettings',
        mainLayout: modal.querySelector('input[name="mainLayout"]:checked')?.value || 'horizontal',
        themeMode: modal.querySelector('input[name="themeMode"]:checked')?.value || 'auto',
        primaryColor: primaryColor,
        backgroundColor: backgroundColor,
        isBackgroundCustom: isBackgroundCustom,
        customTextColor: customTextColor,
        isTextCustom: isTextCustom,
        fontSize: parseInt(modal.querySelector('#fontSizeLabel')?.textContent) || 100,
        borderRadius: parseInt(modal.querySelector('#borderRadiusSlider')?.value) || 8,
        contentDensity: parseInt(modal.querySelector('#densitySlider')?.value) || 3,
        panelOrder: panelOrder,
        panelVisibility: panelVisibility,
        showBlacklistUsageWarning: true,
        disableForcedBackupOnImport: false
    };
}


function updatePreviewSettingsFromModal() {
    const settings = getSettingsFromModal();
    if (settings) {
        currentPreviewSettings = { ...settings };
        console.log("Updated currentPreviewSettings from modal:", currentPreviewSettings);
    }
}


async function deleteAlgorithm(algorithmId, section) {
    if (section === 'main') {
        console.warn("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å 'main' –∞–ª–≥–æ—Ä–∏—Ç–º —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é deleteAlgorithm.");
        showNotification("–ì–ª–∞–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω.", "warning");
        return Promise.resolve();
    }

    if (!algorithms || !algorithms[section] || !Array.isArray(algorithms[section])) {
        console.error(`deleteAlgorithm: –°–µ–∫—Ü–∏—è ${section} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –≤ 'algorithms'.`);
        showNotification(`–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª "${getSectionName(section)}" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞.`, "error");
        return Promise.reject(new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ–∫—Ü–∏—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤: ${section}`));
    }

    const indexToDelete = algorithms[section].findIndex(a => String(a?.id) === String(algorithmId));

    if (indexToDelete === -1) {
        console.error(`deleteAlgorithm: –ê–ª–≥–æ—Ä–∏—Ç–º —Å ID ${algorithmId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ü–∏–∏ ${section}.`);
        const algoCard = document.querySelector(`#${section}Algorithms .algorithm-card[data-id="${algorithmId}"]`);
        if (algoCard) {
            algoCard.remove();
            console.log(`–£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ${algorithmId} –∏–∑ DOM, —Ç.–∫. –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.`);
        }
        showNotification("–û—à–∏–±–∫–∞: –ê–ª–≥–æ—Ä–∏—Ç–º —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", "warning");
        return Promise.resolve();
    }

    const algorithmToDelete = JSON.parse(JSON.stringify(algorithms[section][indexToDelete]));
    if (!algorithmToDelete.id) algorithmToDelete.id = algorithmId;

    console.log(`–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ID: ${algorithmId}, –°–µ–∫—Ü–∏—è: ${section}`);

    let transaction;
    let deleteSuccessful = false;
    try {
        if (!db) throw new Error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
        transaction = db.transaction(['algorithms', 'screenshots'], 'readwrite');
        const screenshotsStore = transaction.objectStore('screenshots');
        const algorithmsStore = transaction.objectStore('algorithms');

        console.log(`[TX Delete] –ü–æ–∏—Å–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø–æ parentId: ${algorithmId}, parentType: 'algorithm'`);
        const screenshotsToDelete = await new Promise((resolve, reject) => {
            if (!screenshotsStore.indexNames.contains('parentId')) {
                console.error("[TX Delete] –û—à–∏–±–∫–∞: –ò–Ω–¥–µ–∫—Å 'parentId' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ 'screenshots'.");
                return reject(new Error("–ò–Ω–¥–µ–∫—Å 'parentId' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."));
            }
            const index = screenshotsStore.index('parentId');
            let keyToSearch = algorithmId;

            const request = index.getAll(keyToSearch);

            request.onsuccess = e => {
                const allParentScreenshots = e.target.result || [];
                const algorithmScreenshots = allParentScreenshots.filter(s => s.parentType === 'algorithm');
                resolve(algorithmScreenshots);
            };
            request.onerror = e => {
                console.error(`[TX Delete] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É parentId=${keyToSearch}:`, e.target.error);
                reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${e.target.error?.message}`));
            };
        });

        console.log(`[TX Delete] –ù–∞–π–¥–µ–Ω–æ ${screenshotsToDelete.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Ç–∏–ø–∞ 'algorithm' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (parentId: ${algorithmId}).`);

        if (screenshotsToDelete.length > 0) {
            const deleteScreenshotPromises = screenshotsToDelete.map(screenshot => {
                return new Promise((resolve) => {
                    if (screenshot && screenshot.id !== undefined) {
                        console.log(`[TX Delete] –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ID: ${screenshot.id}`);
                        const delReq = screenshotsStore.delete(screenshot.id);
                        delReq.onsuccess = () => { console.log(`[TX Delete] –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç ID: ${screenshot.id}`); resolve(); };
                        delReq.onerror = (e) => { console.error(`[TX Delete] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ID: ${screenshot.id}`, e.target.error); resolve(); };
                    } else {
                        console.warn("[TX Delete] –ü—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:", screenshot);
                        resolve();
                    }
                });
            });
            await Promise.all(deleteScreenshotPromises);
            console.log("[TX Delete] –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.");
        } else {
            console.log("[TX Delete] –°–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        }

        algorithms[section].splice(indexToDelete, 1);
        console.log(`–ê–ª–≥–æ—Ä–∏—Ç–º ${algorithmId} —É–¥–∞–ª–µ–Ω –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ –ø–∞–º—è—Ç–∏ [${section}].`);

        const algorithmContainerToSave = { section: 'all', data: algorithms };
        console.log("[TX Delete] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'algorithms'.");
        await new Promise((resolve, reject) => {
            const putReq = algorithmsStore.put(algorithmContainerToSave);
            putReq.onsuccess = resolve;
            putReq.onerror = (e) => {
                console.error("[TX Delete] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è 'algorithms':", e.target.error);
                reject(new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è algorithms –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è ${algorithmId}: ${e.target.error?.message}`));
            };
        });
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ algorithms —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ IndexedDB –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è ${algorithmId}.`);

        deleteSuccessful = true;

        await new Promise((resolve, reject) => {
            transaction.oncomplete = () => {
                console.log("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
                resolve();
            };
            transaction.onerror = (e) => {
                console.error("–û–®–ò–ë–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞/—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:", e.target.error);
                reject(e.target.error || new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"));
            };
            transaction.onabort = (e) => {
                console.warn("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞/—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ü–†–ï–†–í–ê–ù–ê:", e.target.error);
                if (!deleteSuccessful) resolve();
                else reject(e.target.error || new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞"));
            };
        });

    } catch (error) {
        console.error(`–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ${algorithmId} –∏–∑ —Å–µ–∫—Ü–∏–∏ ${section}:`, error);
        if (transaction && transaction.readyState !== 'done' && transaction.abort) {
            try { console.log("–ü–æ–ø—ã—Ç–∫–∞ —è–≤–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é..."); transaction.abort(); } catch (e) { console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —è–≤–Ω–æ–π –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", e); }
        }
        deleteSuccessful = false;
        if (algorithmToDelete && algorithms?.[section] && !algorithms[section].find(a => String(a?.id) === String(algorithmId))) {
            algorithms[section].splice(indexToDelete, 0, algorithmToDelete);
            console.warn(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç–º ${algorithmId} –≤ –ø–∞–º—è—Ç–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è.`);
            if (typeof renderAlgorithmCards === 'function') {
                renderAlgorithmCards(section);
            }
        }
        showNotification(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: ${error.message || error}`, "error");
        return Promise.reject(error);
    }

    if (deleteSuccessful) {
        if (typeof updateSearchIndex === 'function' && algorithmToDelete?.id) {
            console.log(`–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (delete) –¥–ª—è ID: ${algorithmToDelete.id}`);
            updateSearchIndex('algorithms', algorithmToDelete.id, algorithmToDelete, 'delete')
                .then(() => console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (—É–¥–∞–ª–µ–Ω–∏–µ) –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è ${algorithmToDelete.id}`))
                .catch(indexError => console.error(`–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ${algorithmToDelete.id}:`, indexError));
        } else { console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ - —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."); }

        if (typeof renderAlgorithmCards === 'function') {
            console.log(`–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è —Å–µ–∫—Ü–∏–∏ ${section}...`);
            renderAlgorithmCards(section);
        } else { console.warn("–§—É–Ω–∫—Ü–∏—è renderAlgorithmCards –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, UI –º–æ–∂–µ—Ç –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è."); }

        showNotification("–ê–ª–≥–æ—Ä–∏—Ç–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
        return Promise.resolve();
    } else {
        console.error(`–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ${algorithmId} –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –±–µ–∑ —É—Å–ø–µ—Ö–∞, –Ω–æ –∏ –±–µ–∑ —è–≤–Ω–æ–π –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.`);
        return Promise.reject(new Error("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"));
    }
}


const newClickHandler = async (event) => {
    const button = event.currentTarget;
    const algorithmModal = button.closest('#algorithmModal');

    if (!algorithmModal) {
        console.error("handleDeleteAlgorithmClick: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ #algorithmModal.");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "error");
        return;
    }

    const algorithmIdToDelete = algorithmModal.dataset.currentAlgorithmId;
    const sectionToDelete = algorithmModal.dataset.currentSection;

    if (!algorithmIdToDelete || !sectionToDelete) {
        console.error("handleDeleteAlgorithmClick: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å algorithmId –∏–ª–∏ section –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤.");
        showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "error");
        return;
    }

    if (sectionToDelete === 'main') {
        showNotification("–ì–ª–∞–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è.", "warning");
        return;
    }

    const modalTitleElement = document.getElementById('modalTitle');
    const algorithmTitle = modalTitleElement ? modalTitleElement.textContent : `–∞–ª–≥–æ—Ä–∏—Ç–º —Å ID ${algorithmIdToDelete}`;

    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º "${algorithmTitle}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`)) {

        algorithmModal.classList.add('hidden');
        console.log(`[newClickHandler] Modal #${algorithmModal.id} —Å–∫—Ä—ã—Ç–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`);

        console.log(`–ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ID: ${algorithmIdToDelete} –∏–∑ —Å–µ–∫—Ü–∏–∏: ${sectionToDelete}`);
        try {
            if (typeof deleteAlgorithm === 'function') {
                await deleteAlgorithm(algorithmIdToDelete, sectionToDelete);
            } else {
                console.error("handleDeleteAlgorithmClick: –§—É–Ω–∫—Ü–∏—è deleteAlgorithm –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                throw new Error("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ deleteAlgorithm –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏:`, error);
            showNotification("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞.", "error");
        }
    } else {
        console.log("–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
    }
};

deleteAlgorithmBtn.addEventListener('click', newClickHandler);
deleteAlgorithmBtn._clickHandler = newClickHandler;
console.log("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è deleteAlgorithmBtn –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤.");

const triggerSelectors = [
    '#editMainBtn', '#editAlgorithmBtn', '#deleteAlgorithmBtn',
    '#addProgramAlgorithmBtn', '#addSkziAlgorithmBtn', '#addWebRegAlgorithmBtn',
    '#customizeUIBtn', '#addBookmarkBtn', '#addLinkBtn', '#addReglamentBtn', '#addExtLinkBtn',
    '#organizeBookmarksBtn',
    '#exportDataBtn', '#importDataBtn', '#themeToggle', '#noInnLink',
    '.algorithm-card', '.reglament-category', '.edit-bookmark', '.delete-bookmark',
    '.edit-link', '.delete-link', '.edit-ext-link', '.delete-ext-link',
    '#editReglamentBtn', '#deleteReglamentBtn', 'button[id*="ModalBtn"]',
    'button[class*="edit-"]', 'button[class*="delete-"]', 'button[data-action]',
    '#addStepBtn', '#saveAlgorithmBtn', '#addNewStepBtn', '#saveNewAlgorithmBtn',
    '#folderForm button[type="submit"]', '#bookmarkForm button[type="submit"]',
    '#linkForm button[type="submit"]', '#reglamentForm button[type="submit"]',
    '#extLinkForm button[type="submit"]', '#editReglamentForm button[type="submit"]',
].join(', ');


document.addEventListener('click', (event) => {
    const visibleModals = getVisibleModals();
    if (!visibleModals.length) {
        return;
    }

    const topmostModal = getTopmostModal(visibleModals);
    if (!topmostModal) {
        return;
    }

    if (event.target === topmostModal) {
        const nonClosableModals = [
            'customizeUIModal',
            'bookmarkModal',
            'extLinkModal',
            'foldersModal',
            'bookmarkDetailModal',
            'reglamentModal',
            'blacklistEntryModal',
            'blacklistDetailModal'
        ];

        if (nonClosableModals.includes(topmostModal.id)) {
            console.log(`[Global Click Handler] Click on overlay for modal "${topmostModal.id}" detected. Closing is PREVENTED for this modal type.`);

            const innerContainer = topmostModal.querySelector('.modal-inner-container, .bg-white.dark\\:bg-gray-800');
            if (innerContainer) {
                innerContainer.classList.add('shake-animation');
                setTimeout(() => innerContainer.classList.remove('shake-animation'), 500);
            }
            return;
        }

        console.log(`[Global Click Handler] Closing modal "${topmostModal.id}" due to click on overlay.`);

        if (topmostModal.id === 'editModal' || topmostModal.id === 'addModal') {
            if (typeof requestCloseModal === 'function') {
                requestCloseModal(topmostModal);
            } else {
                console.warn('requestCloseModal function not found, hiding modal directly.');
                topmostModal.classList.add('hidden');
                if (typeof removeEscapeHandler === 'function') {
                    removeEscapeHandler(topmostModal);
                }
            }
        } else if (topmostModal.id === 'reglamentDetailModal' ||
            topmostModal.id === 'screenshotViewerModal' ||
            topmostModal.id === 'noInnModal' ||
            topmostModal.id === 'hotkeysModal' ||
            topmostModal.id === 'confirmClearDataModal' ||
            topmostModal.id === 'cibLinkModal') {
            topmostModal.classList.add('hidden');
            if (typeof removeEscapeHandler === 'function') {
                removeEscapeHandler(topmostModal);
            }
            if (topmostModal.id === 'screenshotViewerModal') {
                const state = topmostModal._modalState || {};
                const images = state.contentArea?.querySelectorAll('img[data-object-url]');
                images?.forEach(img => {
                    if (img.dataset.objectUrl) {
                        try { URL.revokeObjectURL(img.dataset.objectUrl); } catch (revokeError) { console.warn(`Error revoking URL on overlay close for ${topmostModal.id}:`, revokeError); }
                        delete img.dataset.objectUrl;
                    }
                });
            }
        }
        else {
            console.warn(`[Global Click Handler] Closing unhandled modal "${topmostModal.id}" on overlay click.`);
            topmostModal.classList.add('hidden');
            if (typeof removeEscapeHandler === 'function') {
                removeEscapeHandler(topmostModal);
            }
        }

        if (getVisibleModals().length === 0) {
            document.body.classList.remove('modal-open');
            if (!document.querySelector('div.fixed.inset-0.bg-black.bg-opacity-50:not(.hidden)')) {
                document.body.classList.remove('overflow-hidden');
            }
        }
    }
});


function linkify(text) {
    if (!text) return '';

    const combinedPattern = /(https?:\/\/[^\s"']*[^\s"',.?!')\]}])|([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/g;

    const parts = [];
    let lastIndex = 0;

    text.replace(combinedPattern, (match, url, email, offset) => {
        if (offset > lastIndex) {
            parts.push({ type: 'text', content: text.substring(lastIndex, offset) });
        }

        if (url) {
            parts.push({ type: 'url', content: url });
        } else if (email) {
            parts.push({ type: 'email', content: email });
        }

        lastIndex = offset + match.length;
        return match;
    });

    if (lastIndex < text.length) {
        parts.push({ type: 'text', content: text.substring(lastIndex) });
    }

    if (parts.length === 0) {
        return escapeHtml(text).replace(/\n/g, '<br>');
    }

    return parts.map(part => {
        if (part.type === 'text') {
            return escapeHtml(part.content).replace(/\n/g, '<br>');
        }

        if (part.type === 'url') {
            const safeUrl = escapeHtml(part.content);
            return `<a href="${safeUrl}" target="_blank" rel="noopener noreferrer" style="color: #3b82f6; text-decoration: underline;">${safeUrl}</a>`;
        }

        if (part.type === 'email') {
            const safeEmail = escapeHtml(part.content);
            return `<a href="mailto:${safeEmail}" style="color: #3b82f6; text-decoration: underline;">${safeEmail}</a>`;
        }
        return '';
    }).join('');
}


function initFullscreenToggles() {
    console.log("[initFullscreenToggles] Initializing fullscreen toggles for static modals...");

    const attachHandler = (config) => {
        const button = document.getElementById(config.buttonId);
        const modal = document.getElementById(config.modalId);

        if (button && modal) {

            if (button._fullscreenToggleHandler) {
                button.removeEventListener('click', button._fullscreenToggleHandler);
            }

            button._fullscreenToggleHandler = () => {
                if (typeof toggleModalFullscreen === 'function') {
                    toggleModalFullscreen(
                        config.modalId,
                        config.buttonId,
                        config.classToggleConfig,
                        config.innerContainerSelector,
                        config.contentAreaSelector
                    );
                } else {
                    console.error(`toggleModalFullscreen function not found for button ${config.buttonId}`);
                    if (typeof showNotification === 'function') {
                        showNotification("–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
                    }
                }
            };
            button.addEventListener('click', button._fullscreenToggleHandler);
            console.log(`Fullscreen toggle handler attached to #${config.buttonId} for #${config.modalId}.`);
        } else {
            if (!button) console.warn(`[initFullscreenToggles] Button #${config.buttonId} not found.`);
            if (!modal) console.warn(`[initFullscreenToggles] Modal #${config.modalId} not found for button #${config.buttonId}.`);
        }
    };

    attachHandler(algorithmDetailModalConfig);
    attachHandler(editAlgorithmModalConfig);
    attachHandler(addAlgorithmModalConfig);

    console.log("[initFullscreenToggles] Finished attaching handlers for static modals.");
}


function toggleModalFullscreen(modalId, buttonId, classToggleConfig, innerContainerSelector, contentAreaSelector) {
    const modalElement = document.getElementById(modalId);
    const buttonElement = document.getElementById(buttonId);

    if (!modalElement || !buttonElement) {
        console.error(`[toggleModalFullscreen] Error: Elements not found for modalId: ${modalId} or buttonId: ${buttonId}`);
        return;
    }

    const innerContainer = modalElement.querySelector(innerContainerSelector);
    const contentArea = contentAreaSelector ? modalElement.querySelector(contentAreaSelector) : null;

    if (!innerContainer) {
        console.error(`[toggleModalFullscreen] Error: innerContainer not found using selector: "${innerContainerSelector}" within #${modalId}`);
        return;
    }
    if (contentAreaSelector && !contentArea) {
        console.warn(`[toggleModalFullscreen] Warning: contentArea not found using selector: "${contentAreaSelector}" within #${modalId}. Proceeding without it.`);
    }

    const icon = buttonElement.querySelector('i');
    const isCurrentlyFullscreen = modalElement.classList.contains('is-fullscreen');
    const shouldBeFullscreen = !isCurrentlyFullscreen;

    console.log(`Toggling fullscreen for ${modalId}. Should be fullscreen: ${shouldBeFullscreen}`);

    const classesToRemoveConfig = isCurrentlyFullscreen ? classToggleConfig.fullscreen : classToggleConfig.normal;
    const classesToAddConfig = shouldBeFullscreen ? classToggleConfig.fullscreen : classToggleConfig.normal;

    Object.entries(classesToRemoveConfig).forEach(([part, classes]) => {
        const element = part === 'modal' ? modalElement : (part === 'innerContainer' ? innerContainer : contentArea);
        if (element && classes && classes.length > 0) {
            element.classList.remove(...classes);
        }
    });

    Object.entries(classesToAddConfig).forEach(([part, classes]) => {
        const element = part === 'modal' ? modalElement : (part === 'innerContainer' ? innerContainer : contentArea);
        if (element && classes && classes.length > 0) {
            element.classList.add(...classes);
        }
    });

    modalElement.classList.toggle('is-fullscreen', shouldBeFullscreen);

    if (icon) {
        icon.classList.remove('fa-expand', 'fa-compress');
        icon.classList.add(shouldBeFullscreen ? 'fa-compress' : 'fa-expand');
    }
    buttonElement.setAttribute('title', shouldBeFullscreen ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω');

    console.log(`Fullscreen toggle complete for ${modalId}. Is fullscreen: ${shouldBeFullscreen}`);
}


async function getAllExtLinks() {
    try {
        console.log("[getAllExtLinks] –í—ã–∑–æ–≤ getAllFromIndexedDB('extLinks')...");
        const links = await getAllFromIndexedDB('extLinks');
        console.log(`[getAllExtLinks] –ü–æ–ª—É—á–µ–Ω–æ ${links?.length ?? 0} –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫.`);
        return links || [];
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ getAllExtLinks –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫:", error);
        showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤", "error");
        return [];
    }
}


async function getAllFromIndexedDBWhere(storeName, indexName, indexValue) {
    console.log(`[getAllFromIndexedDBWhere] –í—ã–∑–æ–≤ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è ${storeName} –ø–æ –∏–Ω–¥–µ–∫—Å—É ${indexName} = ${indexValue}`);
    try {
        if (typeof getAllFromIndex !== 'function') {
            console.error("getAllFromIndexedDBWhere: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è getAllFromIndex –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            throw new Error("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å getAllFromIndex –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        }
        return await getAllFromIndex(storeName, indexName, indexValue);
    } catch (error) {
        console.error(`[getAllFromIndexedDBWhere] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ getAllFromIndex –¥–ª—è ${storeName}/${indexName}/${indexValue}:`, error);
        throw error;
    }
}


function debounce(func, wait, immediate) {
    let timeout;
    return function executedFunction(...args) {
        const context = this;
        const later = function () {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
}


function forceReloadApp() {
    const confirmation = confirm(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?\n\n" +
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ (F5).\n" +
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, " +
        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–∂–µ—Å—Ç–∫—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É' –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ (–æ–±—ã—á–Ω–æ Ctrl+F5 –∏–ª–∏ Cmd+Shift+R)."
    );

    if (confirmation) {
        console.log("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
        showNotification("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", "info");
        setTimeout(() => {
            window.location.reload();
        }, 500);
    } else {
        console.log("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
    }
}


function initReloadButton() {
    const reloadBtn = document.getElementById('forceReloadBtn');
    if (reloadBtn) {
        reloadBtn.addEventListener('click', forceReloadApp);
        console.log("–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
    } else {
        console.warn("–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ #forceReloadBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
    }
}


let initialEditState = null;
let initialAddState = null;


function getCurrentEditState() {
    const editModal = document.getElementById('editModal');
    const algorithmTitleInput = document.getElementById('algorithmTitle');
    const algorithmDescriptionInput = document.getElementById('algorithmDescription');
    const editStepsContainer = document.getElementById('editSteps');

    if (!editModal || !algorithmTitleInput || !editStepsContainer) {
        console.error("getCurrentEditState: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ.");
        return null;
    }

    const section = editModal.dataset.section;
    const isMainAlgorithm = section === 'main';

    const currentTitle = algorithmTitleInput.value.trim();
    const currentDescription = (!isMainAlgorithm && algorithmDescriptionInput)
        ? algorithmDescriptionInput.value.trim()
        : undefined;

    const currentSteps = [];
    const stepDivs = editStepsContainer.querySelectorAll('.edit-step');

    stepDivs.forEach(stepDiv => {
        const titleInput = stepDiv.querySelector('.step-title');
        const descInput = stepDiv.querySelector('.step-desc');
        const exampleInput = stepDiv.querySelector('.step-example');
        const additionalInfoTextarea = stepDiv.querySelector('.step-additional-info');
        const additionalInfoPosTopCheckbox = stepDiv.querySelector('.step-additional-info-pos-top');
        const additionalInfoPosBottomCheckbox = stepDiv.querySelector('.step-additional-info-pos-bottom');
        const isCopyableCheckbox = isMainAlgorithm ? stepDiv.querySelector('.step-is-copyable') : null;
        const noInnHelpCheckbox = isMainAlgorithm ? stepDiv.querySelector('.step-no-inn-help-checkbox') : null;

        const currentStepData = {
            title: titleInput ? titleInput.value.trim() : '',
            description: descInput ? descInput.value.trim() : '',
            example: (isMainAlgorithm && exampleInput) ? exampleInput.value.trim() : (isMainAlgorithm ? '' : undefined),
            additionalInfoText: additionalInfoTextarea ? additionalInfoTextarea.value.trim() : '',
            additionalInfoShowTop: additionalInfoPosTopCheckbox ? additionalInfoPosTopCheckbox.checked : false,
            additionalInfoShowBottom: additionalInfoPosBottomCheckbox ? additionalInfoPosBottomCheckbox.checked : false
        };

        if (isMainAlgorithm) {
            if (isCopyableCheckbox) {
                currentStepData.isCopyable = isCopyableCheckbox.checked;
            } else {
                currentStepData.isCopyable = false;
            }
            if (noInnHelpCheckbox) {
                currentStepData.showNoInnHelp = noInnHelpCheckbox.checked;
            } else {
                currentStepData.showNoInnHelp = false;
            }
        }

        if (stepDiv.dataset.stepType) {
            currentStepData.type = stepDiv.dataset.stepType;
        }

        if (!isMainAlgorithm) {
            const existingIdsStr = stepDiv.dataset.existingScreenshotIds || '';
            const deletedIdsStr = stepDiv.dataset.screenshotsToDelete || '';
            const deletedIdsSet = new Set(deletedIdsStr.split(',').filter(Boolean).map(s => String(s.trim())));

            currentStepData.existingScreenshotIds = existingIdsStr.split(',')
                .filter(Boolean)
                .map(s => String(s.trim()))
                .filter(id => !deletedIdsSet.has(id))
                .join(',');
            currentStepData.tempScreenshotsCount = (stepDiv._tempScreenshotBlobs && Array.isArray(stepDiv._tempScreenshotBlobs))
                ? stepDiv._tempScreenshotBlobs.length
                : 0;
            currentStepData.deletedScreenshotIds = deletedIdsStr;
        } else {
            delete currentStepData.existingScreenshotIds;
            delete currentStepData.tempScreenshotsCount;
            delete currentStepData.deletedScreenshotIds;
        }
        currentSteps.push(currentStepData);
    });

    const currentState = {
        title: currentTitle,
    };
    if (!isMainAlgorithm) {
        currentState.description = currentDescription !== undefined ? currentDescription : '';
    }
    currentState.steps = Array.isArray(currentSteps) ? currentSteps : [];

    console.log("–ü–æ–ª—É—á–µ–Ω–æ –¢–ï–ö–£–©–ï–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (editModal):", JSON.parse(JSON.stringify(currentState)));
    return currentState;
}


function getCurrentAddState() {
    const newAlgorithmTitle = document.getElementById('newAlgorithmTitle');
    const newAlgorithmDesc = document.getElementById('newAlgorithmDesc');
    const newStepsContainer = document.getElementById('newSteps');

    if (!newAlgorithmTitle || !newAlgorithmDesc || !newStepsContainer) {
        console.error("getCurrentAddState: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.");
        return null;
    }

    const currentTitle = newAlgorithmTitle.value.trim();
    const currentDescription = newAlgorithmDesc.value.trim();
    const currentSteps = [];

    const stepDivs = newStepsContainer.querySelectorAll('.edit-step');

    stepDivs.forEach(stepDiv => {
        const titleInput = stepDiv.querySelector('.step-title');
        const descInput = stepDiv.querySelector('.step-desc');
        const additionalInfoTextarea = stepDiv.querySelector('.step-additional-info');
        const additionalInfoPosTopCheckbox = stepDiv.querySelector('.step-additional-info-pos-top');
        const additionalInfoPosBottomCheckbox = stepDiv.querySelector('.step-additional-info-pos-bottom');

        const stepData = {
            title: titleInput ? titleInput.value.trim() : '',
            description: descInput ? descInput.value.trim() : '',
            additionalInfoText: additionalInfoTextarea ? additionalInfoTextarea.value.trim() : '',
            additionalInfoShowTop: additionalInfoPosTopCheckbox ? additionalInfoPosTopCheckbox.checked : false,
            additionalInfoShowBottom: additionalInfoPosBottomCheckbox ? additionalInfoPosBottomCheckbox.checked : false,
            existingScreenshotIds: stepDiv.dataset.existingScreenshotIds || '',
            tempScreenshotsCount: (stepDiv._tempScreenshotBlobs && Array.isArray(stepDiv._tempScreenshotBlobs))
                ? stepDiv._tempScreenshotBlobs.length
                : 0,
            deletedScreenshotIds: stepDiv.dataset.screenshotsToDelete || '',
            ...(stepDiv.dataset.stepType && { type: stepDiv.dataset.stepType })
        };
        currentSteps.push(stepData);
    });

    const currentState = {
        title: currentTitle,
        description: currentDescription,
        steps: currentSteps
    };
    console.log("–ü–æ–ª—É—á–µ–Ω–æ –¢–ï–ö–£–©–ï–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (addModal):", JSON.parse(JSON.stringify(currentState)));
    return currentState;
}


function hasChanges(modalType) {
    let initialState;
    let currentState;

    if (modalType === 'edit') {
        initialState = initialEditState;
        currentState = getCurrentEditState();
    } else if (modalType === 'add') {
        initialState = initialAddState;
        currentState = getCurrentAddState();
    } else {
        console.warn("hasChanges: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:", modalType);
        return false;
    }

    if (initialState === null) {
        console.error(`hasChanges (${modalType}): –ù–ê–ß–ê–õ–¨–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ (initialState) —Ä–∞–≤–Ω–æ null! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.`);
        console.log(`hasChanges (${modalType}): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (currentState):`, currentState ? JSON.parse(JSON.stringify(currentState)) : currentState);
        return true;
    }
    if (currentState === null) {
        console.error(`hasChanges (${modalType}): –¢–ï–ö–£–©–ï–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ (currentState) —Ä–∞–≤–Ω–æ null! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.`);
        console.log(`hasChanges (${modalType}): –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (initialState):`, JSON.parse(JSON.stringify(initialState)));
        return true;
    }

    const areEquivalent = deepEqual(initialState, currentState);

    const changed = !areEquivalent;

    if (changed) {
        console.log(`hasChanges (${modalType}): –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ deepEqual.`);
        console.log("Initial State:", JSON.stringify(initialState, null, 2));
        console.log("Current State:", JSON.stringify(currentState, null, 2));
    } else {
        console.log(`hasChanges (${modalType}): –ò–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ deepEqual.`);
    }

    return changed;
}


function captureInitialEditState(algorithm, section) {
    if (!algorithm || !section) {
        initialEditState = null;
        console.warn("captureInitialEditState: –ê–ª–≥–æ—Ä–∏—Ç–º –∏–ª–∏ —Å–µ–∫—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.");
        return;
    }

    try {
        const isMainAlgorithm = section === 'main';
        const algorithmCopy = algorithm;

        const initialData = {
            title: algorithmCopy.title || '',
        };

        if (!isMainAlgorithm) {
            initialData.description = algorithmCopy.description || '';
        }

        if (Array.isArray(algorithmCopy.steps)) {
            initialData.steps = algorithmCopy.steps.map(step => {
                if (!step) return null;

                const initialStep = {
                    title: step.title || '',
                    description: step.description || '',
                    example: formatExampleForTextarea(step.example),
                    additionalInfoText: step.additionalInfoText || '',
                    additionalInfoShowTop: step.additionalInfoShowTop || false,
                    additionalInfoShowBottom: step.additionalInfoShowBottom || false,
                    ...(step.type && { type: step.type })
                };

                if (isMainAlgorithm) {
                    initialStep.isCopyable = step.isCopyable || false;
                    initialStep.showNoInnHelp = step.showNoInnHelp || false;
                }

                if (!isMainAlgorithm) {
                    initialStep.existingScreenshotIds = (Array.isArray(step.screenshotIds) ? step.screenshotIds.filter(id => id !== null && id !== undefined).join(',') : '');
                    initialStep.tempScreenshotsCount = 0;
                    initialStep.deletedScreenshotIds = '';
                }
                return initialStep;
            }).filter(step => step !== null);
        } else {
            console.warn(`captureInitialEditState: –ü–æ–ª–µ steps —É –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ${algorithm.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.`);
            initialData.steps = [];
        }

        initialEditState = JSON.parse(JSON.stringify(initialData));
        console.log("–ó–∞—Ö–≤–∞—á–µ–Ω–æ –ù–ê–ß–ê–õ–¨–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å —É—á–µ—Ç–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤):", JSON.parse(JSON.stringify(initialEditState)));

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
        initialEditState = null;
    }
}


function captureInitialAddState() {
    const newAlgorithmTitle = document.getElementById('newAlgorithmTitle');
    const newAlgorithmDesc = document.getElementById('newAlgorithmDesc');
    const newStepsContainer = document.getElementById('newSteps');
    const initialTitle = newAlgorithmTitle ? newAlgorithmTitle.value.trim() : '';
    const initialDescription = newAlgorithmDesc ? newAlgorithmDesc.value.trim() : '';
    const initialSteps = [];

    const stepDivs = newStepsContainer.querySelectorAll('.edit-step');
    stepDivs.forEach(stepDiv => {
        const titleInput = stepDiv.querySelector('.step-title');
        const descInput = stepDiv.querySelector('.step-desc');
        const additionalInfoTextarea = stepDiv.querySelector('.step-additional-info');
        const additionalInfoPosTopCheckbox = stepDiv.querySelector('.step-additional-info-pos-top');
        const additionalInfoPosBottomCheckbox = stepDiv.querySelector('.step-additional-info-pos-bottom');

        const stepData = {
            title: titleInput ? titleInput.value.trim() : '',
            description: descInput ? descInput.value.trim() : '',
            additionalInfoText: additionalInfoTextarea ? additionalInfoTextarea.value.trim() : '',
            additionalInfoShowTop: additionalInfoPosTopCheckbox ? additionalInfoPosTopCheckbox.checked : false,
            additionalInfoShowBottom: additionalInfoPosBottomCheckbox ? additionalInfoPosBottomCheckbox.checked : false,
            existingScreenshotIds: '',
            tempScreenshotsCount: (stepDiv._tempScreenshotBlobs && Array.isArray(stepDiv._tempScreenshotBlobs))
                ? stepDiv._tempScreenshotBlobs.length
                : 0,
            deletedScreenshotIds: '',
            ...(stepDiv.dataset.stepType && { type: stepDiv.dataset.stepType })
        };
        initialSteps.push(stepData);
    });

    initialAddState = {
        title: initialTitle,
        description: initialDescription,
        steps: initialSteps
    };
    console.log("–ó–∞—Ö–≤–∞—á–µ–Ω–æ –ù–ê–ß–ê–õ–¨–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (addModal):", JSON.parse(JSON.stringify(initialAddState)));
}


function showNoInnModal() {
    let modal = document.getElementById('noInnModal');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'noInnModal';
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 z-[60] p-4 flex items-center justify-center hidden';
        modal.innerHTML = `
             <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">
                 <div class="p-6">
                     <div class="flex justify-between items-center mb-4">
                         <h2 class="text-xl font-bold">–ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–Ω–∞–µ—Ç –ò–ù–ù</h2>
                         <button class="close-modal text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" aria-label="–ó–∞–∫—Ä—ã—Ç—å"><i class="fas fa-times text-xl"></i></button>
                     </div>
                     <div class="space-y-3 text-sm">
                         <p>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:</p>
                         <ol class="list-decimal ml-5 space-y-1.5">
                             <li>–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</li>
                             <li>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å</li>
                             <li>–ö–ü–ü –∏–ª–∏ –û–ì–†–ù</li>
                             <li>–§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è</li>
                             <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ <a href="https://egrul.nalog.ru/" target="_blank" rel="noopener noreferrer" class="text-primary hover:underline">—Å–µ—Ä–≤–∏—Å –§–ù–°</a></li>
                         </ol>
                         <p class="mt-3 text-xs italic text-gray-600 dark:text-gray-400">–¢—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ò–ù–ù.</p>
                     </div>
                     <div class="mt-6 flex justify-end">
                         <button class="close-modal px-4 py-2 bg-primary hover:bg-secondary text-white rounded-md transition">–ü–æ–Ω—è—Ç–Ω–æ</button>
                     </div>
                 </div>
             </div>`;
        document.body.appendChild(modal);

        modal.addEventListener('click', (e) => {
            if (e.target === modal || e.target.closest('.close-modal')) {
                modal.classList.add('hidden');
                removeEscapeHandler(modal);
                if (getVisibleModals().length === 0) {
                    document.body.classList.remove('overflow-hidden');
                }
            }
        });
    }
    modal.classList.remove('hidden');
    document.body.classList.add('overflow-hidden');
    addEscapeHandler(modal);
}


async function loadEmployeeExtension() {
    const displaySpan = document.getElementById('employeeExtensionDisplay');
    if (!displaySpan) return;

    let extension = '';
    try {
        if (db) {
            const pref = await getFromIndexedDB('preferences', 'employeeExtension');
            extension = pref?.value || '';
        } else {
            extension = localStorage.getItem('employeeExtension') || '';
            console.warn("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–±–∞–≤–æ—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏–∑ localStorage (DB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–±–∞–≤–æ—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞:", error);
        extension = localStorage.getItem('employeeExtension') || '';
    }
    updateExtensionDisplay(extension);
}


async function saveEmployeeExtension(extensionValue) {
    const valueToSave = extensionValue.trim().replace(/\D/g, '');

    try {
        if (db) {
            await saveToIndexedDB('preferences', { id: 'employeeExtension', value: valueToSave });
            console.log("–î–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ IndexedDB:", valueToSave);
        } else {
            localStorage.setItem('employeeExtension', valueToSave);
            console.warn("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–æ—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ localStorage (DB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)");
        }
        updateExtensionDisplay(valueToSave);
        return true;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–±–∞–≤–æ—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞:", error);
        showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä", "error");
        return false;
    }
}


function updateExtensionDisplay(extensionValue) {
    const displaySpan = document.getElementById('employeeExtensionDisplay');
    if (!displaySpan) return;

    if (extensionValue) {
        displaySpan.textContent = extensionValue;
        displaySpan.classList.remove('italic', 'text-gray-500', 'dark:text-gray-400');
    } else {
        displaySpan.textContent = '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –¥–æ–±–∞–≤–æ—á–Ω—ã–π';
        displaySpan.classList.add('italic', 'text-gray-500', 'dark:text-gray-400');
    }
}


function setupExtensionFieldListeners() {
    const displaySpan = document.getElementById('employeeExtensionDisplay');
    const inputField = document.getElementById('employeeExtensionInput');

    if (!(displaySpan instanceof HTMLElement) || !(inputField instanceof HTMLInputElement)) {
        if (typeof showNotification === 'function') {
            showNotification("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—è –¥–æ–±. –Ω–æ–º–µ—Ä–∞ (—ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã).", "error", { important: true });
        }
        return;
    }

    const removeListenerSafe = (element, eventName, handlerRefName) => {
        if (element && element[handlerRefName]) {
            element.removeEventListener(eventName, element[handlerRefName]);
            delete element[handlerRefName];
        }
    };

    removeListenerSafe(displaySpan, 'click', '_clickHandlerInstance');
    removeListenerSafe(inputField, 'blur', '_blurHandlerInstance');
    removeListenerSafe(inputField, 'keydown', '_keydownHandlerInstance');
    removeListenerSafe(inputField, 'input', '_inputHandlerInstance');

    const updateDisplayFromGlobalState = () => {
        const extensionValue = userPreferences?.employeeExtension || '';
        updateExtensionDisplay(extensionValue);
    };

    const clickHandler = () => {
        if (!displaySpan || !inputField) return;
        inputField.value = userPreferences?.employeeExtension || '';
        displaySpan.classList.add('hidden');
        inputField.classList.remove('hidden');
        requestAnimationFrame(() => {
            inputField.focus();
            inputField.select();
        });
    };
    displaySpan.addEventListener('click', clickHandler);
    displaySpan._clickHandlerInstance = clickHandler;

    const finishEditing = async (saveChanges = true) => {
        if (!(inputField instanceof HTMLInputElement) || inputField.classList.contains('hidden')) return;

        if (saveChanges) {
            const newValue = inputField.value.trim().replace(/\D/g, '');
            userPreferences.employeeExtension = newValue;
            await saveUserPreferences();
        }

        updateDisplayFromGlobalState();
        inputField.classList.add('hidden');
        if (displaySpan instanceof HTMLElement) {
            displaySpan.classList.remove('hidden');
        }
    };

    const blurHandler = () => {
        setTimeout(async () => {
            if (inputField instanceof HTMLInputElement && !inputField.classList.contains('hidden') && document.activeElement !== inputField) {
                await finishEditing(true);
            }
        }, 150);
    };
    inputField.addEventListener('blur', blurHandler);
    inputField._blurHandlerInstance = blurHandler;

    const keydownHandler = async (event) => {
        if (event.key === 'Enter') {
            event.preventDefault();
            await finishEditing(true);
        } else if (event.key === 'Escape') {
            event.preventDefault();
            await finishEditing(false);
        }
    };
    inputField.addEventListener('keydown', keydownHandler);
    inputField._keydownHandlerInstance = keydownHandler;

    const inputHandler = () => {
        const originalValue = inputField.value;
        const numericValue = originalValue.replace(/\D/g, '');
        if (originalValue !== numericValue) {
            inputField.value = numericValue;
        }
    };
    inputField.addEventListener('input', inputHandler);
    inputField._inputHandlerInstance = inputHandler;

    updateDisplayFromGlobalState();
}


function setupClearButton(inputId, buttonId, actionCallback) {
    const input = document.getElementById(inputId);
    const button = document.getElementById(buttonId);

    if (!input || !button) {


        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏: –ø–æ–ª–µ –≤–≤–æ–¥–∞ (${inputId}) –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ (${buttonId}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
        return;
    }

    const toggleButtonVisibility = () => {

        if (input && document.body.contains(input)) {
            button.classList.toggle('hidden', input.value.length === 0);
        } else {

            button.classList.add('hidden');
            console.warn(`–ü–æ–ª–µ –≤–≤–æ–¥–∞ ${inputId} –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ DOM. –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ${buttonId} —Å–∫—Ä—ã—Ç–∞.`);
        }
    };


    if (input._clearButtonInputHandler) {
        input.removeEventListener('input', input._clearButtonInputHandler);
    }
    if (button._clearButtonClickHandler) {
        button.removeEventListener('click', button._clearButtonClickHandler);
    }

    input._clearButtonInputHandler = toggleButtonVisibility;
    input.addEventListener('input', toggleButtonVisibility);


    toggleButtonVisibility();

    button._clearButtonClickHandler = () => {

        if (input && document.body.contains(input)) {
            input.value = '';
            button.classList.add('hidden');
            input.focus();

            if (typeof actionCallback === 'function') {
                try {
                    actionCallback();
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ actionCallback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è ${inputId}:`, error);
                }
            }

            const event = new Event('input', { bubbles: true, cancelable: true });
            input.dispatchEvent(event);
        } else {
            console.warn(`–ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ ${inputId} —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ${buttonId}.`);
        }
    };
    button.addEventListener('click', button._clearButtonClickHandler);

    console.log(`–ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ '${inputId}' –∏ –∫–Ω–æ–ø–∫–∏ '${buttonId}'.`);
}


function setupHotkeys() {
    document.removeEventListener('keydown', handleGlobalHotkey, true);
    document.removeEventListener('keydown', handleGlobalHotkey, false);

    document.addEventListener('keydown', handleGlobalHotkey, false);
    console.log("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ñ–∞–∑–∞ –≤—Å–ø–ª—ã—Ç–∏—è).");
}


function toggleActiveSectionView() {
    if (typeof currentSection === 'undefined' || !currentSection) {
        console.warn("toggleActiveSectionView: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è currentSection –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞.");
        showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞.", "warning");
        return;
    }

    let containerId;
    let sectionIdentifierForPrefs;

    switch (currentSection) {
        case 'main':
            showNotification("–ì–ª–∞–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –∏–º–µ–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞.", "info");
            return;
        case 'program': containerId = 'programAlgorithms'; break;
        case 'skzi': containerId = 'skziAlgorithms'; break;
        case 'webReg': containerId = 'webRegAlgorithms'; break;
        case 'lk1c': containerId = 'lk1cAlgorithms'; break;
        case 'links': containerId = 'linksContainer'; break;
        case 'extLinks': containerId = 'extLinksContainer'; break;
        case 'reglaments':
            const reglamentsListDiv = document.getElementById('reglamentsList');
            if (!reglamentsListDiv || reglamentsListDiv.classList.contains('hidden')) {
                showNotification("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.", "info");
                return;
            }
            containerId = 'reglamentsContainer';
            break;
        case 'bookmarks': containerId = 'bookmarksContainer'; break;
        default:
            console.warn(`toggleActiveSectionView: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è '${currentSection}'.`);
            showNotification("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", "warning");
            return;
    }
    sectionIdentifierForPrefs = containerId;

    const container = document.getElementById(containerId);
    if (!container) {
        console.warn(`toggleActiveSectionView: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #${containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ–∫—Ü–∏–∏ ${currentSection}.`);
        showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞.", "error");
        return;
    }

    const currentView = viewPreferences[sectionIdentifierForPrefs] || container.dataset.defaultView || 'cards';
    const nextView = currentView === 'cards' ? 'list' : 'cards';

    console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞ –¥–ª—è ${sectionIdentifierForPrefs} —Å ${currentView} –Ω–∞ ${nextView}`);

    if (typeof applyView === 'function' && typeof saveViewPreference === 'function') {
        applyView(container, nextView);
        saveViewPreference(sectionIdentifierForPrefs, nextView);
        showNotification(`–í–∏–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: ${nextView === 'list' ? '–°–ø–∏—Å–æ–∫' : '–ü–ª–∏—Ç–∫–∏'}`, "info", 1500);
    } else {
        console.error("toggleActiveSectionView: –§—É–Ω–∫—Ü–∏–∏ applyView –∏–ª–∏ saveViewPreference –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        showNotification("–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
    }
}


function handleNoInnLinkEvent(event) {
    const link = event.target.closest('a[id^="noInnLink_"]');
    if (link) {
        event.preventDefault();
        if (typeof showNoInnModal === 'function') {
            showNoInnModal();
        } else {
            console.error("–§—É–Ω–∫—Ü–∏—è showNoInnModal –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞");
        }
    }
}


function navigateBackWithinApp() {
    console.log("[App Navigate Back] –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");

    const reglamentsListDiv = document.getElementById('reglamentsList');
    const categoryGrid = document.getElementById('reglamentCategoryGrid');
    const backToCategoriesBtn = document.getElementById('backToCategories');

    if (reglamentsListDiv && !reglamentsListDiv.classList.contains('hidden') && backToCategoriesBtn) {
        console.log("[App Navigate Back]   > –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤. –ò–º–∏—Ç–∞—Ü–∏—è –∫–ª–∏–∫–∞ '–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'.");
        backToCategoriesBtn.click();
        return true;
    }


    console.log("[App Navigate Back]   > –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥.");
    showNotification("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è '–Ω–∞–∑–∞–¥' –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞.", "info");
    return false;
}


function handleGlobalHotkey(event) {
    const code = event.code;
    const ctrlOrMeta = event.ctrlKey || event.metaKey;
    const shift = event.shiftKey;
    const alt = event.altKey;

    const activeElement = document.activeElement;
    const isInputFocused = activeElement && (
        activeElement.tagName === 'INPUT' ||
        activeElement.tagName === 'TEXTAREA' ||
        activeElement.isContentEditable
    );

    const clientNotes = document.getElementById('clientNotes');
    const isClientNotesVisible = clientNotes && clientNotes.offsetParent !== null;

    if (alt && !ctrlOrMeta && !shift && isClientNotesVisible && (event.key === '=' || event.key === '+' || event.key === '-' || event.code === 'NumpadAdd' || event.code === 'NumpadSubtract')) {
        event.preventDefault();
        event.stopPropagation();

        if (!userPreferences) {
            console.warn('[Hotkey] userPreferences –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞.');
            return;
        }

        const isIncrease = event.key === '=' || event.key === '+' || event.code === 'NumpadAdd';
        const currentSize = userPreferences.clientNotesFontSize || 100;
        let newSize;

        if (isIncrease) {
            newSize = Math.min(CLIENT_NOTES_MAX_FONT_SIZE, currentSize + CLIENT_NOTES_FONT_SIZE_STEP);
        } else {
            newSize = Math.max(CLIENT_NOTES_MIN_FONT_SIZE, currentSize - CLIENT_NOTES_FONT_SIZE_STEP);
        }

        if (newSize !== currentSize) {
            userPreferences.clientNotesFontSize = newSize;
            applyClientNotesFontSize();
            saveUserPreferences().catch(err => console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞:", err));
        }
        return;
    }

    if (alt && !ctrlOrMeta && !shift) {
        switch (event.code) {
            case 'KeyS': // Alt + S
                console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Alt + S (–°–æ—Ö—Ä–∞–Ω–∏—Ç—å)");
                event.preventDefault();
                event.stopPropagation();
                const topModalForSave = getTopmostModal(getVisibleModals());
                if (topModalForSave) {
                    console.log(`[Hotkey Alt+S] –ù–∞–π–¥–µ–Ω–æ –≤–µ—Ä—Ö–Ω–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: #${topModalForSave.id}`);
                    const SAVE_BUTTON_SELECTORS = [
                        '#saveAlgorithmBtn', '#saveNewAlgorithmBtn', '#saveBookmarkBtn',
                        '#saveCibLinkBtn', '#saveReglamentBtn', '#saveUISettingsBtn',
                        '#saveExtLinkBtn', '#saveBlacklistEntryBtn'
                    ];

                    for (const selector of SAVE_BUTTON_SELECTORS) {
                        const saveBtn = topModalForSave.querySelector(selector);
                        if (saveBtn && !saveBtn.disabled && (saveBtn.offsetWidth > 0 || saveBtn.offsetHeight > 0 || saveBtn.getClientRects().length > 0)) {
                            console.log(`[Hotkey Alt+S] –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${selector}. –í—ã–∑–æ–≤ click().`);
                            saveBtn.click();
                            return;
                        }
                    }
                    console.log(`[Hotkey Alt+S] –í –æ–∫–Ω–µ #${topModalForSave.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.`);
                } else {
                    console.log(`[Hotkey Alt+S] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.`);
                }
                return;

            case 'KeyK': // Alt + K
                console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Alt + K (–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)");
                event.preventDefault();
                event.stopPropagation();
                const topModalForFavorite = getTopmostModal(getVisibleModals());
                if (topModalForFavorite) {
                    const favButton = topModalForFavorite.querySelector('.toggle-favorite-btn');
                    if (favButton && (favButton.offsetWidth > 0 || favButton.offsetHeight > 0 || favButton.getClientRects().length > 0)) {
                        console.log(`[Hotkey Alt+K] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –≤ –æ–∫–Ω–µ #${topModalForFavorite.id}. –í—ã–∑–æ–≤ click().`);
                        favButton.click();
                        return;
                    } else {
                        console.log(`[Hotkey Alt+K] –ö–Ω–æ–ø–∫–∞ "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–∏–¥–∏–º–∞ –≤ –æ–∫–Ω–µ #${topModalForFavorite.id}.`);
                    }
                } else {
                    console.log(`[Hotkey Alt+K] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.`);
                }
                return;
        }
    }

    if (event.key === 'Escape') {
        const activeSearchInputIds = new Set([
            'searchInput', 'bookmarkSearchInput', 'linkSearchInput',
            'extLinkSearchInput', 'blacklistSearchInput'
        ]);

        if (activeElement && activeSearchInputIds.has(activeElement.id)) {
            console.log(`[GlobalHotkey Esc] –û–±—Ä–∞–±–æ—Ç–∫–∞ Escape –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –ø–æ–ª—è: ${activeElement.id}`);
            activeElement.value = '';
            activeElement.blur();
            activeElement.dispatchEvent(new Event('input', { bubbles: true, cancelable: true }));

            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
            console.log(`[GlobalHotkey Esc] –î–ª—è –ø–æ–ª—è ${activeElement.id} –∑–Ω–∞—á–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ, —Ñ–æ–∫—É—Å —É–±—Ä–∞–Ω, —Å–æ–±—ã—Ç–∏–µ 'input' –≤—ã–∑–≤–∞–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞ Esc –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
            return;
        }
    }

    const lightbox = document.getElementById('screenshotLightbox');
    const viewerModal = document.getElementById('screenshotViewerModal');
    const algorithmModal = document.getElementById('algorithmModal');
    const bookmarkDetailModal = document.getElementById('bookmarkDetailModal');
    const reglamentDetailModal = document.getElementById('reglamentDetailModal');
    const reglamentsListDiv = document.getElementById('reglamentsList');
    const backToCategoriesBtn = document.getElementById('backToCategories');

    if (lightbox && !lightbox.classList.contains('hidden') && !isInputFocused) {
        console.log(`[GlobalHotkey] –õ–∞–π—Ç–±–æ–∫—Å –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ—Ö–≤–∞—Ç –∫–ª–∞–≤–∏—à–∏: ${event.key}`);
        switch (event.key) {
            case 'Escape':
                console.log("[GlobalHotkey Esc] –õ–∞–π—Ç–±–æ–∫—Å: –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏.");
                event.preventDefault(); event.stopPropagation(); event.stopImmediatePropagation();
                if (lightbox._closeLightboxFunction) lightbox._closeLightboxFunction();

                if (viewerModal && !viewerModal.classList.contains('hidden')) {
                    if (viewerModal._modalState?.closeModalFunction) viewerModal._modalState.closeModalFunction();
                    else { viewerModal.classList.add('hidden'); }
                }
                if (algorithmModal && !algorithmModal.classList.contains('hidden')) {
                    algorithmModal.classList.add('hidden');
                }
                if (bookmarkDetailModal && !bookmarkDetailModal.classList.contains('hidden')) {
                    bookmarkDetailModal.classList.add('hidden');
                }
                if (reglamentDetailModal && !reglamentDetailModal.classList.contains('hidden')) {
                    reglamentDetailModal.classList.add('hidden');
                }

                requestAnimationFrame(() => {
                    if (getVisibleModals().length === 0) {
                        document.body.classList.remove('overflow-hidden');
                        document.body.classList.remove('modal-open');
                    }
                });
                return;
            case 'Backspace':
                console.log("[GlobalHotkey Backspace] –õ–∞–π—Ç–±–æ–∫—Å: –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–∞–π—Ç–±–æ–∫—Å–∞.");
                event.preventDefault(); event.stopPropagation(); event.stopImmediatePropagation();
                if (lightbox._closeLightboxFunction) lightbox._closeLightboxFunction();

                requestAnimationFrame(() => {
                    const visibleModalsAfterLightboxClose = getVisibleModals().filter(m => m.id !== 'screenshotLightbox');
                    if (visibleModalsAfterLightboxClose.length === 0) {
                        document.body.classList.remove('overflow-hidden');
                        document.body.classList.remove('modal-open');
                    }
                });
                return;
            case 'ArrowLeft':
                console.log("[GlobalHotkey ArrowLeft] –õ–∞–π—Ç–±–æ–∫—Å: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.");
                event.preventDefault(); event.stopPropagation();
                if (lightbox._navigateImageFunction) lightbox._navigateImageFunction('prev');
                return;
            case 'ArrowRight':
                console.log("[GlobalHotkey ArrowRight] –õ–∞–π—Ç–±–æ–∫—Å: –°–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.");
                event.preventDefault(); event.stopPropagation();
                if (lightbox._navigateImageFunction) lightbox._navigateImageFunction('next');
                return;
            case 'Tab':
                const focusableElements = Array.from(lightbox.querySelectorAll('button:not([disabled]), [href]:not([disabled])'))
                    .filter(el => el.offsetWidth > 0 || el.offsetHeight > 0 || el.getClientRects().length > 0);
                if (focusableElements.length === 0) { event.preventDefault(); return; }
                const firstElement = focusableElements[0];
                const lastElement = focusableElements[focusableElements.length - 1];
                if (event.shiftKey) {
                    if (document.activeElement === firstElement) {
                        lastElement.focus(); event.preventDefault();
                    }
                } else {
                    if (document.activeElement === lastElement) {
                        firstElement.focus(); event.preventDefault();
                    }
                }
                event.stopPropagation();
                return;
        }
    }

    if (code === 'Escape' && !isInputFocused) {
        console.log("[GlobalHotkey Esc] (–õ–∞–π—Ç–±–æ–∫—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ Escape –Ω–µ –¥–ª—è –Ω–µ–≥–æ, –∏ –Ω–µ –¥–ª—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞)");
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();

        let closedSomethingInChain = false;

        if (viewerModal && !viewerModal.classList.contains('hidden')) {
            console.log("[GlobalHotkey Esc] –¶–µ–ø–æ—á–∫–∞: –í—å—é–≤–µ—Ä -> –î–µ—Ç–∞–ª–∏");
            if (viewerModal._modalState?.closeModalFunction) viewerModal._modalState.closeModalFunction();
            else { viewerModal.classList.add('hidden'); }

            if (algorithmModal && !algorithmModal.classList.contains('hidden')) { algorithmModal.classList.add('hidden'); }
            if (bookmarkDetailModal && !bookmarkDetailModal.classList.contains('hidden')) { bookmarkDetailModal.classList.add('hidden'); }
            if (reglamentDetailModal && !reglamentDetailModal.classList.contains('hidden')) { reglamentDetailModal.classList.add('hidden'); }
            closedSomethingInChain = true;
        } else if (algorithmModal && !algorithmModal.classList.contains('hidden')) {
            console.log("[GlobalHotkey Esc] –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞");
            algorithmModal.classList.add('hidden');
            closedSomethingInChain = true;
        } else if (bookmarkDetailModal && !bookmarkDetailModal.classList.contains('hidden')) {
            console.log("[GlobalHotkey Esc] –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–ª–∞–¥–∫–∏");
            bookmarkDetailModal.classList.add('hidden');
            closedSomethingInChain = true;
        } else if (reglamentDetailModal && !reglamentDetailModal.classList.contains('hidden')) {
            console.log("[GlobalHotkey Esc] –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞");
            reglamentDetailModal.classList.add('hidden');
            closedSomethingInChain = true;
        }

        if (!closedSomethingInChain) {
            const visibleModals = getVisibleModals();
            if (visibleModals.length > 0) {
                const topmost = getTopmostModal(visibleModals);
                if (topmost) {
                    console.log(`[GlobalHotkey Esc] –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—â–µ–≥–æ —Å–∞–º–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: ${topmost.id}`);

                    if (typeof requestCloseModal === 'function' &&
                        (topmost.id === 'editModal' || topmost.id === 'addModal' || topmost.id === 'customizeUIModal' || topmost.id === 'bookmarkModal')) {
                        if (!requestCloseModal(topmost)) {
                            return;
                        }
                    } else {
                        topmost.classList.add('hidden');
                    }
                } else {
                    console.log("[GlobalHotkey Esc] –ù–µ—Ç —Å–∞–º–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (getTopmostModal –≤–µ—Ä–Ω—É–ª null).");
                }
            } else {
                console.log("[GlobalHotkey Esc] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.");
            }
        }

        requestAnimationFrame(() => {
            if (getVisibleModals().length === 0) {
                document.body.classList.remove('overflow-hidden');
                document.body.classList.remove('modal-open');
                console.log(`[GlobalHotkey Esc] overflow-hidden –∏ modal-open —Å–Ω—è—Ç—ã —Å body (–ø–æ—Å–ª–µ rAF).`);
            } else {
                console.log(`[GlobalHotkey Esc] overflow-hidden –∏ modal-open –ù–ï —Å–Ω—è—Ç—ã, —Ç.–∫. –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–∏–¥–∏–º—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ (–ø–æ—Å–ª–µ rAF). Count: ${getVisibleModals().length}, Modals:`, getVisibleModals().map(m => m.id));
            }
        });
        return;
    }

    if (code === 'Backspace' && !isInputFocused) {
        console.log("[GlobalHotkey Backspace] (–õ–∞–π—Ç–±–æ–∫—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ Backspace –Ω–µ –¥–ª—è –Ω–µ–≥–æ)");
        event.preventDefault();
        event.stopPropagation();

        let handledByBackspace = false;

        if (viewerModal && !viewerModal.classList.contains('hidden')) {
            console.log("[GlobalHotkey Backspace] –®–∞–≥ –Ω–∞–∑–∞–¥: –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—å—é–≤–µ—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤");
            if (viewerModal._modalState?.closeModalFunction) viewerModal._modalState.closeModalFunction();
            else { viewerModal.classList.add('hidden'); }
            handledByBackspace = true;
        } else if (algorithmModal && !algorithmModal.classList.contains('hidden')) {
            console.log("[GlobalHotkey Backspace] –®–∞–≥ –Ω–∞–∑–∞–¥: –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞");
            algorithmModal.classList.add('hidden');
            handledByBackspace = true;
        } else if (bookmarkDetailModal && !bookmarkDetailModal.classList.contains('hidden')) {
            console.log("[GlobalHotkey Backspace] –®–∞–≥ –Ω–∞–∑–∞–¥: –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–ª–∞–¥–∫–∏");
            bookmarkDetailModal.classList.add('hidden');
            handledByBackspace = true;
        } else if (reglamentDetailModal && !reglamentDetailModal.classList.contains('hidden')) {
            console.log("[GlobalHotkey Backspace] –®–∞–≥ –Ω–∞–∑–∞–¥: –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞");
            reglamentDetailModal.classList.add('hidden');
            handledByBackspace = true;
        } else if (reglamentsListDiv && !reglamentsListDiv.classList.contains('hidden') && backToCategoriesBtn) {
            console.log("[GlobalHotkey Backspace] –®–∞–≥ –Ω–∞–∑–∞–¥: –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤");
            backToCategoriesBtn.click();
            handledByBackspace = true;
        }

        if (handledByBackspace) {
            requestAnimationFrame(() => {
                if (getVisibleModals().length === 0) {
                    document.body.classList.remove('overflow-hidden');
                    document.body.classList.remove('modal-open');
                    console.log(`[GlobalHotkey Backspace] overflow-hidden –∏ modal-open —Å–Ω—è—Ç—ã —Å body (–ø–æ—Å–ª–µ rAF).`);
                } else {
                    console.log(`[GlobalHotkey Backspace] overflow-hidden –∏ modal-open –ù–ï —Å–Ω—è—Ç—ã, —Ç.–∫. –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–∏–¥–∏–º—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ (–ø–æ—Å–ª–µ rAF). Count: ${getVisibleModals().length}`);
                }
            });
        }

        if (!handledByBackspace) {
            console.log("[GlobalHotkey Backspace] –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è '—à–∞–≥ –Ω–∞–∑–∞–¥' –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.");
        }
        return;
    }

    if (alt && !ctrlOrMeta && !isInputFocused) {
        switch (code) {
            case 'KeyH': // Alt + H
                console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Alt + KeyH (–ì–ª–∞–≤–Ω–∞—è)");
                event.preventDefault();
                setActiveTab('main');
                return;
            case 'KeyL': // Alt + L
                console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Alt + KeyL (–ò–∑–±—Ä–∞–Ω–Ω–æ–µ)");
                event.preventDefault();
                setActiveTab('favorites');
                return;
            case 'KeyN': // Alt + N
                if (!shift) {
                    console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Alt + KeyN");
                    event.preventDefault(); event.stopPropagation();
                    console.log(`[Hotkey]   > –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–µ–∫—Ü–∏–∏ '${currentSection}'`);
                    let addFunctionN = null, functionArgN = null, functionNameN = '';
                    switch (currentSection) {
                        case 'program': case 'skzi': case 'webReg': case 'lk1c':
                            addFunctionN = showAddModal; functionArgN = currentSection; functionNameN = 'showAddModal'; break;
                        case 'links': addFunctionN = showAddEditCibLinkModal; functionNameN = 'showAddEditCibLinkModal'; break;
                        case 'extLinks': addFunctionN = showAddExtLinkModal; functionNameN = 'showAddExtLinkModal'; break;
                        case 'reglaments': addFunctionN = showAddReglamentModal; functionNameN = 'showAddReglamentModal'; break;
                        case 'bookmarks': addFunctionN = showAddBookmarkModal; functionNameN = 'showAddBookmarkModal'; break;
                        case 'main': showNotification("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –≥–ª–∞–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.", "info"); break;
                        default:
                            console.warn(`Alt+N: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ–∫—Ü–∏—è '${currentSection}'.`);
                            showNotification("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", "warning");
                    }
                    if (addFunctionN) {
                        if (typeof addFunctionN === 'function') {
                            console.log(`[Hotkey Alt+N] –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ ${functionNameN} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º:`, functionArgN);
                            addFunctionN(functionArgN);
                        } else {
                            console.error(`Alt+N: –§—É–Ω–∫—Ü–∏—è ${functionNameN} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
                            showNotification(`–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–∫—Ü–∏–∏ ${currentSection} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.`, "error");
                        }
                    }
                    return;
                }
                break;

            case 'KeyT': // Alt + T
                if (!shift) {
                    console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Alt + KeyT");
                    event.preventDefault(); event.stopPropagation();
                    console.log("[Hotkey]   > –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: —Å–º–µ–Ω–∞ —Ç–µ–º—ã");
                    const themeToggleBtn = document.getElementById('themeToggle');
                    if (themeToggleBtn) { themeToggleBtn.click(); }
                    else { console.warn("Alt+T: –ö–Ω–æ–ø–∫–∞ —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); showNotification("–ö–Ω–æ–ø–∫–∞ —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error"); }
                    return;
                }
                break;

            case 'KeyS': // Alt + Shift + S (–≠–∫—Å–ø–æ—Ä—Ç)
                if (shift) {
                    console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Alt + Shift + KeyS (–≠–∫—Å–ø–æ—Ä—Ç)");
                    event.preventDefault();
                    event.stopPropagation();
                    console.log("[Hotkey]   > –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)");
                    if (typeof exportAllData === 'function') {
                        console.log("[Hotkey]     -> –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ exportAllData() —á–µ—Ä–µ–∑ setTimeout(0)...");
                        setTimeout(() => {
                            console.log("[Hotkey]     -> –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è exportAllData() –∏–∑ setTimeout.");
                            try {
                                exportAllData();
                            } catch (exportError) {
                                console.error("!!! –û—à–∏–±–∫–∞ –í–ù–£–¢–†–ò exportAllData() –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ —Ö–æ—Ç–∫–µ—è:", exportError);
                                showNotification("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", "error");
                            }
                        }, 0);
                    } else {
                        console.warn("Alt+Shift+S: –§—É–Ω–∫—Ü–∏—è exportAllData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                        showNotification("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
                    }
                    return;
                }
                break;

            case 'KeyO': // Alt + Shift + O (–ò–º–ø–æ—Ä—Ç)
                if (shift) {
                    console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Alt + Shift + KeyO (–ò–º–ø–æ—Ä—Ç)");
                    event.preventDefault(); event.stopPropagation();
                    console.log("[Hotkey]   > –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö");
                    const importFileInput = document.getElementById('importFileInput');
                    if (importFileInput) { importFileInput.click(); }
                    else { console.warn("Alt+Shift+O: –ü–æ–ª–µ –∏–º–ø–æ—Ä—Ç–∞ #importFileInput –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); showNotification("–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error"); }
                    return;
                }
                break;
            case 'KeyF': // Alt + F (–§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫)
                if (!shift) {
                    console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Alt + KeyF (–≤–Ω–µ –ø–æ–ª—è –≤–≤–æ–¥–∞)");
                    event.preventDefault(); event.stopPropagation();
                    console.log("[Hotkey]   > –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫");
                    const searchInput = document.getElementById('searchInput');
                    if (searchInput) { searchInput.focus(); searchInput.select(); }
                    else { console.warn("Alt+F: –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); showNotification("–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "warning"); }
                    return;
                }
                break;
            case 'KeyI': // Alt + I (–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI)
                if (!shift) {
                    console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Alt + KeyI (–≤–Ω–µ –ø–æ–ª—è –≤–≤–æ–¥–∞)");
                    event.preventDefault(); event.stopPropagation();
                    console.log("[Hotkey]   > –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
                    const customizeUIBtn = document.getElementById('customizeUIBtn');
                    if (customizeUIBtn) {
                        const customizeUIModal = document.getElementById('customizeUIModal');
                        if (customizeUIModal && customizeUIModal.classList.contains('hidden')) { customizeUIBtn.click(); }
                        else if (!customizeUIModal) { console.warn("Alt+I: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); showNotification("–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", "error"); }
                        else { console.log("Alt+I: –û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ."); }
                    } else { console.warn("Alt+I: –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); showNotification("–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error"); }
                    return;
                }
                break;
            case 'KeyV': // Alt + V (–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥)
                if (!shift) {
                    console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Alt + KeyV (–≤–Ω–µ –ø–æ–ª—è –≤–≤–æ–¥–∞)");
                    event.preventDefault(); event.stopPropagation();

                    const screenshotModalForViewToggle = document.getElementById('screenshotViewerModal');
                    if (screenshotModalForViewToggle && !screenshotModalForViewToggle.classList.contains('hidden')) {
                        console.log("[Hotkey Alt+V]   > –û–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥ –≤ –Ω–µ–º.");
                        const gridBtn = screenshotModalForViewToggle.querySelector('#screenshotViewToggleGrid');
                        const listBtn = screenshotModalForViewToggle.querySelector('#screenshotViewToggleList');

                        if (gridBtn && listBtn) {
                            const isGridActive = gridBtn.classList.contains('bg-primary');
                            const buttonToClick = isGridActive ? listBtn : gridBtn;
                            if (buttonToClick) {
                                buttonToClick.click();
                                console.log(`[Hotkey Alt+V] –ò–º–∏—Ç–∏—Ä–æ–≤–∞–Ω –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '${buttonToClick.id}' –≤ –æ–∫–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.`);
                            } else {
                                console.warn("Alt+V (Screenshot): –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–ª–∏–∫–∞.");
                            }
                        } else {
                            console.warn("Alt+V (Screenshot): –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.");
                            showNotification("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞ –≤ –æ–∫–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.", "error");
                        }
                    } else {
                        console.log("[Hotkey Alt+V]   > –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏");
                        if (typeof toggleActiveSectionView === 'function') { toggleActiveSectionView(); }
                        else { console.warn("Alt+V: –§—É–Ω–∫—Ü–∏—è toggleActiveSectionView –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); showNotification("–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error"); }
                    }
                    return;
                }
                break;
        }
    }

    if (ctrlOrMeta && shift && !alt && !isInputFocused) {
        switch (code) {
            case 'KeyD': // Ctrl + Shift + D
                console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Ctrl + Shift + KeyD");
                event.preventDefault(); event.stopPropagation();
                console.log("[Hotkey]   > –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –≤ txt");
                if (typeof exportClientDataToTxt === 'function') { exportClientDataToTxt(); }
                else { console.warn("Ctrl+Shift+D: –§—É–Ω–∫—Ü–∏—è exportClientDataToTxt –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); showNotification("–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error"); }
                return;
            case 'Backspace': // Ctrl + Shift + Backspace
                console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Ctrl + Shift + Backspace");
                event.preventDefault(); event.stopPropagation();
                console.log("[Hotkey]   > –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: –æ—á–∏—Å—Ç–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞");
                const clientNotes = document.getElementById('clientNotes');
                if (clientNotes && clientNotes.value.trim() !== '') {
                    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é?')) {
                        if (typeof clearClientData === 'function') { clearClientData(); }
                        else { console.warn("Ctrl+Shift+Backspace: –§—É–Ω–∫—Ü–∏—è clearClientData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); clientNotes.value = ''; showNotification("–ü–æ–ª–µ –æ—á–∏—â–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.", "warning"); }
                    }
                } else if (clientNotes) { showNotification("–ü–æ–ª–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é —É–∂–µ –ø—É—Å—Ç–æ.", "info"); }
                else { console.warn("Ctrl+Shift+Backspace: –ü–æ–ª–µ #clientNotes –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); }
                return;
            case 'KeyH': // Ctrl + Shift + H
                console.log("[Hotkey] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Ctrl + Shift + KeyH");
                event.preventDefault(); event.stopPropagation();
                console.log("[Hotkey]   > –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à");
                const showHotkeysBtn = document.getElementById('showHotkeysBtn');
                if (showHotkeysBtn) { showHotkeysBtn.click(); }
                else { console.warn("Ctrl+Shift+H: –ö–Ω–æ–ø–∫–∞ #showHotkeysBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à.", "error"); }
                return;
        }
    }
}


async function showBookmarkDetailModal(bookmarkId) {
    const modalId = 'bookmarkDetailModal';
    let modal = document.getElementById(modalId);
    const isNewModal = !modal;

    if (isNewModal) {
        modal = document.createElement('div');
        modal.id = modalId;
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 hidden z-[60] p-4 flex items-center justify-center';
        modal.innerHTML = `
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] flex flex-col">
                        <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
                            <div class="flex justify-between items-center">
                                <h2 class="text-lg font-bold text-gray-900 dark:text-gray-100" id="bookmarkDetailTitle">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–ª–∞–¥–∫–∏</h2>
                                <div class="flex items-center flex-shrink-0">
                                    <div class="fav-btn-placeholder-modal-bookmark mr-1"></div>
                                    <button id="${bookmarkDetailModalConfigGlobal.buttonId}" type="button" class="inline-block p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors align-middle" title="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω">
                                        <i class="fas fa-expand"></i>
                                    </button>
                                    <button type="button" class="close-modal ml-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" title="–ó–∞–∫—Ä—ã—Ç—å (Esc)">
                                        <i class="fas fa-times text-xl"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="p-6 overflow-y-auto flex-1" id="bookmarkDetailOuterContent">
                            <div class="prose dark:prose-invert max-w-none mb-6" id="bookmarkDetailTextContent">
                                <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                            </div>
                            <div id="bookmarkDetailScreenshotsContainer" class="mt-4 border-t border-gray-200 dark:border-gray-600 pt-4">
                                <h4 class="text-sm font-medium text-gray-600 dark:text-gray-300 mb-3">–°–∫—Ä–∏–Ω—à–æ—Ç—ã:</h4>
                                <div id="bookmarkDetailScreenshotsGrid" class="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 gap-3">
                                </div>
                            </div>
                        </div>
                        <div class="p-4 border-t border-gray-200 dark:border-gray-700 flex-shrink-0 flex justify-end gap-2">
                            <button type="button" id="editBookmarkFromDetailBtn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition">
                                <i class="fas fa-edit mr-1"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            <button type="button" class="cancel-modal px-4 py-2 bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-200 rounded-md transition">
                                –ó–∞–∫—Ä—ã—Ç—å
                            </button>
                        </div>
                    </div>
                `;
        document.body.appendChild(modal);

        modal.addEventListener('click', (e) => {
            const currentModal = document.getElementById(modalId);
            if (!currentModal || currentModal.classList.contains('hidden')) return;

            if (e.target.closest('.close-modal, .cancel-modal')) {
                currentModal.classList.add('hidden');

                const images = currentModal.querySelectorAll('#bookmarkDetailScreenshotsGrid img[data-object-url]');
                images.forEach(img => {
                    if (img.dataset.objectUrl) {
                        try { URL.revokeObjectURL(img.dataset.objectUrl); } catch (revokeError) { console.warn("Error revoking URL on close:", revokeError); }
                        delete img.dataset.objectUrl;
                    }
                });

                requestAnimationFrame(() => {
                    const otherVisibleModals = getVisibleModals().filter(m => m.id !== modalId);
                    if (otherVisibleModals.length === 0) {
                        document.body.classList.remove('overflow-hidden');
                        document.body.classList.remove('modal-open');
                        console.log(`[bookmarkDetailModal Close - BUTTON] overflow-hidden –∏ modal-open —Å–Ω—è—Ç—ã —Å body (—á–µ—Ä–µ–∑ rAF).`);
                    } else {
                        console.log(`[bookmarkDetailModal Close - BUTTON] overflow-hidden –∏ modal-open –ù–ï —Å–Ω—è—Ç—ã, —Ç.–∫. –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–∏–¥–∏–º—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ (—á–µ—Ä–µ–∑ rAF). Count: ${otherVisibleModals.length}, Other modals:`, otherVisibleModals.map(m => m.id));
                    }
                });

            } else if (e.target.closest('#editBookmarkFromDetailBtn')) {
                const currentId = parseInt(currentModal.dataset.currentBookmarkId, 10);
                if (!isNaN(currentId)) {
                    currentModal.classList.add('hidden');

                    requestAnimationFrame(() => {
                        const otherVisibleModals = getVisibleModals().filter(m => m.id !== modalId);
                        if (otherVisibleModals.length === 0) {
                            document.body.classList.remove('overflow-hidden');
                            document.body.classList.remove('modal-open');
                        }
                    });

                    if (typeof showEditBookmarkModal === 'function') {
                        showEditBookmarkModal(currentId);
                    } else {
                        console.error("–§—É–Ω–∫—Ü–∏—è showEditBookmarkModal –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
                        showNotification("–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
                    }
                } else {
                    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ dataset");
                    showNotification("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "error");
                }
            }
        });
    }

    const fullscreenBtn = modal.querySelector('#' + bookmarkDetailModalConfigGlobal.buttonId);
    if (fullscreenBtn) {
        if (!fullscreenBtn.dataset.fullscreenListenerAttached) {
            fullscreenBtn.addEventListener('click', () => {
                if (typeof toggleModalFullscreen === 'function') {
                    toggleModalFullscreen(
                        bookmarkDetailModalConfigGlobal.modalId,
                        bookmarkDetailModalConfigGlobal.buttonId,
                        bookmarkDetailModalConfigGlobal.classToggleConfig,
                        bookmarkDetailModalConfigGlobal.innerContainerSelector,
                        bookmarkDetailModalConfigGlobal.contentAreaSelector
                    );
                } else {
                    console.error("–§—É–Ω–∫—Ü–∏—è toggleModalFullscreen –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                    showNotification("–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
                }
            });
            fullscreenBtn.dataset.fullscreenListenerAttached = 'true';
            console.log(`Fullscreen listener attached to ${bookmarkDetailModalConfigGlobal.buttonId} (modal: ${isNewModal ? 'new' : 'existing'})`);
        }
    } else {
        console.error("–ö–Ω–æ–ø–∫–∞ #" + bookmarkDetailModalConfigGlobal.buttonId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–ª–∞–¥–∫–∏!");
    }

    const titleEl = modal.querySelector('#bookmarkDetailTitle');
    const textContentEl = modal.querySelector('#bookmarkDetailTextContent');
    const screenshotsContainer = modal.querySelector('#bookmarkDetailScreenshotsContainer');
    const screenshotsGridEl = modal.querySelector('#bookmarkDetailScreenshotsGrid');
    const editButton = modal.querySelector('#editBookmarkFromDetailBtn');
    const favoriteButtonContainer = modal.querySelector('.fav-btn-placeholder-modal-bookmark');


    if (!titleEl || !textContentEl || !screenshotsContainer || !screenshotsGridEl || !editButton || !favoriteButtonContainer) {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–ª–∞–¥–∫–∏.");
        if (modal) modal.classList.add('hidden');
        return;
    }

    modal.dataset.currentBookmarkId = String(bookmarkId);
    titleEl.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    textContentEl.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>';
    screenshotsGridEl.innerHTML = '';
    screenshotsContainer.classList.add('hidden');
    editButton.classList.add('hidden');
    favoriteButtonContainer.innerHTML = '';

    modal.classList.remove('hidden');
    document.body.classList.add('overflow-hidden');
    document.body.classList.add('modal-open');

    try {
        const bookmark = await getFromIndexedDB('bookmarks', bookmarkId);

        if (bookmark) {
            titleEl.textContent = bookmark.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
            const preElement = document.createElement('pre');
            preElement.className = 'whitespace-pre-wrap break-words text-sm font-sans';
            preElement.style.fontSize = '102%';
            preElement.textContent = bookmark.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.';
            textContentEl.innerHTML = '';
            textContentEl.appendChild(preElement);

            editButton.classList.remove('hidden');

            const itemType = bookmark.url ? 'bookmark' : 'bookmark_note';
            const isFav = isFavorite(itemType, String(bookmark.id));
            const favButtonHTML = getFavoriteButtonHTML(bookmark.id, itemType, 'bookmarks', bookmark.title, bookmark.description, isFav);
            favoriteButtonContainer.innerHTML = favButtonHTML;

            if (bookmark.screenshotIds && bookmark.screenshotIds.length > 0) {
                console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ ${bookmark.screenshotIds.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–ª–∞–¥–∫–∏ ${bookmarkId}...`);
                screenshotsContainer.classList.remove('hidden');
                screenshotsGridEl.innerHTML = '<p class="col-span-full text-xs text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...</p>';

                try {
                    const allParentScreenshots = await getAllFromIndex('screenshots', 'parentId', bookmarkId);
                    const bookmarkScreenshots = allParentScreenshots.filter(s => s.parentType === 'bookmark');

                    if (bookmarkScreenshots.length > 0) {
                        if (typeof renderScreenshotThumbnails === 'function') {
                            renderScreenshotThumbnails(screenshotsGridEl, bookmarkScreenshots, openLightbox);
                            console.log(`–û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ ${bookmarkScreenshots.length} –º–∏–Ω–∏–∞—Ç—é—Ä –≤ –¥–µ—Ç–∞–ª—è—Ö –∑–∞–∫–ª–∞–¥–∫–∏.`);
                        } else {
                            console.error("–§—É–Ω–∫—Ü–∏—è renderScreenshotThumbnails –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                            screenshotsGridEl.innerHTML = '<p class="col-span-full text-red-500 text-xs">–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.</p>';
                        }
                    } else {
                        screenshotsGridEl.innerHTML = '';
                        screenshotsContainer.classList.add('hidden');
                        console.log("–°–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î (–ø–æ parentType='bookmark'), —Ö–æ—Ç—è ID –±—ã–ª–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–µ.");
                    }
                } catch (screenshotError) {
                    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–ª–∞–¥–∫–∏:", screenshotError);
                    screenshotsGridEl.innerHTML = '<p class="col-span-full text-red-500 text-xs">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.</p>';
                    screenshotsContainer.classList.remove('hidden');
                }
            } else {
                screenshotsGridEl.innerHTML = '';
                screenshotsContainer.classList.add('hidden');
                console.log("–°–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–ª–∞–¥–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
            }

        } else {
            titleEl.textContent = '–û—à–∏–±–∫–∞';
            textContentEl.innerHTML = `<p class="text-red-500">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏ (ID: ${bookmarkId}). –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.</p>`;
            showNotification("–ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error");
            editButton.classList.add('hidden');
            screenshotsContainer.classList.add('hidden');
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–ª–∞–¥–∫–∏:", error);
        titleEl.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
        textContentEl.innerHTML = '<p class="text-red-500">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.</p>';
        showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–ª–∞–¥–∫–∏", "error");
        editButton.classList.add('hidden');
        screenshotsContainer.classList.add('hidden');
    }
}


function getCurrentBookmarkFormState(form) {
    if (!form) return null;
    return {
        id: form.elements.bookmarkId.value,
        title: form.elements.bookmarkTitle.value.trim(),
        url: form.elements.bookmarkUrl.value.trim(),
        description: form.elements.bookmarkDescription.value.trim(),
        folder: form.elements.bookmarkFolder.value,
        existingScreenshotIds: (form.dataset.existingScreenshotIds || '')
            .split(',')
            .filter(Boolean)
            .map(s => String(s.trim()))
            .filter(id => !(form.dataset.screenshotsToDelete || '').split(',').filter(Boolean).map(sDel => String(sDel.trim())).includes(id))
            .join(','),
        tempScreenshotsCount: (form._tempScreenshotBlobs || []).length,
        deletedScreenshotIds: form.dataset.screenshotsToDelete || ''
    };
}


function initHotkeysModal() {
    const showHotkeysBtn = document.getElementById('showHotkeysBtn');
    const hotkeysModal = document.getElementById('hotkeysModal');
    const closeHotkeysModalBtn = document.getElementById('closeHotkeysModalBtn');
    const okHotkeysModalBtn = document.getElementById('okHotkeysModalBtn');
    const fullscreenBtn = document.getElementById('toggleFullscreenHotkeysBtn');

    if (!showHotkeysBtn || !hotkeysModal || !closeHotkeysModalBtn || !okHotkeysModalBtn || !fullscreenBtn) {
        console.warn(
            "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à " +
            "(#showHotkeysBtn, #hotkeysModal, #closeHotkeysModalBtn, #okHotkeysModalBtn, #toggleFullscreenHotkeysBtn). " +
            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∞."
        );
        return;
    }

    if (hotkeysModal._escapeHandlerInstance) {
        document.removeEventListener('keydown', hotkeysModal._escapeHandlerInstance);
        delete hotkeysModal._escapeHandlerInstance;
    }

    const handleEscapeKeyInternal = (event) => {
        if (event.key === 'Escape') {
            if (hotkeysModal && !hotkeysModal.classList.contains('hidden')) {

                const visibleModals = getVisibleModals();
                const topmostModal = visibleModals.length > 0 ? getTopmostModal(visibleModals) : null;
                if (topmostModal && topmostModal.id !== hotkeysModal.id) {
                    console.log(`[HotkeysModal Escape] Event not handled, topmost is ${topmostModal.id}`);
                    return;
                }

                closeModalInternal();
                event.stopPropagation();
                event.stopImmediatePropagation();
            }
        }
    };

    const openModal = () => {
        if (!hotkeysModal) return;
        hotkeysModal.classList.remove('hidden');
        document.body.classList.add('modal-open');
        if (hotkeysModal._escapeHandlerInstance) {
            document.removeEventListener('keydown', hotkeysModal._escapeHandlerInstance);
        }
        hotkeysModal._escapeHandlerInstance = handleEscapeKeyInternal;
        document.addEventListener('keydown', hotkeysModal._escapeHandlerInstance);
        console.log("Hotkey modal opened, Escape listener added.");
    };

    const closeModalInternal = () => {
        if (!hotkeysModal) return;
        hotkeysModal.classList.add('hidden');
        if (getVisibleModals().length === 0) {
            document.body.classList.remove('overflow-hidden');
        }
        if (hotkeysModal._escapeHandlerInstance) {
            document.removeEventListener('keydown', hotkeysModal._escapeHandlerInstance);
            delete hotkeysModal._escapeHandlerInstance;
        }
        console.log("Hotkey modal closed, Escape listener removed.");
    };

    if (!showHotkeysBtn.dataset.listenerAttached) {
        showHotkeysBtn.addEventListener('click', openModal);
        showHotkeysBtn.dataset.listenerAttached = 'true';
    }


    if (!closeHotkeysModalBtn.dataset.listenerAttached) {
        closeHotkeysModalBtn.addEventListener('click', closeModalInternal);
        closeHotkeysModalBtn.dataset.listenerAttached = 'true';
    }
    if (!okHotkeysModalBtn.dataset.listenerAttached) {
        okHotkeysModalBtn.addEventListener('click', closeModalInternal);
        okHotkeysModalBtn.dataset.listenerAttached = 'true';
    }


    if (!hotkeysModal.dataset.overlayListenerAttached) {
        hotkeysModal.addEventListener('click', (event) => {
            if (event.target === hotkeysModal) {
                closeModalInternal();
            }
        });
        hotkeysModal.dataset.overlayListenerAttached = 'true';
    }


    if (fullscreenBtn && !fullscreenBtn.dataset.fullscreenListenerAttached) {
        fullscreenBtn.addEventListener('click', () => {
            if (typeof toggleModalFullscreen === 'function') {
                toggleModalFullscreen(
                    hotkeysModalConfig.modalId,
                    hotkeysModalConfig.buttonId,
                    hotkeysModalConfig.classToggleConfig,
                    hotkeysModalConfig.innerContainerSelector,
                    hotkeysModalConfig.contentAreaSelector
                );
            } else {
                console.error("–§—É–Ω–∫—Ü–∏—è toggleModalFullscreen –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                showNotification("–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
            }
        });
        fullscreenBtn.dataset.fullscreenListenerAttached = 'true';
        console.log(`Fullscreen listener attached to ${hotkeysModalConfig.buttonId}`);
    }


    console.log("–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.");
}


function showImageAtIndex(index, blobs, stateManager, elements) {
    const {
        updateCurrentIndex, updateCurrentScale, updateTranslate,
        updateObjectUrl, updatePreloadedUrls,
        updateImageTransform, preloadImage,
        getCurrentObjectUrl, getCurrentPreloadedUrls
    } = stateManager;

    const { lightboxImage, loadingIndicator, counterElement, prevBtn, nextBtn } = elements;

    if (!lightboxImage || !loadingIndicator || !counterElement || !prevBtn || !nextBtn) {
        console.error(`showImageAtIndex(${index}): –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã!`);
        const lightboxRoot = document.getElementById('screenshotLightbox');
        if (lightboxRoot && lightboxRoot._closeLightboxFunction) {
            lightboxRoot._closeLightboxFunction(true);
        }
        return;
    }

    const totalImages = blobs?.length ?? 0;
    if (totalImages === 0) {
        loadingIndicator.innerHTML = "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π";
        loadingIndicator.classList.remove('hidden');
        lightboxImage.classList.add('hidden');
        counterElement.textContent = "0 / 0";
        prevBtn.disabled = true;
        nextBtn.disabled = true;
        return;
    }

    if (typeof index !== 'number' || index < 0 || index >= totalImages) {
        index = 0;
    }

    const oldObjectUrl = getCurrentObjectUrl();
    const oldPreloadedUrls = getCurrentPreloadedUrls();
    if (oldObjectUrl) { try { URL.revokeObjectURL(oldObjectUrl); } catch (e) { } }
    if (oldPreloadedUrls?.next) { try { URL.revokeObjectURL(oldPreloadedUrls.next); } catch (e) { } }
    if (oldPreloadedUrls?.prev) { try { URL.revokeObjectURL(oldPreloadedUrls.prev); } catch (e) { } }

    updateCurrentIndex(index);
    updateCurrentScale(1.0);
    updateTranslate(0, 0);
    updateObjectUrl(null);
    updatePreloadedUrls({ next: null, prev: null });

    loadingIndicator.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞...';
    loadingIndicator.classList.remove('hidden');
    lightboxImage.classList.add('hidden');
    updateImageTransform();

    const blob = blobs[index];
    counterElement.textContent = `${index + 1} / ${totalImages}`;
    prevBtn.disabled = totalImages <= 1;
    nextBtn.disabled = totalImages <= 1;

    if (!(blob instanceof Blob)) {
        console.error(`–≠–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Blob.`);
        loadingIndicator.innerHTML = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞";
        return;
    }

    let newObjectUrl = null;
    try {
        newObjectUrl = URL.createObjectURL(blob);

        lightboxImage.onload = null;
        lightboxImage.onerror = null;

        lightboxImage.onload = () => {
            loadingIndicator.classList.add('hidden');
            lightboxImage.classList.remove('hidden');
        };
        lightboxImage.onerror = () => {
            loadingIndicator.innerHTML = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏";
            lightboxImage.classList.add('hidden');
            if (newObjectUrl) { try { URL.revokeObjectURL(newObjectUrl); } catch (e) { } }
            updateObjectUrl(null);
        };
        lightboxImage.src = newObjectUrl;
        updateObjectUrl(newObjectUrl);

        let newPreloaded = { next: null, prev: null };
        if (totalImages > 1) {
            const nextIdx = (index + 1) % totalImages;
            const prevIdx = (index - 1 + totalImages) % totalImages;
            if (nextIdx !== index) { newPreloaded.next = preloadImage(nextIdx); }
            if (prevIdx !== index) { newPreloaded.prev = preloadImage(prevIdx); }
        }
        updatePreloadedUrls(newPreloaded);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Object URL –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ src:", error);
        loadingIndicator.innerHTML = "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è";
        if (newObjectUrl) { try { URL.revokeObjectURL(newObjectUrl); } catch (e) { } }
        updateObjectUrl(null);
    }
}


const LIGHTBOX_HTML_STRUCTURE = `
    <div class="lightbox-content relative w-full h-full flex items-center justify-center p-2 sm:p-4 md:p-8">
        <img id="lightboxImage" class="max-w-full max-h-full object-contain cursor-grab select-none transition-transform duration-100 ease-out hidden" alt="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è">
        <div id="lightboxLoading" class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-25 text-white text-xl">
            <i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞...
        </div>
        <button id="prevLightboxBtn" type="button" class="absolute left-2 sm:left-4 top-1/2 -translate-y-1/2 z-20 p-2 sm:p-3 bg-black bg-opacity-40 hover:bg-opacity-60 text-white rounded-full transition-opacity focus:outline-none focus:ring-2 focus:ring-white disabled:opacity-30 disabled:cursor-not-allowed" title="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ (–°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ)">
            <i class="fas fa-chevron-left fa-fw text-base sm:text-lg"></i>
        </button>
        <button id="nextLightboxBtn" type="button" class="absolute right-2 sm:right-4 top-1/2 -translate-y-1/2 z-20 p-2 sm:p-3 bg-black bg-opacity-40 hover:bg-opacity-60 text-white rounded-full transition-opacity focus:outline-none focus:ring-2 focus:ring-white disabled:opacity-30 disabled:cursor-not-allowed" title="–°–ª–µ–¥—É—é—â–µ–µ (–°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ)">
            <i class="fas fa-chevron-right fa-fw text-base sm:text-lg"></i>
        </button>
        <div class="absolute top-2 sm:top-4 right-2 sm:right-4 z-20 flex items-center gap-2">
            <div id="lightboxCounter" class="px-2 py-1 bg-black bg-opacity-50 text-white text-xs sm:text-sm rounded">1 / 1</div>
            <button id="closeLightboxBtn" type="button" class="p-2 sm:p-3 bg-black bg-opacity-40 hover:bg-opacity-60 text-white rounded-full transition-opacity focus:outline-none focus:ring-2 focus:ring-white" title="–ó–∞–∫—Ä—ã—Ç—å (Escape / Backspace)">
                <i class="fas fa-times fa-fw text-base sm:text-lg"></i>
            </button>
        </div>
    </div>
`;


function openLightbox(blobs, initialIndex) {
    let lightbox = document.getElementById('screenshotLightbox');
    let wheelListener = null;
    let mousedownListener = null;
    let mousemoveListener = null;
    let mouseupListener = null;
    let mouseleaveListener = null;
    let dblClickListener = null;
    let originalTriggerElement = null;
    let lightboxBlobs = blobs || [];

    if (!lightbox) {
        lightbox = document.createElement('div');
        lightbox.id = 'screenshotLightbox';
        lightbox.setAttribute('tabindex', '-1');
        lightbox.className = 'fixed inset-0 bg-black bg-opacity-75 z-[100] p-0 flex items-center justify-center transition-opacity duration-300 ease-in-out opacity-0 hidden';
        lightbox.innerHTML = LIGHTBOX_HTML_STRUCTURE;
        document.body.appendChild(lightbox);
    } else {
        const requiredSelectors = ['#lightboxImage', '#lightboxLoading', '#lightboxCounter', '#prevLightboxBtn', '#nextLightboxBtn', '#closeLightboxBtn'];
        let isStructureComplete = true;
        for (const selector of requiredSelectors) {
            if (!lightbox.querySelector(selector)) {
                isStructureComplete = false;
                break;
            }
        }
        if (!isStructureComplete) {
            lightbox.innerHTML = LIGHTBOX_HTML_STRUCTURE;
        }
        if (lightbox.getAttribute('tabindex') !== '-1') {
            lightbox.setAttribute('tabindex', '-1');
        }
    }

    let state = {
        currentIndex: initialIndex,
        currentScale: 1.0,
        translateX: 0,
        translateY: 0,
        isPanning: false,
        startPanX: 0,
        startPanY: 0,
        isZoomedByDoubleClick: false,
        currentObjectUrl: null,
        preloadedUrls: { next: null, prev: null },
    };

    const elements = {
        lightboxImage: lightbox.querySelector('#lightboxImage'),
        loadingIndicator: lightbox.querySelector('#lightboxLoading'),
        counterElement: lightbox.querySelector('#lightboxCounter'),
        prevBtn: lightbox.querySelector('#prevLightboxBtn'),
        nextBtn: lightbox.querySelector('#nextLightboxBtn'),
        closeBtn: lightbox.querySelector('#closeLightboxBtn'),
        lightboxContent: lightbox.querySelector('.lightbox-content')
    };

    if (!elements.lightboxImage || !elements.loadingIndicator || !elements.counterElement || !elements.prevBtn || !elements.nextBtn || !elements.closeBtn || !elements.lightboxContent) {
        console.error("[Lightbox Init Error] –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–∞–π—Ç–±–æ–∫—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–∞–π—Ç–±–æ–∫—Å–∞.");
        closeLightboxInternal(true);
        return;
    }

    function updateImageTransform() {
        if (elements.lightboxImage) {
            const tx = state.currentScale <= 1.001 ? 0 : state.translateX;
            const ty = state.currentScale <= 1.001 ? 0 : state.translateY;
            elements.lightboxImage.style.transform = `translate(${tx}px, ${ty}px) scale(${state.currentScale})`;
            elements.lightboxImage.style.cursor = state.currentScale > 1.001 ? (state.isPanning ? 'grabbing' : 'grab') : 'default';
        }
    }

    function checkPanningLimits() {
        if (state.currentScale <= 1.001) {
            state.translateX = 0;
            state.translateY = 0;
            return;
        }

        const imgNaturalWidth = elements.lightboxImage.naturalWidth;
        const imgNaturalHeight = elements.lightboxImage.naturalHeight;

        if (!imgNaturalWidth || !imgNaturalHeight) return;

        const viewportRect = elements.lightboxContent.getBoundingClientRect();
        const viewportWidth = viewportRect.width;
        const viewportHeight = viewportRect.height;

        let renderedWidth, renderedHeight;
        const imgAspectRatio = imgNaturalWidth / imgNaturalHeight;
        const viewportAspectRatio = viewportWidth / viewportHeight;

        if (imgAspectRatio > viewportAspectRatio) {
            renderedWidth = viewportWidth;
            renderedHeight = viewportWidth / imgAspectRatio;
        } else {
            renderedHeight = viewportHeight;
            renderedWidth = viewportHeight * imgAspectRatio;
        }

        const scaledRenderedWidth = renderedWidth * state.currentScale;
        const scaledRenderedHeight = renderedHeight * state.currentScale;

        const maxPanX = Math.max(0, (scaledRenderedWidth - viewportWidth) / 2);
        const maxPanY = Math.max(0, (scaledRenderedHeight - viewportHeight) / 2);

        state.translateX = Math.max(-maxPanX, Math.min(maxPanX, state.translateX));
        state.translateY = Math.max(-maxPanY, Math.min(maxPanY, state.translateY));
    }

    const stateManagerForShowImage = {
        getCurrentIndex: () => state.currentIndex,
        getCurrentObjectUrl: () => state.currentObjectUrl,
        getCurrentPreloadedUrls: () => state.preloadedUrls,
        updateCurrentIndex: (idx) => { state.currentIndex = idx; state.isZoomedByDoubleClick = false; },
        updateCurrentScale: (s) => { state.currentScale = s; state.isZoomedByDoubleClick = false; },
        updateTranslate: (x, y) => { state.translateX = x; state.translateY = y; state.isZoomedByDoubleClick = false; },
        updateObjectUrl: (url) => state.currentObjectUrl = url,
        updatePreloadedUrls: (urls) => state.preloadedUrls = urls,
        updateImageTransform: updateImageTransform,
        preloadImage: (idx) => {
            if (idx < 0 || idx >= lightboxBlobs.length) return null;
            const blob = lightboxBlobs[idx];
            if (!(blob instanceof Blob)) return null;
            try { const url = URL.createObjectURL(blob); return url; }
            catch (e) { console.error(`[Lightbox] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è URL –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ ${idx}:`, e); return null; }
        }
    };

    const elementsForShowImage = {
        lightboxImage: elements.lightboxImage,
        loadingIndicator: elements.loadingIndicator,
        counterElement: elements.counterElement,
        prevBtn: elements.prevBtn,
        nextBtn: elements.nextBtn
    };


    function closeLightboxInternal(force = false) {
        const lbElement = document.getElementById('screenshotLightbox');
        if (!lbElement || (lbElement.classList.contains('hidden') && !force)) return;

        lbElement.classList.remove('opacity-100');
        lbElement.classList.add('opacity-0');

        setTimeout(() => {
            lbElement.classList.add('hidden');
            if (typeof getVisibleModals === 'function' && getVisibleModals().length === 0) {
                document.body.classList.remove('overflow-hidden');
            } else if (typeof getVisibleModals !== 'function') {
                document.body.classList.remove('overflow-hidden');
            }
        }, 300);

        if (elements.lightboxImage) {
            if (wheelListener) elements.lightboxImage.removeEventListener('wheel', wheelListener);
            if (mousedownListener) elements.lightboxImage.removeEventListener('mousedown', mousedownListener);
            if (dblClickListener) elements.lightboxImage.removeEventListener('dblclick', dblClickListener);
            if (mouseleaveListener) elements.lightboxImage.removeEventListener('mouseleave', mouseleaveListener);
            wheelListener = null; mousedownListener = null; dblClickListener = null; mouseleaveListener = null;
            elements.lightboxImage.onload = null;
            elements.lightboxImage.onerror = null;
            elements.lightboxImage.src = '';
            elements.lightboxImage.style.transform = 'translate(0px, 0px) scale(1)';
            elements.lightboxImage.classList.add('hidden');
        }

        if (mousemoveListener) document.removeEventListener('mousemove', mousemoveListener);
        if (mouseupListener) document.removeEventListener('mouseup', mouseupListener);
        mousemoveListener = null; mouseupListener = null;

        if (state.currentObjectUrl) { try { URL.revokeObjectURL(state.currentObjectUrl); } catch (e) { } state.currentObjectUrl = null; }
        if (state.preloadedUrls.next) { try { URL.revokeObjectURL(state.preloadedUrls.next); } catch (e) { } state.preloadedUrls.next = null; }
        if (state.preloadedUrls.prev) { try { URL.revokeObjectURL(state.preloadedUrls.prev); } catch (e) { } state.preloadedUrls.prev = null; }

        if (elements.closeBtn && elements.closeBtn._clickHandler) {
            elements.closeBtn.removeEventListener('click', elements.closeBtn._clickHandler);
            delete elements.closeBtn._clickHandler;
        }
        if (lightbox._overlayClickHandler) {
            lightbox.removeEventListener('click', lightbox._overlayClickHandler);
            delete lightbox._overlayClickHandler;
        }
        if (elements.prevBtn && elements.prevBtn._clickHandler) {
            elements.prevBtn.removeEventListener('click', elements.prevBtn._clickHandler);
            delete elements.prevBtn._clickHandler;
        }
        if (elements.nextBtn && elements.nextBtn._clickHandler) {
            elements.nextBtn.removeEventListener('click', elements.nextBtn._clickHandler);
            delete elements.nextBtn._clickHandler;
        }

        if (originalTriggerElement && typeof originalTriggerElement.focus === 'function') {
            setTimeout(() => {
                try { originalTriggerElement.focus(); } catch (e) { }
            }, 0);
        }
        originalTriggerElement = null;
    }

    lightbox._closeLightboxFunction = closeLightboxInternal;

    function navigateImage(direction) {
        if (lightboxBlobs.length <= 1) return;
        let newIndex = state.currentIndex;
        if (direction === 'prev') {
            newIndex = (state.currentIndex - 1 + lightboxBlobs.length) % lightboxBlobs.length;
        } else if (direction === 'next') {
            newIndex = (state.currentIndex + 1) % lightboxBlobs.length;
        }
        state.isZoomedByDoubleClick = false;
        showImageAtIndex(newIndex, lightboxBlobs, stateManagerForShowImage, elementsForShowImage);
    }
    lightbox._navigateImageFunction = navigateImage;

    const MIN_SCALE = 0.2;
    const MAX_SCALE = 5.0;
    const ZOOM_SENSITIVITY_FACTOR = 0.1;

    wheelListener = (event) => {
        if (!elements.lightboxImage || elements.lightboxImage.classList.contains('hidden')) return;
        event.preventDefault();

        const delta = event.deltaY > 0 ? -1 : 1;
        const scaleAmount = state.currentScale * ZOOM_SENSITIVITY_FACTOR * delta;
        let newScale = state.currentScale + scaleAmount;
        newScale = Math.max(MIN_SCALE, Math.min(MAX_SCALE, newScale));

        if (newScale === state.currentScale) return;

        const rect = elements.lightboxImage.getBoundingClientRect();
        const mouseXGlobal = event.clientX;
        const mouseYGlobal = event.clientY;

        const mouseXOnImg = mouseXGlobal - rect.left;
        const mouseYOnImg = mouseYGlobal - rect.top;

        const imgRenderedWidth = rect.width / state.currentScale;
        const imgRenderedHeight = rect.height / state.currentScale;

        const pointX = (mouseXOnImg - imgRenderedWidth / 2 - state.translateX) / state.currentScale + imgRenderedWidth / 2;
        const pointY = (mouseYOnImg - imgRenderedHeight / 2 - state.translateY) / state.currentScale + imgRenderedHeight / 2;

        state.translateX = (mouseXOnImg - imgRenderedWidth / 2) - (pointX - imgRenderedWidth / 2) * newScale;
        state.translateY = (mouseYOnImg - imgRenderedHeight / 2) - (pointY - imgRenderedHeight / 2) * newScale;

        state.currentScale = newScale;
        state.isZoomedByDoubleClick = false;

        checkPanningLimits();
        updateImageTransform();
    };

    dblClickListener = (event) => {
        if (!elements.lightboxImage || elements.lightboxImage.classList.contains('hidden')) return;
        event.preventDefault();

        const prevScale = state.currentScale;

        if (state.isZoomedByDoubleClick) {
            state.currentScale = 1.0;
            state.translateX = 0;
            state.translateY = 0;
            state.isZoomedByDoubleClick = false;
        } else {
            state.currentScale = Math.min(prevScale * 1.2, MAX_SCALE);

            const rect = elements.lightboxImage.getBoundingClientRect();
            const mouseXGlobal = event.clientX;
            const mouseYGlobal = event.clientY;
            const mouseXOnImg = mouseXGlobal - rect.left;
            const mouseYOnImg = mouseYGlobal - rect.top;

            const imgRenderedWidth = rect.width / prevScale;
            const imgRenderedHeight = rect.height / prevScale;

            const pointX = (mouseXOnImg - imgRenderedWidth / 2 - state.translateX) / prevScale + imgRenderedWidth / 2;
            const pointY = (mouseYOnImg - imgRenderedHeight / 2 - state.translateY) / prevScale + imgRenderedHeight / 2;

            state.translateX = (mouseXOnImg - imgRenderedWidth / 2) - (pointX - imgRenderedWidth / 2) * state.currentScale;
            state.translateY = (mouseYOnImg - imgRenderedHeight / 2) - (pointY - imgRenderedHeight / 2) * state.currentScale;

            state.isZoomedByDoubleClick = true;
        }

        checkPanningLimits();
        updateImageTransform();
    };

    mousedownListener = (event) => {
        if (state.currentScale <= 1.001 || !elements.lightboxImage || elements.lightboxImage.classList.contains('hidden')) return;
        event.preventDefault();
        state.isPanning = true;
        state.startPanX = event.clientX - state.translateX;
        state.startPanY = event.clientY - state.translateY;
        elements.lightboxImage.style.cursor = 'grabbing';
        elements.lightboxImage.classList.add('panning');
        state.isZoomedByDoubleClick = false;
    };

    mousemoveListener = (event) => {
        if (!state.isPanning || !elements.lightboxImage) return;
        event.preventDefault();
        state.translateX = event.clientX - state.startPanX;
        state.translateY = event.clientY - state.startPanY;
        checkPanningLimits();
        updateImageTransform();
    };

    mouseupListener = (event) => {
        if (!state.isPanning || !elements.lightboxImage) return;
        event.preventDefault();
        state.isPanning = false;
        elements.lightboxImage.style.cursor = 'grab';
        elements.lightboxImage.classList.remove('panning');
    };

    mouseleaveListener = (event) => {
        if (state.isPanning) {
            mouseupListener(event);
        }
    };

    setTimeout(() => {
        const currentLightboxInstance = document.getElementById('screenshotLightbox');
        if (!currentLightboxInstance) { console.error("[Lightbox] openLightbox (setTimeout): –õ–∞–π—Ç–±–æ–∫—Å –∏—Å—á–µ–∑!"); return; }

        originalTriggerElement = document.activeElement;
        currentLightboxInstance._closeLightboxFunction = closeLightboxInternal;
        currentLightboxInstance._navigateImageFunction = navigateImage;

        if (elements.closeBtn) {
            if (elements.closeBtn._clickHandler) elements.closeBtn.removeEventListener('click', elements.closeBtn._clickHandler);
            elements.closeBtn._clickHandler = () => { if (currentLightboxInstance._closeLightboxFunction) currentLightboxInstance._closeLightboxFunction(); };
            elements.closeBtn.addEventListener('click', elements.closeBtn._clickHandler);
        }

        if (currentLightboxInstance._overlayClickHandler) currentLightboxInstance.removeEventListener('click', currentLightboxInstance._overlayClickHandler);
        currentLightboxInstance._overlayClickHandler = (event) => {
            if (event.target === currentLightboxInstance) {
                if (currentLightboxInstance._closeLightboxFunction) currentLightboxInstance._closeLightboxFunction();
            }
        };
        currentLightboxInstance.addEventListener('click', currentLightboxInstance._overlayClickHandler);


        if (elements.prevBtn) {
            if (elements.prevBtn._clickHandler) elements.prevBtn.removeEventListener('click', elements.prevBtn._clickHandler);
            elements.prevBtn._clickHandler = () => { if (currentLightboxInstance._navigateImageFunction) currentLightboxInstance._navigateImageFunction('prev'); };
            elements.prevBtn.addEventListener('click', elements.prevBtn._clickHandler);
        }
        if (elements.nextBtn) {
            if (elements.nextBtn._clickHandler) elements.nextBtn.removeEventListener('click', elements.nextBtn._clickHandler);
            elements.nextBtn._clickHandler = () => { if (currentLightboxInstance._navigateImageFunction) currentLightboxInstance._navigateImageFunction('next'); };
            elements.nextBtn.addEventListener('click', elements.nextBtn._clickHandler);
        }

        if (elements.lightboxImage) {
            if (wheelListener && elements.lightboxImage._wheelListenerAttached) elements.lightboxImage.removeEventListener('wheel', wheelListener);
            if (mousedownListener && elements.lightboxImage._mousedownListenerAttached) elements.lightboxImage.removeEventListener('mousedown', mousedownListener);
            if (dblClickListener && elements.lightboxImage._dblClickListenerAttached) elements.lightboxImage.removeEventListener('dblclick', dblClickListener);
            if (mouseleaveListener && elements.lightboxImage._mouseleaveListenerAttached) elements.lightboxImage.removeEventListener('mouseleave', mouseleaveListener);

            elements.lightboxImage.addEventListener('wheel', wheelListener, { passive: false });
            elements.lightboxImage._wheelListenerAttached = true;
            elements.lightboxImage.addEventListener('dblclick', dblClickListener);
            elements.lightboxImage._dblClickListenerAttached = true;
            elements.lightboxImage.addEventListener('mousedown', mousedownListener);
            elements.lightboxImage._mousedownListenerAttached = true;
            elements.lightboxImage.addEventListener('mouseleave', mouseleaveListener);
            elements.lightboxImage._mouseleaveListenerAttached = true;
        }

        if (mousemoveListener && !document._lightboxMousemoveListenerAttached) {
            document.addEventListener('mousemove', mousemoveListener);
            document._lightboxMousemoveListenerAttached = true;
        }
        if (mouseupListener && !document._lightboxMouseupListenerAttached) {
            document.addEventListener('mouseup', mouseupListener);
            document._lightboxMouseupListenerAttached = true;
        }

        currentLightboxInstance.classList.remove('hidden');
        requestAnimationFrame(() => {
            currentLightboxInstance.classList.remove('opacity-0');
            currentLightboxInstance.classList.add('opacity-100');
        });
        document.body.classList.add('overflow-hidden');

        showImageAtIndex(state.currentIndex, lightboxBlobs, stateManagerForShowImage, elementsForShowImage);

        setTimeout(() => {
            if (currentLightboxInstance && typeof currentLightboxInstance.focus === 'function') {
                currentLightboxInstance.focus();
            }
        }, 50);
    }, 0);
}


async function handleViewScreenshotClick(event) {
    const button = event.currentTarget;
    const algorithmId = button.dataset.algorithmId;
    const stepIndexStr = button.dataset.stepIndex;

    console.log(`[handleViewScreenshotClick v2] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. Algorithm ID: ${algorithmId}, Step Index: ${stepIndexStr}`);

    if (!algorithmId || algorithmId === 'unknown') {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (data-algorithm-id) –Ω–∞ –∫–Ω–æ–ø–∫–µ:", button);
        showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤", "error");
        return;
    }
    const stepIndex = (stepIndexStr !== undefined && stepIndexStr !== 'unknown' && !isNaN(parseInt(stepIndexStr, 10)))
        ? parseInt(stepIndexStr, 10)
        : null;

    const originalContent = button.innerHTML;
    button.disabled = true;
    button.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> –ó–∞–≥—Ä—É–∑–∫–∞...';

    try {
        console.log(`[handleViewScreenshotClick v2] –ó–∞–ø—Ä–æ—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ 'parentId' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º: ${algorithmId}`);
        const allParentScreenshots = await getAllFromIndex('screenshots', 'parentId', algorithmId);
        const algorithmScreenshots = allParentScreenshots.filter(s => s.parentType === 'algorithm');
        console.log(`[handleViewScreenshotClick v2] –ü–æ–ª—É—á–µ–Ω–æ ${algorithmScreenshots?.length ?? 0} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è algorithmId=${algorithmId}.`);

        if (!Array.isArray(algorithmScreenshots)) {
            console.error("[handleViewScreenshotClick v2] –û—à–∏–±–∫–∞: getAllFromIndex –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤!", algorithmScreenshots);
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤");
        }

        let screenshotsToShow = [];
        let stepTitleSuffix = '';

        if (stepIndex !== null) {
            screenshotsToShow = algorithmScreenshots.filter(s => s.stepIndex === stepIndex);
            stepTitleSuffix = ` (–®–∞–≥ ${stepIndex + 1})`;
            console.log(`[handleViewScreenshotClick v2] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${screenshotsToShow.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —à–∞–≥–∞ ${stepIndex}.`);
            if (screenshotsToShow.length === 0) {
                showNotification("–î–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.", "info");
                return;
            }
        } else {
            screenshotsToShow = algorithmScreenshots;
            console.log(`[handleViewScreenshotClick v2] –ò–Ω–¥–µ–∫—Å —à–∞–≥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ ${screenshotsToShow.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ${algorithmId}.`);
            if (screenshotsToShow.length === 0) {
                showNotification("–î–ª—è —ç—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.", "info");
                return;
            }
        }

        let algorithmTitle = algorithmId;
        try {
            if (algorithmId === 'main') {
                algorithmTitle = algorithms?.main?.title || '–ì–ª–∞–≤–Ω–∞—è';
            } else {
                const sections = ['program', 'skzi', 'lk1c', 'webReg'];
                let found = false;
                for (const section of sections) {
                    if (algorithms && Array.isArray(algorithms[section])) {
                        const foundAlgo = algorithms[section].find(a => String(a?.id) === String(algorithmId));
                        if (foundAlgo) {
                            algorithmTitle = foundAlgo.title || algorithmId;
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) { console.warn(`[handleViewScreenshotClick v2] –ê–ª–≥–æ—Ä–∏—Ç–º —Å ID ${algorithmId} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞.`); }
            }
        } catch (titleError) {
            console.warn("[handleViewScreenshotClick v2] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:", titleError);
        }

        const finalModalTitle = `${algorithmTitle}${stepTitleSuffix}`;
        console.log(`[handleViewScreenshotClick v2] –í—ã–∑–æ–≤ showScreenshotViewerModal —Å ${screenshotsToShow.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏. Title: "${finalModalTitle}"`);
        if (typeof showScreenshotViewerModal === 'function') {
            await showScreenshotViewerModal(screenshotsToShow, algorithmId, finalModalTitle);
        } else {
            console.error("–§—É–Ω–∫—Ü–∏—è showScreenshotViewerModal –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
            showNotification("–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error");
        }

    } catch (error) {
        console.error(`[handleViewScreenshotClick v2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ID ${algorithmId}:`, error);
        showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, "error");
    } finally {
        button.disabled = false;
        button.innerHTML = originalContent;
        console.log("[handleViewScreenshotClick v2] –ö–Ω–æ–ø–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
    }
}


async function addBookmarkToDOM(bookmarkData) {
    const bookmarksContainer = document.getElementById('bookmarksContainer');
    if (!bookmarksContainer) {
        console.error("addBookmarkToDOM: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #bookmarksContainer –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    const noBookmarksMsg = bookmarksContainer.querySelector('.col-span-full.text-center');
    if (noBookmarksMsg) {
        noBookmarksMsg.remove();
        if (bookmarksContainer.classList.contains('flex-col')) {
            bookmarksContainer.classList.remove('flex', 'flex-col');
            if (!bookmarksContainer.classList.contains('grid')) {
                const gridColsClasses = SECTION_GRID_COLS.bookmarksContainer || SECTION_GRID_COLS.default;
                bookmarksContainer.classList.add(...CARD_CONTAINER_CLASSES, ...gridColsClasses);
                console.log("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–ª–∞—Å—Å—ã grid –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è '–Ω–µ—Ç –∑–∞–∫–ª–∞–¥–æ–∫'");
            }
        }
    }

    const newElement = await createBookmarkElement(bookmarkData);
    if (!newElement) {
        console.error("addBookmarkToDOM: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DOM-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏:", bookmarkData);
        return;
    }

    bookmarksContainer.appendChild(newElement);
    console.log(`–ó–∞–∫–ª–∞–¥–∫–∞ ID ${bookmarkData.id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DOM.`);

    applyCurrentView('bookmarksContainer');
}

const closeModalOnEscapeWithPropagationStop = (event, modalIdToClose) => {
    const modalElement = document.getElementById(modalIdToClose);
    if (!modalElement || modalElement.classList.contains('hidden')) {
        return;
    }

    if (event.key === 'Escape') {
        const visibleModals = getVisibleModals();
        const topmostModal = visibleModals.length > 0 ? getTopmostModal(visibleModals) : null;

        if (topmostModal && topmostModal.id !== modalIdToClose) {
            console.log(`[closeModalOnEscapeWPS] Escape –¥–ª—è #${modalIdToClose}, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ #${topmostModal.id}. –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º.`);
            return;
        }

        console.log(`[closeModalOnEscapeWPS] –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ #${modalIdToClose} –ø–æ Escape.`);
        modalElement.classList.add('hidden');

        if (modalElement._escapeHandler) {
            document.removeEventListener('keydown', modalElement._escapeHandler);
            delete modalElement._escapeHandler;
        }

        if (modalIdToClose === 'bookmarkDetailModal') {
            const images = modalElement.querySelectorAll('#bookmarkDetailScreenshotsGrid img[data-object-url]');
            images.forEach(img => {
                if (img.dataset.objectUrl) {
                    try { URL.revokeObjectURL(img.dataset.objectUrl); } catch (revokeError) { console.warn(`–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ URL –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ ${modalIdToClose}:`, revokeError); }
                    delete img.dataset.objectUrl;
                }
            });
        }

        if (getVisibleModals().length === 0) {
            document.body.classList.remove('overflow-hidden');
        }

        event.stopPropagation();
        event.stopImmediatePropagation();
    }
};


async function updateBookmarkInDOM(bookmarkData) {
    const bookmarksContainer = document.getElementById('bookmarksContainer');
    if (!bookmarksContainer || !bookmarkData || typeof bookmarkData.id === 'undefined') {
        console.error("updateBookmarkInDOM: –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    const existingElement = bookmarksContainer.querySelector(`.bookmark-item[data-id="${bookmarkData.id}"]`);
    if (!existingElement) {
        console.warn(`updateBookmarkInDOM: –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∑–∞–∫–ª–∞–¥–∫–∏ —Å ID ${bookmarkData.id} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ DOM.`);
        await addBookmarkToDOM(bookmarkData);
        return;
    }

    const newElement = await createBookmarkElement(bookmarkData);
    if (!newElement) {
        console.error(`updateBookmarkInDOM: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ ID ${bookmarkData.id}.`);
        return;
    }

    existingElement.replaceWith(newElement);
    console.log(`–ó–∞–∫–ª–∞–¥–∫–∞ ID ${bookmarkData.id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ DOM.`);

    applyCurrentView('bookmarksContainer');
}


function removeBookmarkFromDOM(bookmarkId) {
    const bookmarksContainer = document.getElementById('bookmarksContainer');
    if (!bookmarksContainer) {
        console.error("removeBookmarkFromDOM: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #bookmarksContainer –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    const itemToRemove = bookmarksContainer.querySelector(`.bookmark-item[data-id="${bookmarkId}"]`);
    if (itemToRemove) {
        itemToRemove.remove();
        console.log(`–£–¥–∞–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∑–∞–∫–ª–∞–¥–∫–∏ ${bookmarkId} –∏–∑ DOM.`);

        if (!bookmarksContainer.querySelector('.bookmark-item')) {
            bookmarksContainer.innerHTML = '<div class="col-span-full text-center py-6 text-gray-500 dark:text-gray-400">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫</div>';
            console.log("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–∫–ª–∞–¥–æ–∫ –ø—É—Å—Ç, –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
        }
        applyCurrentView('bookmarksContainer');

    } else {
        console.warn(`removeBookmarkFromDOM: –≠–ª–µ–º–µ–Ω—Ç –∑–∞–∫–ª–∞–¥–∫–∏ ${bookmarkId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`);
    }
}


function attachStepDeleteHandler(deleteButton, stepElement, containerElement, section, mode = 'edit') {
    if (!deleteButton || !stepElement || !containerElement) {
        console.error("attachStepDeleteHandler: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.");
        return;
    }

    const oldHandler = deleteButton._deleteHandler;
    if (oldHandler) {
        deleteButton.removeEventListener('click', oldHandler);
    }

    const newHandler = () => {
        const isMainSection = section === 'main';
        const canDelete = (mode === 'add' && containerElement.children.length > 0) ||
            (mode === 'edit' && (containerElement.children.length > 1 || !isMainSection));

        if (canDelete) {
            console.log(`–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–≥–∞ ${stepElement.dataset.stepIndex || '(–Ω–æ–≤—ã–π)'} –≤ —Ä–µ–∂–∏–º–µ ${mode}, —Å–µ–∫—Ü–∏—è ${section}`);
            const previewImg = stepElement.querySelector('.screenshot-preview');
            const objectUrl = previewImg?.dataset.objectUrl;
            if (objectUrl) {
                URL.revokeObjectURL(objectUrl);
                console.log("–û—Å–≤–æ–±–æ–∂–¥–µ–Ω Object URL –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–≥–∞:", objectUrl);
                delete previewImg.dataset.objectUrl;
            }
            const currentId = stepElement.dataset.currentScreenshotId;
            if (currentId && !stepElement._tempScreenshotBlob) {
                stepElement.dataset.deleteScreenshot = "true";
                console.log(`–®–∞–≥ —É–¥–∞–ª—è–µ—Ç—Å—è, —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç ${currentId} –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.`);
            } else if (stepElement._tempScreenshotBlob) {
                delete stepElement._tempScreenshotBlob;
                console.log("–®–∞–≥ —É–¥–∞–ª—è–µ—Ç—Å—è, –≤—Ä–µ–º–µ–Ω–Ω—ã–π Blob (_tempScreenshotBlob) –æ—á–∏—â–µ–Ω.");
            }

            stepElement.remove();

            if (typeof updateStepNumbers === 'function') {
                updateStepNumbers(containerElement);
            } else {
                console.error("–§—É–Ω–∫—Ü–∏—è updateStepNumbers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }

            if (mode === 'edit') {
                isUISettingsDirty = true;
                console.log("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–≥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.");
            } else if (mode === 'add' && containerElement.children.length === 0) {
                containerElement.innerHTML = '<p class="text-gray-500 dark:text-gray-400 text-center">–î–æ–±–∞–≤—å—Ç–µ —à–∞–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.</p>';
            }

        } else if (isMainSection && mode === 'edit') {
            showNotification('–ì–ª–∞–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥.', 'warning');
        } else {
            console.log("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —à–∞–≥ - –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.");
        }
    };

    deleteButton.addEventListener('click', newHandler);
    deleteButton._deleteHandler = newHandler;
}


function updateStepNumbers(containerElement) {
    if (!containerElement) return;
    const steps = containerElement.querySelectorAll('.edit-step');
    steps.forEach((step, index) => {
        const numberLabel = step.querySelector('.step-number-label');
        if (numberLabel) {
            numberLabel.textContent = `–®–∞–≥ ${index + 1}`;
        }
        const deleteButton = step.querySelector('.delete-step');
        if (deleteButton) {
            deleteButton.setAttribute('aria-label', `–£–¥–∞–ª–∏—Ç—å —à–∞–≥ ${index + 1}`);
        }
    });
    console.log(`–ù–æ–º–µ—Ä–∞ —à–∞–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ ${containerElement.id}`);
}


function deepEqual(obj1, obj2) {
    if (obj1 === obj2) {
        return true;
    }

    if (obj1 === null || typeof obj1 !== 'object' || obj2 === null || typeof obj2 !== 'object') {

        if (Number.isNaN(obj1) && Number.isNaN(obj2)) {
            return true;
        }
        return false;
    }

    if (obj1 instanceof Date && obj2 instanceof Date) {
        return obj1.getTime() === obj2.getTime();
    }
    if (obj1 instanceof RegExp && obj2 instanceof RegExp) {
        return obj1.toString() === obj2.toString();
    }

    if (Array.isArray(obj1) && Array.isArray(obj2)) {
        if (obj1.length !== obj2.length) {
            return false;
        }
        for (let i = 0; i < obj1.length; i++) {
            if (!deepEqual(obj1[i], obj2[i])) {
                return false;
            }
        }
        return true;
    }

    if (Array.isArray(obj1) || Array.isArray(obj2)) {
        return false;
    }

    const keys1 = Object.keys(obj1);
    const keys2 = Object.keys(obj2);

    if (keys1.length !== keys2.length) {
        return false;
    }

    for (const key of keys1) {
        if (!Object.prototype.hasOwnProperty.call(obj2, key) || !deepEqual(obj1[key], obj2[key])) {
            return false;
        }
    }

    return true;
}


function openAnimatedModal(modalElement) {
    if (!modalElement) return;

    modalElement.classList.add('modal-transition');
    modalElement.classList.remove('modal-visible');
    modalElement.classList.remove('hidden');

    requestAnimationFrame(() => {
        requestAnimationFrame(() => {
            modalElement.classList.add('modal-visible');
            document.body.classList.add('modal-open');
            console.log(`[openAnimatedModal] Opened modal #${modalElement.id}`);
        });
    });

    if (typeof addEscapeHandler === 'function' && !modalElement._escapeHandler) {
        addEscapeHandler(modalElement);
    }
}


function closeAnimatedModal(modalElement) {
    if (!modalElement || modalElement.classList.contains('hidden')) return;

    modalElement.classList.add('modal-transition');
    modalElement.classList.remove('modal-visible');

    if (typeof removeEscapeHandler === 'function') {
        removeEscapeHandler(modalElement);
    }

    const handleTransitionEnd = (event) => {
        if (event.target === modalElement && event.propertyName === 'opacity') {
            modalElement.classList.add('hidden');
            document.body.classList.remove('modal-open');
            modalElement.removeEventListener('transitionend', handleTransitionEnd);
            console.log(`[closeAnimatedModal] Closed modal #${modalElement.id}`);

            if (modalElement.id === 'bookmarkModal') {
                const form = modalElement.querySelector('#bookmarkForm');
                if (form) {
                    form.reset();
                    const idInput = form.querySelector('#bookmarkId');
                    if (idInput) idInput.value = '';
                    const modalTitleEl = modalElement.querySelector('#bookmarkModalTitle');
                    if (modalTitleEl) modalTitleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É';
                    const saveButton = modalElement.querySelector('#saveBookmarkBtn');
                    if (saveButton) saveButton.innerHTML = '<i class="fas fa-plus mr-1"></i> –î–æ–±–∞–≤–∏—Ç—å';
                    delete form._tempScreenshotBlobs;
                    delete form.dataset.screenshotsToDelete;
                    const thumbsContainer = form.querySelector('#bookmarkScreenshotThumbnailsContainer');
                    if (thumbsContainer) thumbsContainer.innerHTML = '';
                    console.log(`[closeAnimatedModal] Cleaned up bookmarkModal form.`);
                }
            }
        }
    };

    modalElement.addEventListener('transitionend', handleTransitionEnd);

    setTimeout(() => {
        if (!modalElement.classList.contains('hidden')) {
            console.warn(`[closeAnimatedModal] Transitionend fallback triggered for #${modalElement.id}`);
            modalElement.classList.add('hidden');
            document.body.classList.remove('modal-open');
            modalElement.removeEventListener('transitionend', handleTransitionEnd);
        }
    }, 300);
}

closeModalBtn?.addEventListener('click', () => closeAnimatedModal(algorithmModal));

editMainBtn?.addEventListener('click', async () => {
    if (typeof editAlgorithm === 'function') {
        await editAlgorithm('main');
    } else {
        console.error("–§—É–Ω–∫—Ü–∏—è editAlgorithm –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ editMainBtn");
    }
});

const exportMainBtn = document.getElementById('exportMainBtn');
if (exportMainBtn) {
    exportMainBtn.addEventListener('click', () => {
        const mainAlgorithmContainer = document.getElementById('mainAlgorithm');
        const mainTitleElement = document.querySelector('#mainContent h2');
        const title = mainTitleElement ? mainTitleElement.textContent : '–ì–ª–∞–≤–Ω–∞—è';
        ExportService.exportElementToPdf(mainAlgorithmContainer, title);
    });
}


async function showAddModal(section) {
    initialAddState = null;

    const addModal = document.getElementById('addModal');
    const addModalTitle = document.getElementById('addModalTitle');
    const newAlgorithmTitle = document.getElementById('newAlgorithmTitle');
    const newAlgorithmDesc = document.getElementById('newAlgorithmDesc');
    const newStepsContainerElement = document.getElementById('newSteps');
    const saveButton = document.getElementById('saveNewAlgorithmBtn');

    if (!addModal || !addModalTitle || !newAlgorithmTitle || !newAlgorithmDesc || !newStepsContainerElement || !saveButton) {
        console.error("showAddModal (v2 - Collapse): –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.");
        return;
    }

    const actionsContainer = addModal.querySelector('.flex.justify-end.items-center');
    if (actionsContainer && !actionsContainer.querySelector('.collapse-all-btn')) {
        const collapseControls = document.createElement('div');
        collapseControls.className = 'mr-auto';
        collapseControls.innerHTML = `
            <button type="button" class="collapse-all-btn px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 rounded hover:bg-gray-300">–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ</button>
            <button type="button" class="expand-all-btn px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 rounded hover:bg-gray-300 ml-1">–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ</button>
        `;
        actionsContainer.insertBefore(collapseControls, actionsContainer.firstChild);

        actionsContainer.querySelector('.collapse-all-btn').addEventListener('click', () => {
            newStepsContainerElement.querySelectorAll('.edit-step').forEach(step => toggleStepCollapse(step, true));
        });
        actionsContainer.querySelector('.expand-all-btn').addEventListener('click', () => {
            newStepsContainerElement.querySelectorAll('.edit-step').forEach(step => toggleStepCollapse(step, false));
        });
    }

    addModalTitle.textContent = '–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞: ' + getSectionName(section);
    newAlgorithmTitle.value = '';
    newAlgorithmDesc.value = '';
    newStepsContainerElement.innerHTML = '';

    addNewStep(true);

    addModal.dataset.section = section;
    saveButton.disabled = false;
    saveButton.innerHTML = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';

    initStepSorting(newStepsContainerElement);
    captureInitialAddState();
    openAnimatedModal(addModal);

    setTimeout(() => newAlgorithmTitle.focus(), 50);
    console.log(`showAddModal (v2 - Collapse): –û–∫–Ω–æ –¥–ª—è —Å–µ–∫—Ü–∏–∏ '${section}' –æ—Ç–∫—Ä—ã—Ç–æ.`);
}


function initBlacklistSystem() {
    const addBlacklistEntryBtn = document.getElementById('addBlacklistEntryBtn');
    const blacklistTableContainer = document.getElementById('blacklistTableContainer');
    const searchInput = document.getElementById('blacklistSearchInput');
    const clearSearchBtn = document.getElementById('clearBlacklistSearchBtn');
    const actionsContainer = document.querySelector('#blacklistedClientsContent .flex.justify-between.items-center.mb-4');

    if (addBlacklistEntryBtn) {
        addBlacklistEntryBtn.addEventListener('click', () => showBlacklistEntryModal());
    } else {
        console.warn("–ö–Ω–æ–ø–∫–∞ #addBlacklistEntryBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
    }

    if (blacklistTableContainer) {
        blacklistTableContainer.addEventListener('click', handleBlacklistActionClick);
    }

    if (searchInput) {
        if (searchInput._debouncedSearchHandler) {
            searchInput.removeEventListener('input', searchInput._debouncedSearchHandler);
        }
        searchInput._debouncedSearchHandler = debounce(handleBlacklistSearchInput, 300);
        searchInput.addEventListener('input', searchInput._debouncedSearchHandler);
        if (clearSearchBtn) {
            clearSearchBtn.classList.toggle('hidden', searchInput.value.length === 0);
        }
    }

    if (clearSearchBtn) {
        if (clearSearchBtn._clearClickHandler) {
            clearSearchBtn.removeEventListener('click', clearSearchBtn._clearClickHandler);
        }
        clearSearchBtn._clearClickHandler = () => {
            if (searchInput) {
                searchInput.value = '';
                searchInput.focus();
                searchInput.dispatchEvent(new Event('input', { bubbles: true, cancelable: true }));
            }
        };
        clearSearchBtn.addEventListener('click', clearSearchBtn._clearClickHandler);
    }

    if (actionsContainer) {
        let sortControls = document.getElementById('blacklistSortControls');
        if (!sortControls) {
            sortControls = document.createElement('div');
            sortControls.id = 'blacklistSortControls';
            sortControls.className = 'flex items-center gap-2';
            sortControls.innerHTML = `
                <button id="sortBlacklistByLevel" class="px-3 py-1 text-sm font-medium rounded-md transition" data-sort="level">–ü–æ —É—Ä–æ–≤–Ω—é</button>
                <button id="sortBlacklistByDate" class="px-3 py-1 text-sm font-medium rounded-md transition" data-sort="date">–ü–æ –¥–∞—Ç–µ</button>
            `;
            const addBtnContainer = addBlacklistEntryBtn ? addBlacklistEntryBtn.parentElement : null;
            if (addBtnContainer && addBlacklistEntryBtn) {
                addBtnContainer.insertBefore(sortControls, addBlacklistEntryBtn);
            } else {
                actionsContainer.insertBefore(sortControls, actionsContainer.firstChild);
            }
        }

        const updateSortButtonsUI = () => {
            const levelBtn = document.getElementById('sortBlacklistByLevel');
            const dateBtn = document.getElementById('sortBlacklistByDate');
            if (!levelBtn || !dateBtn) return;

            [levelBtn, dateBtn].forEach(btn => {
                btn.className = 'px-3 py-1 text-sm font-medium rounded-md transition bg-gray-200 dark:bg-gray-600 hover:bg-gray-300';
                const icon = btn.querySelector('i');
                if (icon) icon.remove();
            });

            const activeBtn = currentBlacklistSort.criteria === 'level' ? levelBtn : dateBtn;
            activeBtn.classList.remove('bg-gray-200', 'dark:bg-gray-600', 'hover:bg-gray-300');
            activeBtn.classList.add('bg-primary', 'text-white');

            const iconEl = document.createElement('i');
            iconEl.className = `fas ${currentBlacklistSort.direction === 'desc' ? 'fa-arrow-down' : 'fa-arrow-up'} ml-2`;
            activeBtn.appendChild(iconEl);
        };

        const handleSortClick = (criteria) => {
            if (currentBlacklistSort.criteria === criteria) {
                currentBlacklistSort.direction = currentBlacklistSort.direction === 'desc' ? 'asc' : 'desc';
            } else {
                currentBlacklistSort.criteria = criteria;
                currentBlacklistSort.direction = 'desc';
            }
            updateSortButtonsUI();
            sortAndRenderBlacklist();
        };

        document.getElementById('sortBlacklistByLevel').addEventListener('click', () => handleSortClick('level'));
        document.getElementById('sortBlacklistByDate').addEventListener('click', () => handleSortClick('date'));

        updateSortButtonsUI();
    }

    loadBlacklistedClients();
    console.log("–°–∏—Å—Ç–µ–º–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (v2, —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏ –∏ —Å–º–µ–Ω–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏).");
}


async function loadBlacklistedClients() {
    if (!db) {
        console.error("loadBlacklistedClients: DB not ready.");
        allBlacklistEntriesCache = [];
        sortAndRenderBlacklist();
        return;
    }
    try {
        const entries = await getAllBlacklistEntriesDB();
        allBlacklistEntriesCache = entries || [];

        allBlacklistEntriesCache.forEach(entry => {
            if (!entry.dateAdded) {
                entry.dateAdded = entry.dateUpdated || new Date(0).toISOString();
            }
        });

        sortAndRenderBlacklist();

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:", error);
        allBlacklistEntriesCache = [];
        sortAndRenderBlacklist();
        showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", "error");
    }
}


async function handleBlacklistSearchInput() {
    const searchInput = document.getElementById('blacklistSearchInput');
    const clearSearchBtn = document.getElementById('clearBlacklistSearchBtn');

    if (!searchInput) {
        console.error("handleBlacklistSearchInput: –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        return;
    }

    currentBlacklistSearchQuery = searchInput.value;

    if (clearSearchBtn) {
        clearSearchBtn.classList.toggle('hidden', currentBlacklistSearchQuery.trim().length === 0);
    }

    sortAndRenderBlacklist();
}


function renderBlacklistTable(entries) {
    const container = document.getElementById('blacklistTableContainer');
    if (!container) {
        console.error("renderBlacklistTable: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #blacklistTableContainer –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    container.innerHTML = '';

    if (!entries || entries.length === 0) {
        const query = document.getElementById('blacklistSearchInput')?.value || '';
        if (query.trim()) {
            container.innerHTML = `<p class="text-gray-500 dark:text-gray-400 text-center py-4">–ü–æ –∑–∞–ø—Ä–æ—Å—É "${escapeHtml(query)}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>`;
        } else {
            container.innerHTML = '<p class="text-gray-500 dark:text-gray-400 text-center py-4">–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.</p>';
        }
        return;
    }

    const table = document.createElement('table');

    table.className = 'w-full divide-y divide-gray-200 dark:divide-gray-600 table-fixed';

    table.innerHTML = `
        <thead class="bg-gray-50 dark:bg-gray-700/50">
            <tr>
                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider w-[25%]">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</th>
                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider w-[12%]">–ò–ù–ù</th>
                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider w-[12%]">–¢–µ–ª–µ—Ñ–æ–Ω</th>
                <th scope="col" class="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider w-[10%]">–£—Ä–æ–≤–µ–Ω—å</th>
                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider w-[12%]">–î–∞—Ç–∞ –¥–æ–±.</th>
                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</th>
                <th scope="col" class="px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider w-[10%]">–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
        </thead>
        <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
        </tbody>
    `;

    const tbody = table.querySelector('tbody');
    const lowerQuery = (document.getElementById('blacklistSearchInput')?.value || '').trim().toLowerCase();

    const highlight = (text) => {
        if (!text || !lowerQuery) return escapeHtml(text);
        const regex = new RegExp(`(${escapeRegExp(lowerQuery)})`, 'gi');
        return escapeHtml(text).replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-600 rounded-sm px-0.5">$1</mark>');
    };

    entries.forEach(entry => {
        const tr = document.createElement('tr');
        tr.dataset.entryId = entry.id;
        tr.className = 'hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-150 cursor-pointer';

        const level = entry.level || 1;
        let levelHtml = '', levelText = '–ù–∏–∑–∫–∏–π', levelColorClass = 'bg-green-100 text-green-800 dark:bg-green-800/80 dark:text-green-200';
        switch (level) {
            case 2: levelText = '–°—Ä–µ–¥–Ω–∏–π'; levelColorClass = 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800/80 dark:text-yellow-200'; break;
            case 3: levelText = '–í—ã—Å–æ–∫–∏–π'; levelColorClass = 'bg-red-100 text-red-800 dark:bg-red-800/80 dark:text-red-200'; break;
        }
        levelHtml = `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${levelColorClass}" title="–£—Ä–æ–≤–µ–Ω—å ${level}: ${levelText}">${level}</span>`;

        const dateAddedStr = entry.dateAdded ? new Date(entry.dateAdded).toLocaleDateString() : 'N/A';

        tr.innerHTML = `
            <td class="px-4 py-4 text-sm font-medium text-gray-800 dark:text-gray-100">
                <div class="truncate" title="${escapeHtml(entry.organizationName)}">${highlight(entry.organizationName)}</div>
            </td>
            <td class="px-4 py-4 text-sm text-gray-500 dark:text-gray-400 font-mono">
                <div class="truncate" title="${escapeHtml(entry.inn || '-')}">${highlight(entry.inn || '-')}</div>
            </td>
            <td class="px-4 py-4 text-sm text-gray-500 dark:text-gray-400 font-mono">
                <div class="truncate" title="${escapeHtml(entry.phone || '-')}">${highlight(entry.phone || '-')}</div>
            </td>
            <td class="px-4 py-4 text-sm text-center">${levelHtml}</td>
            <td class="px-4 py-4 text-sm text-gray-500 dark:text-gray-400">${dateAddedStr}</td>
            <td class="px-4 py-4 text-sm text-gray-500 dark:text-gray-400">
                <div class="truncate" title="${escapeHtml(entry.notes || '')}">${highlight(entry.notes || '')}</div>
            </td>
            <td class="px-4 py-4 text-right text-sm font-medium">
                <button class="text-primary hover:text-secondary p-1" data-action="edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"><i class="fas fa-edit"></i></button>
                <button class="text-red-600 hover:text-red-800 p-1 ml-2" data-action="delete" title="–£–¥–∞–ª–∏—Ç—å"><i class="fas fa-trash"></i></button>
            </td>
        `;

        if (level === 3) {
            tr.classList.add('bg-red-50/50', 'dark:bg-red-900/40');
        } else if (level === 2) {
            tr.classList.add('bg-yellow-50/50', 'dark:bg-yellow-900/30');
        }

        tbody.appendChild(tr);
    });

    container.appendChild(table);
}


async function getBlacklistEntriesByInn(inn) {
    const LOG_PREFIX = "[getBlacklistEntriesByInn]";
    console.log(`${LOG_PREFIX} –ó–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ò–ù–ù: ${inn}`);

    if (!db) {
        console.warn(`${LOG_PREFIX} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.`);
        return [];
    }
    try {
        const entries = await getAllFromIndex('blacklistedClients', 'inn', inn);
        console.log(`${LOG_PREFIX} –†–µ–∑—É–ª—å—Ç–∞—Ç getAllFromIndex –¥–ª—è –ò–ù–ù ${inn}: –Ω–∞–π–¥–µ–Ω–æ ${entries.length} –∑–∞–ø–∏—Å–µ–π.`);
        return entries || [];
    } catch (error) {
        console.error(`${LOG_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ getAllFromIndex –¥–ª—è –ò–ù–ù ${inn}:`, error);
        return [];
    }
}


function handleBlacklistActionClick(event) {
    const button = event.target.closest('button[data-action]');
    const tr = event.target.closest('tr[data-entry-id]');

    if (!tr) return;

    const entryId = parseInt(tr.dataset.entryId, 10);
    const action = button ? button.dataset.action : null;

    if (action === 'edit') {
        showBlacklistEntryModal(entryId);
    } else if (action === 'delete') {
        const orgName = tr.querySelector('td:first-child').textContent;
        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å "${orgName}" –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞?`)) {
            deleteBlacklistEntry(entryId);
        }
    } else if (!action) {
        showBlacklistDetailModal(entryId);
    }
}


async function showBlacklistDetailModal(entryId) {
    const modalId = 'blacklistDetailModal';
    let modal = document.getElementById(modalId);

    if (!modal) {
        modal = document.createElement('div');
        modal.id = modalId;
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 hidden z-60 p-4 flex items-center justify-center';
        modal.innerHTML = `
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] flex flex-col">
                <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
                    <div class="flex justify-between items-start gap-4">
                        <h2 id="blacklistDetailTitle" class="text-lg font-bold text-gray-900 dark:text-gray-100 break-words min-w-0">–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏</h2>
                        <div class="flex-shrink-0">
                            <button class="close-modal-btn p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200" title="–ó–∞–∫—Ä—ã—Ç—å (Esc)"><i class="fas fa-times text-xl"></i></button>
                        </div>
                    </div>
                </div>
                <div id="blacklistDetailContent" class="p-6 overflow-y-auto">
                </div>
                <div class="p-4 bg-gray-50 dark:bg-gray-700/50 border-t border-gray-200 dark:border-gray-600 flex justify-end gap-3">
                    <button id="blacklistDetailEditBtn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md text-sm font-medium">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button id="blacklistDetailDeleteBtn" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md text-sm font-medium">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
        document.body.appendChild(modal);

        const closeModal = () => {
            modal.classList.add('hidden');
            if (getVisibleModals().length === 0) document.body.classList.remove('modal-open');
        };

        modal.querySelectorAll('.close-modal-btn').forEach(btn => btn.addEventListener('click', closeModal));

        document.addEventListener('keydown', e => {
            if (e.key === 'Escape' && !modal.classList.contains('hidden')) closeModal();
        });

        modal.querySelector('#blacklistDetailEditBtn').addEventListener('click', () => {
            const currentId = parseInt(modal.dataset.currentId, 10);
            if (currentId) {
                closeModal();
                showBlacklistEntryModal(currentId);
            }
        });

        modal.querySelector('#blacklistDetailDeleteBtn').addEventListener('click', async () => {
            const currentId = parseInt(modal.dataset.currentId, 10);
            const entry = await getBlacklistEntryDB(currentId);
            if (entry && confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å "${entry.organizationName}" –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞?`)) {
                closeModal();
                deleteBlacklistEntry(currentId);
            }
        });
    }

    const titleEl = modal.querySelector('#blacklistDetailTitle');
    const contentEl = modal.querySelector('#blacklistDetailContent');

    titleEl.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    contentEl.innerHTML = '<p class="text-center text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>';
    modal.classList.remove('hidden');
    document.body.classList.add('modal-open');
    modal.dataset.currentId = entryId;

    try {
        const entry = await getFromIndexedDB('blacklistedClients', entryId);
        if (!entry) {
            titleEl.textContent = '–û—à–∏–±–∫–∞';
            contentEl.innerHTML = '<p class="text-center text-red-500">–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</p>';
            return;
        }

        titleEl.textContent = entry.organizationName;

        const level = entry.level || 1;
        let levelText = '–ù–∏–∑–∫–∏–π', levelColorClass = 'bg-green-100 text-green-800 dark:bg-green-800/80 dark:text-green-200';
        switch (level) {
            case 2: levelText = '–°—Ä–µ–¥–Ω–∏–π'; levelColorClass = 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800/80 dark:text-yellow-200'; break;
            case 3: levelText = '–í—ã—Å–æ–∫–∏–π'; levelColorClass = 'bg-red-100 text-red-800 dark:bg-red-800/80 dark:text-red-200'; break;
        }

        contentEl.innerHTML = `
            <dl class="space-y-4">
                <div>
                    <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">–£—Ä–æ–≤–µ–Ω—å</dt>
                    <dd class="mt-1"><span class="px-2.5 py-1 text-sm font-semibold ${levelColorClass}">${level} - ${levelText}</span></dd>
                </div>
                <div>
                    <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">–ò–ù–ù</dt>
                    <dd class="mt-1 text-base text-gray-900 dark:text-gray-200 font-mono">${escapeHtml(entry.inn || '–ù–µ —É–∫–∞–∑–∞–Ω')}</dd>
                </div>
                 <div>
                    <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">–¢–µ–ª–µ—Ñ–æ–Ω</dt>
                    <dd class="mt-1 text-base text-gray-900 dark:text-gray-200 font-mono">${escapeHtml(entry.phone || '–ù–µ —É–∫–∞–∑–∞–Ω')}</dd>
                </div>
                <div>
                    <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</dt>
                    <dd class="mt-1 text-base text-gray-900 dark:text-gray-200 bg-gray-50 dark:bg-gray-700/60 p-3 rounded-md whitespace-pre-wrap">${escapeHtml(entry.notes || '–ù–µ—Ç')}</dd>
                </div>
                 <div>
                    <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</dt>
                    <dd class="mt-1 text-base text-gray-900 dark:text-gray-200">${new Date(entry.dateAdded).toLocaleString()}</dd>
                </div>
            </dl>
        `;

    } catch (error) {
        titleEl.textContent = '–û—à–∏–±–∫–∞';
        contentEl.innerHTML = `<p class="text-center text-red-500">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}</p>`;
    }
}


async function showBlacklistEntryModal(entryId = null) {
    const modalId = 'blacklistEntryModal';
    if (blacklistEntryModalInstance && blacklistEntryModalInstance.modal && blacklistEntryModalInstance.modal.id !== modalId) {
        blacklistEntryModalInstance = null;
    }

    if (!blacklistEntryModalInstance) {
        blacklistEntryModalInstance = {};
        const modal = document.createElement('div');
        modal.id = modalId;
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 hidden z-50 p-4 flex items-center justify-center';
        modal.innerHTML = `
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-lg w-full">
                <form id="blacklistEntryForm">
                    <div class="p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-xl font-bold" id="blacklistEntryModalTitle">–î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</h2>
                            <button type="button" class="close-modal text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" aria-label="–ó–∞–∫—Ä—ã—Ç—å"><i class="fas fa-times text-xl"></i></button>
                        </div>
                        <input type="hidden" id="blacklistEntryId">
                        <div class="mb-3">
                            <label for="blacklistEntryOrgName" class="block text-sm font-medium text-gray-700 dark:text-gray-300">–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ <span class="text-red-500">*</span></label>
                            <input type="text" id="blacklistEntryOrgName" required class="mt-1 block w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm">
                        </div>
                        <div class="mb-3">
                            <label for="blacklistEntryInn" class="block text-sm font-medium text-gray-700 dark:text-gray-300">–ò–ù–ù</label>
                            <input type="text" id="blacklistEntryInn" class="mt-1 block w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm" pattern="[0-9]{10}|[0-9]{12}">
                        </div>
                        <div class="mb-3">
                            <label for="blacklistEntryPhone" class="block text-sm font-medium text-gray-700 dark:text-gray-300">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
                            <input type="tel" id="blacklistEntryPhone" class="mt-1 block w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm">
                        </div>
                        <div class="mb-3">
                            <label for="blacklistEntryNotes" class="block text-sm font-medium text-gray-700 dark:text-gray-300">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</label>
                            <textarea id="blacklistEntryNotes" rows="3" class="mt-1 block w-full px-3 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">–£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏</label>
                            <div class="mt-2 flex items-center space-x-6">
                                <label class="flex items-center">
                                    <input type="radio" name="blacklistLevel" value="1" class="form-radio h-4 w-4 text-green-600 focus:ring-green-500">
                                    <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">1 (–ù–∏–∑–∫–∏–π)</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="radio" name="blacklistLevel" value="2" class="form-radio h-4 w-4 text-yellow-500 focus:ring-yellow-400">
                                    <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">2 (–°—Ä–µ–¥–Ω–∏–π)</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="radio" name="blacklistLevel" value="3" class="form-radio h-4 w-4 text-red-600 focus:ring-red-500">
                                    <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">3 (–í—ã—Å–æ–∫–∏–π)</span>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="px-6 py-4 bg-gray-50 dark:bg-gray-700 text-right rounded-b-lg">
                        <button type="button" class="cancel-modal px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-800 dark:text-gray-200 rounded-md mr-2">–û—Ç–º–µ–Ω–∞</button>
                        <button type="submit" id="saveBlacklistEntryBtn" class="px-4 py-2 bg-primary hover:bg-secondary text-white rounded-md">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    </div>
                </form>
            </div>
        `;
        document.body.appendChild(modal);
        blacklistEntryModalInstance.modal = modal;
        blacklistEntryModalInstance.form = modal.querySelector('#blacklistEntryForm');
        blacklistEntryModalInstance.titleEl = modal.querySelector('#blacklistEntryModalTitle');
        blacklistEntryModalInstance.idInput = modal.querySelector('#blacklistEntryId');
        blacklistEntryModalInstance.orgNameInput = modal.querySelector('#blacklistEntryOrgName');
        blacklistEntryModalInstance.innInput = modal.querySelector('#blacklistEntryInn');
        blacklistEntryModalInstance.phoneInput = modal.querySelector('#blacklistEntryPhone');
        blacklistEntryModalInstance.notesInput = modal.querySelector('#blacklistEntryNotes');
        blacklistEntryModalInstance.saveBtn = modal.querySelector('#saveBlacklistEntryBtn');

        blacklistEntryModalInstance.form.addEventListener('submit', handleSaveBlacklistEntry);
        modal.querySelectorAll('.close-modal, .cancel-modal').forEach(btn =>
            btn.addEventListener('click', () => {
                modal.classList.add('hidden');
                if (getVisibleModals().length === 0) {
                    document.body.classList.remove('modal-open');
                }
            })
        );
    }

    const { modal, form, titleEl, idInput, orgNameInput, innInput, phoneInput, notesInput, saveBtn } = blacklistEntryModalInstance;

    form.reset();
    idInput.value = '';
    orgNameInput.setCustomValidity('');
    innInput.setCustomValidity('');
    phoneInput.setCustomValidity('');

    const level1Radio = form.querySelector('input[name="blacklistLevel"][value="1"]');
    if (level1Radio) level1Radio.checked = true;

    if (entryId !== null) {
        titleEl.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å';
        saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        try {
            const entry = await getBlacklistEntryDB(entryId);
            if (entry) {
                idInput.value = entry.id;
                orgNameInput.value = entry.organizationName || '';
                innInput.value = entry.inn || '';
                phoneInput.value = entry.phone || '';
                notesInput.value = entry.notes || '';

                const level = entry.level || 1;
                const levelRadio = form.querySelector(`input[name="blacklistLevel"][value="${level}"]`);
                if (levelRadio) {
                    levelRadio.checked = true;
                } else if (level1Radio) {
                    level1Radio.checked = true;
                }
            } else {
                showNotification("–ó–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error");
                return;
            }
        } catch (error) {
            showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "error");
            return;
        }
    } else {
        titleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫';
        saveBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
    }
    modal.classList.remove('hidden');
    document.body.classList.add('modal-open');
    orgNameInput.focus();
}


async function handleSaveBlacklistEntry(event) {
    event.preventDefault();
    const { form, idInput, orgNameInput, innInput, phoneInput, notesInput, saveBtn, modal } = blacklistEntryModalInstance;

    saveBtn.disabled = true;
    saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';

    const organizationName = orgNameInput.value.trim();
    const inn = innInput.value.trim();
    const phone = phoneInput.value.trim();
    const notes = notesInput.value.trim();
    const level = parseInt(form.querySelector('input[name="blacklistLevel"]:checked')?.value || '1', 10);
    const id = idInput.value ? parseInt(idInput.value, 10) : null;

    if (!organizationName) {
        orgNameInput.setCustomValidity("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.");
        orgNameInput.reportValidity();
        setTimeout(() => orgNameInput.setCustomValidity(""), 3000);
        saveBtn.disabled = false;
        saveBtn.textContent = id ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å';
        return;
    }

    if (inn && !/^\d{10}$|^\d{12}$/.test(inn)) {
        innInput.setCustomValidity("–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.");
        innInput.reportValidity();
        setTimeout(() => innInput.setCustomValidity(""), 3000);
        saveBtn.disabled = false;
        saveBtn.textContent = id ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å';
        return;
    }

    const entryData = {
        organizationName,
        organizationNameLc: organizationName.toLowerCase(),
        inn: inn || null,
        phone: phone || null,
        notes: notes || null,
        level: level,
        dateUpdated: new Date().toISOString()
    };

    try {
        let oldData = null;
        if (id) {
            entryData.id = id;
            oldData = await getBlacklistEntryDB(id);
            entryData.dateAdded = oldData?.dateAdded || new Date().toISOString();
            await updateBlacklistEntryDB(entryData);
            showNotification("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", "success");
        } else {
            entryData.dateAdded = new Date().toISOString();
            const newId = await addBlacklistEntryDB(entryData);
            entryData.id = newId;
            showNotification("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", "success");
        }

        allBlacklistEntriesCache = await getAllBlacklistEntriesDB();
        sortAndRenderBlacklist();

        if (typeof updateSearchIndex === 'function') {
            await updateSearchIndex('blacklistedClients', entryData.id, entryData, id ? 'update' : 'add', oldData);
        }
        modal.classList.add('hidden');
        if (getVisibleModals().length === 0) {
            document.body.classList.remove('modal-open');
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:", error);
        showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏", "error");
    } finally {
        saveBtn.disabled = false;
        saveBtn.textContent = id ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å';
    }
}


async function deleteBlacklistEntry(entryId) {
    try {
        const entryToDelete = await getBlacklistEntryDB(entryId);
        await deleteBlacklistEntryDB(entryId);


        allBlacklistEntriesCache = await getAllBlacklistEntriesDB();
        await handleBlacklistSearchInput();

        if (typeof updateSearchIndex === 'function' && entryToDelete) {
            await updateSearchIndex('blacklistedClients', entryId, entryToDelete, 'delete');
        }
        showNotification("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", "success");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:", error);
        showNotification("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏", "error");
    }
}


async function addBlacklistEntryDB(entry) {
    return await saveToIndexedDB('blacklistedClients', entry);
}
async function getBlacklistEntryDB(id) {
    return await getFromIndexedDB('blacklistedClients', id);
}
async function updateBlacklistEntryDB(entry) {
    return await saveToIndexedDB('blacklistedClients', entry);
}
async function deleteBlacklistEntryDB(id) {
    return await deleteFromIndexedDB('blacklistedClients', id);
}
async function getAllBlacklistEntriesDB() {
    return await getAllFromIndexedDB('blacklistedClients');
}


function showBlacklistWarning() {
    if (currentBlacklistWarningOverlay) {
        currentBlacklistWarningOverlay.remove();
        currentBlacklistWarningOverlay = null;
    }

    const overlay = document.createElement('div');
    overlay.id = 'blacklistWarningOverlay';
    overlay.className = 'fixed inset-0 bg-red-700 dark:bg-red-800 text-white p-8 flex flex-col items-center justify-center text-center z-[10000]';
    overlay.innerHTML = `
        <div class="max-w-2xl">
            <i class="fas fa-exclamation-triangle fa-3x mb-6 text-yellow-300"></i>
            <h1 class="text-3xl font-bold mb-4">–í–ù–ò–ú–ê–ù–ò–ï!</h1>
            <p class="text-lg mb-3">–†–∞–∑–¥–µ–ª "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤-–∂–∞–±" –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –æ—Å–æ–±–æ–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.</p>
            <p class="text-lg mb-6">–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é, –µ—Å–ª–∏ –≤—ã –Ω–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã, –≤–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏–ª–∏ —Å—Ç–∞—Ä—à–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç!</p>
            <p class="text-base mb-8">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–∞–π–Ω–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–æ! –ù–ï –ó–õ–û–£–ü–û–¢–†–ï–ë–õ–Ø–¢–¨!</p>
            <button id="acceptBlacklistWarningBtn" class="px-8 py-3 bg-yellow-400 hover:bg-yellow-500 text-red-800 font-bold rounded-lg shadow-lg transition-colors">
                –Ø –ø–æ–Ω–∏–º–∞—é –∏ –ø—Ä–∏–Ω–∏–º–∞—é —Ä–∏—Å–∫–∏
            </button>
        </div>
    `;
    document.body.appendChild(overlay);
    currentBlacklistWarningOverlay = overlay;
    document.body.classList.add('overflow-hidden');

    const acceptBtn = overlay.querySelector('#acceptBlacklistWarningBtn');
    acceptBtn.addEventListener('click', () => {
        overlay.remove();
        currentBlacklistWarningOverlay = null;
        if (getVisibleModals().length === 0) {
            document.body.classList.remove('overflow-hidden');
        }
        setActiveTab('blacklistedClients', true);
    });
}


function applyClientNotesFontSize() {
    const clientNotes = document.getElementById('clientNotes');
    if (clientNotes && userPreferences && typeof userPreferences.clientNotesFontSize === 'number') {
        const fontSize = userPreferences.clientNotesFontSize;
        clientNotes.style.fontSize = `${fontSize}%`;
        console.log(`[applyClientNotesFontSize] Font size for client notes set to ${fontSize}%.`);
    } else {
        if (!clientNotes) console.warn('[applyClientNotesFontSize] Could not apply font size: #clientNotes element not found.');
        if (!userPreferences || typeof userPreferences.clientNotesFontSize !== 'number') {
            console.warn('[applyClientNotesFontSize] Could not apply font size: userPreferences.clientNotesFontSize is missing or invalid.');
        }
    }
}


async function initClientDataSystem() {
    const LOG_PREFIX = "[ClientDataSystem]";
    console.log(`${LOG_PREFIX} –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...`);

    const clientNotes = document.getElementById('clientNotes');
    if (!clientNotes) {
        console.error(`${LOG_PREFIX} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ø–æ–ª–µ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ #clientNotes –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.`);
        return;
    }
    console.log(`${LOG_PREFIX} –ü–æ–ª–µ #clientNotes —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ.`);

    const clearClientDataBtn = document.getElementById('clearClientDataBtn');
    if (!clearClientDataBtn) {
        console.warn(`${LOG_PREFIX} –ö–Ω–æ–ø–∫–∞ #clearClientDataBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    }

    const buttonContainer = clearClientDataBtn?.parentNode;
    if (!buttonContainer) {
        console.warn(`${LOG_PREFIX} –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }

    if (clientNotesInputHandler) {
        clientNotes.removeEventListener('input', clientNotesInputHandler);
        console.log(`${LOG_PREFIX} –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 'input' —É–¥–∞–ª–µ–Ω.`);
    }
    if (clientNotesKeydownHandler) {
        clientNotes.removeEventListener('keydown', clientNotesKeydownHandler);
        console.log(`${LOG_PREFIX} –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 'keydown' —É–¥–∞–ª–µ–Ω.`);
    }

    clientNotesInputHandler = debounce(async () => {
        try {
            console.log(`${LOG_PREFIX} Debounce-—Ç–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª. –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è...`);
            const currentText = clientNotes.value;

            console.log(`${LOG_PREFIX}   -> –í—ã–∑–æ–≤ await saveClientData()`);
            await saveClientData();

            console.log(`${LOG_PREFIX}   -> –í—ã–∑–æ–≤ await checkForBlacklistedInn()`);
            await checkForBlacklistedInn(currentText);

        } catch (error) {
            console.error(`${LOG_PREFIX} –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ debounced-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:`, error);
        }
    }, 750);

    clientNotes.addEventListener('input', clientNotesInputHandler);
    console.log(`${LOG_PREFIX} –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 'input' —Å debounce –∏ await —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.`);

    clientNotesKeydownHandler = (event) => {
        if (event.key === 'Enter' && event.ctrlKey) {
            event.preventDefault();
            const textarea = event.target;
            const value = textarea.value;
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const textBeforeCursor = value.substring(0, start);
            const regex = /(?:^|\n)\s*(\d+)([).])\s/g;
            let lastNum = 0;
            let delimiter = ')';
            let match;
            while ((match = regex.exec(textBeforeCursor)) !== null) {
                const currentNum = parseInt(match[1], 10);
                if (currentNum >= lastNum) { lastNum = currentNum; delimiter = match[2]; }
            }
            const nextNum = lastNum + 1;
            let prefix = "\n\n";
            if (start === 0) { prefix = ""; }
            else {
                const charBefore = value.substring(start - 1, start);
                if (charBefore === '\n') {
                    if (start >= 2 && value.substring(start - 2, start) === '\n\n') { prefix = ""; }
                    else { prefix = "\n"; }
                }
            }
            const insertionText = prefix + nextNum + delimiter + " ";
            textarea.value = value.substring(0, start) + insertionText + value.substring(end);
            textarea.selectionStart = textarea.selectionEnd = start + insertionText.length;
            textarea.scrollTop = textarea.scrollHeight;
            textarea.dispatchEvent(new Event('input', { bubbles: true, cancelable: true }));
        }
    };
    clientNotes.addEventListener('keydown', clientNotesKeydownHandler);
    console.log(`${LOG_PREFIX} –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 'keydown' (Ctrl+Enter) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.`);

    if (clearClientDataBtn) {
        clearClientDataBtn.addEventListener('click', () => {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é?')) {
                clearClientData();
            }
        });
    }

    if (buttonContainer) {
        const existingExportBtn = document.getElementById('exportTextBtn');
        if (!existingExportBtn) {
            const exportTextBtn = document.createElement('button');
            exportTextBtn.id = 'exportTextBtn';
            exportTextBtn.innerHTML = `<i class="fas fa-file-download"></i><span class="hidden lg:inline lg:ml-1">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å .txt</span>`;
            exportTextBtn.className = `p-2 lg:px-3 lg:py-1.5 bg-green-600 hover:bg-green-700 text-white rounded-md transition text-sm flex items-center`;
            exportTextBtn.title = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∫–∞–∫ .txt —Ñ–∞–π–ª';
            exportTextBtn.addEventListener('click', exportClientDataToTxt);
            buttonContainer.appendChild(exportTextBtn);
        }
    }

    try {
        console.log(`${LOG_PREFIX} –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è clientNotes...`);
        let clientDataNotesValue = '';
        if (db) {
            const clientDataFromDB = await getFromIndexedDB('clientData', 'current');
            if (clientDataFromDB && clientDataFromDB.notes) {
                clientDataNotesValue = clientDataFromDB.notes;
            }
        } else {
            const localData = localStorage.getItem('clientData');
            if (localData) {
                try { clientDataNotesValue = JSON.parse(localData).notes || ''; }
                catch (e) { console.warn("[initClientDataSystem] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ clientData –∏–∑ localStorage:", e); }
            }
        }
        clientNotes.value = clientDataNotesValue;
        console.log(`${LOG_PREFIX} –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. clientNotes.value —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);

        applyClientNotesFontSize();

    } catch (error) {
        console.error(`${LOG_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞:`, error);
    }

    console.log(`${LOG_PREFIX} –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
}


async function checkAndSetWelcomeText() {
    console.log("[checkAndSetWelcomeText] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...");
    const clientNotesTextarea = document.getElementById('clientNotes');

    if (!clientNotesTextarea) {
        console.error("[checkAndSetWelcomeText] Textarea #clientNotes –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        return;
    }

    if (!userPreferences || typeof userPreferences.welcomeTextShownInitially === 'undefined') {
        console.error("[checkAndSetWelcomeText] userPreferences –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ñ–ª–∞–≥–∞ welcomeTextShownInitially. –í—ã—Ö–æ–¥.");
        return;
    }

    if (userPreferences.welcomeTextShownInitially === true) {
        console.log("[checkAndSetWelcomeText] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —Ñ–ª–∞–≥ welcomeTextShownInitially —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        return;
    }

    const notesAreEmpty = !clientNotesTextarea.value || clientNotesTextarea.value.trim() === '';

    if (!algorithms || typeof algorithms !== 'object' || !algorithms.main ||
        typeof DEFAULT_MAIN_ALGORITHM !== 'object' || DEFAULT_MAIN_ALGORITHM === null) {
        console.error("[checkAndSetWelcomeText] –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ 'algorithms.main' –∏–ª–∏ 'DEFAULT_MAIN_ALGORITHM' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!");
        return;
    }

    const currentMainAlgoStepsNormalized = normalizeAlgorithmSteps(algorithms.main.steps || []);
    const defaultMainAlgoStepsNormalized = normalizeAlgorithmSteps(DEFAULT_MAIN_ALGORITHM.steps || []);

    const currentMainAlgoCore = { ...algorithms.main };
    delete currentMainAlgoCore.steps;
    const defaultMainAlgoCore = { ...DEFAULT_MAIN_ALGORITHM };
    delete defaultMainAlgoCore.steps;

    const coreFieldsMatch = deepEqual(currentMainAlgoCore, defaultMainAlgoCore);
    const stepsMatch = deepEqual(currentMainAlgoStepsNormalized, defaultMainAlgoStepsNormalized);
    const isMainAlgorithmDefault = coreFieldsMatch && stepsMatch;

    console.log(`[checkAndSetWelcomeText - –£—Å–ª–æ–≤–∏—è] notesAreEmpty: ${notesAreEmpty}, isMainAlgorithmDefault: ${isMainAlgorithmDefault} (coreFieldsMatch: ${coreFieldsMatch}, stepsMatch: ${stepsMatch}), welcomeTextShownInitially: ${userPreferences.welcomeTextShownInitially}`);

    if (notesAreEmpty && isMainAlgorithmDefault) {
        clientNotesTextarea.value = DEFAULT_WELCOME_CLIENT_NOTES_TEXT;
        console.log("[checkAndSetWelcomeText] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ #clientNotes.");

        userPreferences.welcomeTextShownInitially = true;
        if (typeof saveUserPreferences === 'function') {
            try {
                await saveUserPreferences();
                console.log("[checkAndSetWelcomeText] –§–ª–∞–≥ welcomeTextShownInitially —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
            } catch (error) {
                console.error("[checkAndSetWelcomeText] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ userPreferences –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞:", error);
            }
        } else {
            console.warn("[checkAndSetWelcomeText] –§—É–Ω–∫—Ü–∏—è saveUserPreferences –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –§–ª–∞–≥ welcomeTextShownInitially –º–æ–∂–µ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è.");
        }

        if (typeof saveClientData === 'function') {
            setTimeout(() => {
                saveClientData();
                console.log("[checkAndSetWelcomeText] –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
            }, 100);
        } else {
            console.warn("[checkAndSetWelcomeText] –§—É–Ω–∫—Ü–∏—è saveClientData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ clientData.");
        }
    } else {
        if (!notesAreEmpty) {
            console.log("[checkAndSetWelcomeText] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ø–æ–ª–µ –∑–∞–º–µ—Ç–æ–∫ –Ω–µ –ø—É—Å—Ç–æ.");
        }
        if (!isMainAlgorithmDefault) {
            console.log("[checkAndSetWelcomeText] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –≥–ª–∞–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É.");
            if (!coreFieldsMatch) console.log("   - –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
            if (!stepsMatch) console.log("   - –®–∞–≥–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
        }
    }
}


function normalizeAlgorithmSteps(stepsArray) {
    if (!Array.isArray(stepsArray)) {
        console.warn("normalizeAlgorithmSteps: –ü–µ—Ä–µ–¥–∞–Ω –Ω–µ –º–∞—Å—Å–∏–≤, –≤–æ–∑–≤—Ä–∞—â–µ–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.", stepsArray);
        return [];
    }
    return stepsArray.map(step => {
        if (!step || typeof step !== 'object') {
            console.warn("normalizeAlgorithmSteps: –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —à–∞–≥, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –∑–∞–≥–ª—É—à–∫–æ–π.", step);
            return {
                title: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–≥',
                description: '–î–∞–Ω–Ω—ã–µ —à–∞–≥–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.',
                example: undefined,
                isCopyable: false,
                additionalInfoText: '',
                additionalInfoShowTop: false,
                additionalInfoShowBottom: false,
                showNoInnHelp: false
            };
        }

        const newStep = {
            title: step.title || '',
            description: step.description || '',
            example: step.example,
            isCopyable: typeof step.isCopyable === 'boolean' ? step.isCopyable : false,
            additionalInfoText: step.additionalInfoText || '',
            additionalInfoShowTop: typeof step.additionalInfoShowTop === 'boolean' ? step.additionalInfoShowTop : false,
            additionalInfoShowBottom: typeof step.additionalInfoShowBottom === 'boolean' ? step.additionalInfoShowBottom : false,
            showNoInnHelp: typeof step.showNoInnHelp === 'boolean' ? step.showNoInnHelp : false
        };

        if (step.type === 'inn_step') {
            newStep.showNoInnHelp = true;
        }
        if (step.type && step.type !== 'inn_step') {
            newStep.type = step.type;
        } else if (!step.type && newStep.hasOwnProperty('type') && step.type !== 'inn_step') {
            delete newStep.type;
        }
        return newStep;
    });
}


async function toggleFavorite(originalItemId, itemType, originalItemSection, title, description, buttonElement = null) {
    const isCurrentlyFavoriteInDB = await isFavoriteDB(itemType, originalItemId);
    let success = false;
    let operation = '';
    let newStatus = false;

    console.log(`Toggling favorite: ID=${originalItemId}, Type=${itemType}, Section=${originalItemSection}, CurrentDBStatus=${isCurrentlyFavoriteInDB}`);

    try {
        if (isCurrentlyFavoriteInDB) {
            await removeFromFavoritesDB(itemType, originalItemId);
            showNotification(`"${title}" —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.`, "info", 2000);
            success = true;
            operation = 'removed';
            newStatus = false;
        } else {
            const favoriteItem = {
                originalItemId: String(originalItemId),
                itemType,
                originalItemSection,
                title,
                description: description || '',
                dateAdded: new Date().toISOString()
            };
            await addToFavoritesDB(favoriteItem);
            showNotification(`"${title}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!`, "success", 2000);
            success = true;
            operation = 'added';
            newStatus = true;
        }
    } catch (error) {
        console.error("Error toggling favorite state in DB:", error);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", "error");
    }

    if (success) {
        currentFavoritesCache = await getAllFavoritesDB();
        await updateFavoriteStatusUI(originalItemId, itemType, newStatus, buttonElement);
        if (currentSection === 'favorites') {
            await renderFavoritesPage();
        }
    }
    return { success, operation, newStatus };
}


async function updateFavoriteStatusUI(originalItemId, itemType, isFavorite) {
    const stringOriginalItemId = String(originalItemId);
    console.log(`[updateFavoriteStatusUI] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${itemType}:${stringOriginalItemId} –Ω–∞ isFavorite=${isFavorite}`);

    const updateButtonAppearance = (button) => {
        if (!button) return;
        const icon = button.querySelector('i');
        if (icon) {
            icon.className = isFavorite ? 'fas fa-star text-yellow-400' : 'far fa-star';
        }
        button.title = isFavorite ? "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ";
        button.dataset.isFavorite = String(isFavorite);
    };

    const allRelatedButtons = document.querySelectorAll(
        `.toggle-favorite-btn[data-item-id="${stringOriginalItemId}"][data-item-type="${itemType}"]`
    );

    if (allRelatedButtons.length > 0) {
        console.log(`[updateFavoriteStatusUI] –ù–∞–π–¥–µ–Ω–æ ${allRelatedButtons.length} –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è ${itemType}:${stringOriginalItemId}.`);
        allRelatedButtons.forEach(button => {
            updateButtonAppearance(button);
        });
    } else {
        console.warn(`[updateFavoriteStatusUI] –ö–Ω–æ–ø–∫–∏ "–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${itemType}:${stringOriginalItemId}.`);
    }
}


async function renderFavoritesPage() {
    const container = document.getElementById('favoritesContainer');
    if (!container) {
        console.error("Favorites container #favoritesContainer not found.");
        return;
    }

    container.innerHTML = '<p class="text-center py-6 text-gray-500 dark:text-gray-400 col-span-full">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...</p>';

    let favoritesToRender;
    try {
        favoritesToRender = await getAllFavoritesDB();
    } catch (e) {
        console.error("Error fetching favorites for rendering:", e);
        container.innerHTML = '<p class="text-center py-6 text-red-500 dark:text-red-400 col-span-full">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.</p>';
        return;
    }

    currentFavoritesCache = favoritesToRender;
    favoritesToRender.sort((a, b) => new Date(b.dateAdded).getTime() - new Date(a.dateAdded).getTime());

    const currentView = viewPreferences['favoritesContainer'] || container.dataset.defaultView || 'cards';

    if (favoritesToRender.length === 0) {
        container.innerHTML = '<p class="text-center py-6 text-gray-500 dark:text-gray-400 col-span-full">–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.</p>';
    } else {
        container.innerHTML = '';
        const fragment = document.createDocumentFragment();

        favoritesToRender.forEach(fav => {
            const itemElement = document.createElement('div');
            itemElement.className = 'favorite-item view-item group relative cursor-pointer';
            itemElement.dataset.favoriteId = fav.id;
            itemElement.dataset.originalItemId = fav.originalItemId;
            itemElement.dataset.itemType = fav.itemType;
            itemElement.dataset.originalItemSection = fav.originalItemSection;

            let iconClass = 'fa-question-circle';
            let typeText = fav.itemType;

            switch (fav.itemType) {
                case 'mainAlgorithm': iconClass = 'fa-home'; typeText = '–ì–ª–∞–≤–Ω–∞—è'; break;
                case 'algorithm': iconClass = 'fa-sitemap'; typeText = '–ê–ª–≥–æ—Ä–∏—Ç–º'; break;
                case 'link': iconClass = 'fa-link'; typeText = '–°—Å—ã–ª–∫–∞ 1–°'; break;
                case 'bookmark': iconClass = 'fa-bookmark'; typeText = '–ó–∞–∫–ª–∞–¥–∫–∞'; break;
                case 'bookmark_note': iconClass = 'fa-sticky-note'; typeText = '–ó–∞–º–µ—Ç–∫–∞'; break;
                case 'reglament': iconClass = 'fa-file-alt'; typeText = '–†–µ–≥–ª–∞–º–µ–Ω—Ç'; break;
                case 'extLink': iconClass = 'fa-external-link-alt'; typeText = '–í–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å'; break;
                case 'sedoTypeSection': iconClass = 'fa-comments'; typeText = '–†–∞–∑–¥–µ–ª –°–≠–î–û'; break;
            }

            const favButtonHTML = getFavoriteButtonHTML(fav.originalItemId, fav.itemType, fav.originalItemSection, fav.title, fav.description, true);
            const goToOriginalBtnHTML = `
                <button class="go-to-original-btn p-1.5 text-gray-500 hover:text-primary dark:text-gray-400 dark:hover:text-blue-400 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É">
                    <i class="fas fa-external-link-square-alt"></i>
                </button>
            `;

            if (currentView === 'cards') {
                itemElement.classList.add('bg-white', 'dark:bg-gray-700', 'p-4', 'rounded-lg', 'shadow-md', 'hover:shadow-lg', 'transition-shadow', 'flex', 'flex-col', 'justify-between', 'h-full');

                itemElement.innerHTML = `
                    <div class="flex-grow min-w-0 cursor-pointer">
                        <div class="flex justify-between items-start mb-2">
                            <div class="flex items-center min-w-0 flex-1">
                                <i class="fas ${iconClass} text-primary mr-2 text-lg"></i>
                                <h3 class="font-semibold text-gray-900 dark:text-gray-100 truncate flex-1" title="${escapeHtml(fav.title)}">${escapeHtml(fav.title)}</h3>
                            </div>
                            <div class="actions-container flex-shrink-0 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity">${favButtonHTML}</div>
                        </div>
                        <p class="text-xs text-gray-500 dark:text-gray-400 mb-1">–¢–∏–ø: ${typeText}</p>
                        <p class="text-sm text-gray-600 dark:text-gray-400 line-clamp-3" title="${escapeHtml(fav.description || '')}">${escapeHtml(fav.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}</p>
                    </div>
                    <div class="mt-auto pt-3 border-t border-gray-200 dark:border-gray-600 flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
                        <span>–î–æ–±–∞–≤–ª–µ–Ω–æ: ${new Date(fav.dateAdded).toLocaleDateString()}</span>
                        <button class="go-to-original-btn inline-flex items-center p-1.5 text-gray-500 hover:text-primary dark:text-gray-400 dark:hover:text-blue-400 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É">
                            <i class="fas fa-external-link-square-alt"></i> <span class="ml-1 hidden sm:inline">–ü–µ—Ä–µ–π—Ç–∏</span>
                        </button>
                    </div>
                `;
            } else {
                itemElement.classList.add('flex', 'items-center', 'justify-between', 'p-3', 'border-b', 'border-gray-200', 'dark:border-gray-600', 'hover:bg-gray-50', 'dark:hover:bg-gray-700', 'cursor-pointer');

                itemElement.innerHTML = `
                    <div class="cursor-pointer flex items-center min-w-0 flex-1 cursor-pointer" data-action="go-to-original">
                         <i class="fas ${iconClass} text-primary mr-3 text-lg w-5 text-center"></i>
                         <div class="min-w-0 flex-1">
                             <h3 class="font-medium text-gray-900 dark:text-gray-100 truncate" title="${escapeHtml(fav.title)}">${escapeHtml(fav.title)}</h3>
                             <p class="text-xs text-gray-500 dark:text-gray-400">${typeText}</p>
                         </div>
                    </div>
                    <div class="flex-shrink-0 ml-4 flex items-center gap-2">
                         ${favButtonHTML}
                         ${goToOriginalBtnHTML.replace('</button>', '<span class="hidden sm:inline ml-1">–ü–µ—Ä–µ–π—Ç–∏</span></button>')}
                    </div>
                `;
            }
            fragment.appendChild(itemElement);
        });
        container.appendChild(fragment);
    }

    if (typeof applyCurrentView === 'function') {
        applyCurrentView('favoritesContainer');
    }
}


function getFavoriteButtonHTML(originalItemId, itemType, originalItemSection, title, description, isCurrentlyFavorite) {
    const iconClass = isCurrentlyFavorite ? 'fas fa-star text-yellow-400' : 'far fa-star';
    const tooltip = isCurrentlyFavorite ? "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ";

    const safeTitle = (typeof title === 'string' ? escapeHtml(title) : '–≠–ª–µ–º–µ–Ω—Ç').replace(/"/g, '"');
    const safeDescription = (typeof description === 'string' ? escapeHtml(description) : '').replace(/"/g, '"');
    const safeOriginalItemSection = (typeof originalItemSection === 'string' ? escapeHtml(originalItemSection) : '').replace(/"/g, '"');


    return `
        <button class="toggle-favorite-btn p-1.5 text-gray-500 hover:text-yellow-500 dark:text-gray-400 dark:hover:text-yellow-300 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-1 focus:ring-offset-1 focus:ring-primary dark:focus:ring-offset-gray-800 transition-colors"
                title="${tooltip}"
                data-item-id="${originalItemId}"
                data-item-type="${itemType}"
                data-original-item-section="${safeOriginalItemSection}"
                data-item-title="${safeTitle}"
                data-item-description="${safeDescription}">
            <i class="${iconClass}"></i>
        </button>
    `;
}


async function handleFavoriteContainerClick(event) {
    const button = event.target.closest('button');
    const favoriteItemCard = event.target.closest('.favorite-item');

    if (!favoriteItemCard) return;

    const originalItemId = favoriteItemCard.dataset.originalItemId;
    const itemType = favoriteItemCard.dataset.itemType;
    const originalItemSection = favoriteItemCard.dataset.originalItemSection;
    const title = favoriteItemCard.querySelector('h3')?.textContent || "–≠–ª–µ–º–µ–Ω—Ç";
    const description = favoriteItemCard.querySelector('p.line-clamp-3')?.textContent || "";

    if (button && button.classList.contains('go-to-original-btn')) {
        event.stopPropagation();
        console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É: Type=${itemType}, ID=${originalItemId}, Section=${originalItemSection}`);

        if (itemType === 'mainAlgorithm') {
            setActiveTab('main');
        } else if (itemType === 'sedoTypeSection') {
            setActiveTab('sedoTypes');
        } else if (originalItemSection && typeof setActiveTab === 'function') {
            setActiveTab(originalItemSection);
            await new Promise(resolve => setTimeout(resolve, 200));

            if (itemType === 'algorithm') {
                const algoData = algorithms[originalItemSection]?.find(a => String(a.id) === String(originalItemId));
                if (algoData) showAlgorithmDetail(algoData, originalItemSection);
                else showNotification("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", "warning");
            } else if (itemType === 'link') {
                const linkElement = document.querySelector(`.cib-link-item[data-id="${originalItemId}"]`);
                if (linkElement) {
                    linkElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    highlightElement(linkElement, title);
                } else showNotification("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ 1–° –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "warning");
            } else if (itemType === 'bookmark' || itemType === 'bookmark_note') {
                const bookmarkData = await getFromIndexedDB('bookmarks', parseInt(originalItemId, 10));
                if (!bookmarkData) {
                    showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–∫–ª–∞–¥–∫—É.", "error");
                    return;
                }

                const folderFilter = document.getElementById('bookmarkFolderFilter');
                if (folderFilter) {
                    folderFilter.value = bookmarkData.folder || '';
                    if (typeof filterBookmarks === 'function') {
                        await filterBookmarks();
                    }
                }

                await new Promise(resolve => setTimeout(resolve, 100));

                const bookmarkElement = document.querySelector(`.bookmark-item[data-id="${originalItemId}"]`);
                if (bookmarkElement) {
                    bookmarkElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    highlightElement(bookmarkElement, title);
                }

                showBookmarkDetailModal(parseInt(originalItemId, 10));
            } else if (itemType === 'reglament') {
                const reglamentData = await getFromIndexedDB('reglaments', parseInt(originalItemId, 10));
                if (reglamentData && reglamentData.category) {
                    await showReglamentsForCategory(reglamentData.category);
                    await new Promise(resolve => setTimeout(resolve, 50));

                    const reglamentElement = document.querySelector(`.reglament-item[data-id="${originalItemId}"]`);
                    if (reglamentElement) {
                        reglamentElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        highlightElement(reglamentElement, title);
                    }
                    showReglamentDetail(parseInt(originalItemId, 10));
                } else {
                    showNotification("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –∏–ª–∏ –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", "warning");
                }
            } else if (itemType === 'extLink') {
                const extLinkElement = document.querySelector(`.ext-link-item[data-id="${originalItemId}"]`);
                if (extLinkElement) {
                    extLinkElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    highlightElement(extLinkElement, title);
                    const url = extLinkElement.querySelector('a.ext-link-url')?.href;
                    if (url) window.open(url, '_blank', 'noopener,noreferrer');
                } else showNotification("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "warning");
            } else {
                showNotification(`–ü–µ—Ä–µ—Ö–æ–¥ –¥–ª—è —Ç–∏–ø–∞ "${itemType}" –µ—â–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.`, "info");
            }
        } else {
            showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.", "error");
        }

    } else if (button && button.classList.contains('toggle-favorite-btn')) {
        event.stopPropagation();
        await toggleFavorite(originalItemId, itemType, originalItemSection, title, description, button);

    } else {
        event.stopPropagation();
        console.log(`[FIXED] –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ. Type=${itemType}, ID=${originalItemId}, Section=${originalItemSection}`);

        switch (itemType) {
            case 'mainAlgorithm':
                setActiveTab('main');
                break;

            case 'sedoTypeSection':
                setActiveTab('sedoTypes');
                break;

            case 'algorithm':
                const algoData = algorithms[originalItemSection]?.find(a => String(a.id) === String(originalItemId));
                if (algoData) {
                    showAlgorithmDetail(algoData, originalItemSection);
                } else {
                    showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.", "error");
                }
                break;

            case 'bookmark':
            case 'bookmark_note':
                const bookmarkId = parseInt(originalItemId, 10);
                if (!isNaN(bookmarkId)) {
                    showBookmarkDetailModal(bookmarkId);
                } else {
                    showNotification("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–ª–∞–¥–∫–∏.", "error");
                }
                break;

            case 'reglament':
                const reglamentId = parseInt(originalItemId, 10);
                if (!isNaN(reglamentId)) {
                    showReglamentDetail(reglamentId);
                } else {
                    showNotification("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞.", "error");
                }
                break;

            case 'extLink':
                const linkData = await getFromIndexedDB('extLinks', parseInt(originalItemId, 10));
                if (linkData && linkData.url) {
                    try {
                        new URL(linkData.url);
                        window.open(linkData.url, '_blank', 'noopener,noreferrer');
                    } catch (e) {
                        showNotification("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —É —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.", "error");
                    }
                } else {
                    showNotification("URL –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error");
                }
                break;

            case 'link':
                const linkDataForCopy = await getFromIndexedDB('links', parseInt(originalItemId, 10));
                if (linkDataForCopy && linkDataForCopy.link) {
                    copyToClipboard(linkDataForCopy.link, '–°—Å—ã–ª–∫–∞ 1–° —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
                } else {
                    showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ 1–°.", "error");
                }
                break;

            default:
                showNotification(`–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Ç–∏–ø–∞ "${itemType}" –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.`, "info");
                break;
        }
    }
}


async function handleFavoriteActionClick(event) {
    const button = event.target.closest('.toggle-favorite-btn');
    if (!button) return;

    event.stopPropagation();
    event.preventDefault();

    const originalItemId = button.dataset.itemId;
    const itemType = button.dataset.itemType;
    let originalItemSection = button.dataset.originalItemSection;
    let title = button.dataset.itemTitle || "–≠–ª–µ–º–µ–Ω—Ç";
    let description = button.dataset.itemDescription || "";

    if (!originalItemId || !itemType) {
        console.error("handleFavoriteActionClick: Missing data attributes itemId or itemType on button.", button.dataset);
        showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç.", "error");
        return;
    }

    if (!originalItemSection && itemType !== 'mainAlgorithm' && itemType !== 'sedoTypeSection') {
        const cardElement = button.closest('.view-item[data-id]');
        if (cardElement) {
            const sectionContainer = cardElement.closest('[id$="Algorithms"], [id$="Container"], [id$="Content"]');
            if (sectionContainer) {
                if (sectionContainer.id.includes('program')) originalItemSection = 'program';
                else if (sectionContainer.id.includes('skzi')) originalItemSection = 'skzi';
                else if (sectionContainer.id.includes('lk1c')) originalItemSection = 'lk1c';
                else if (sectionContainer.id.includes('webReg')) originalItemSection = 'webReg';
                else if (sectionContainer.id.includes('links')) originalItemSection = 'links';
                else if (sectionContainer.id.includes('extLinks')) originalItemSection = 'extLinks';
                else if (sectionContainer.id.includes('reglaments')) {
                    const reglamentListDiv = button.closest('#reglamentsList');
                    if (reglamentListDiv && reglamentListDiv.dataset.currentCategory) {
                        originalItemSection = reglamentListDiv.dataset.currentCategory;
                    } else {
                        try {
                            const reglamentData = await getFromIndexedDB('reglaments', parseInt(originalItemId, 10));
                            originalItemSection = reglamentData?.category || 'reglaments';
                        } catch (e) {
                            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –∏–∑ –ë–î –≤ handleFavoriteActionClick");
                            originalItemSection = 'reglaments';
                        }
                    }
                }
                else if (sectionContainer.id.includes('bookmarks')) originalItemSection = 'bookmarks';
            }
        }
        if (!originalItemSection) originalItemSection = currentSection;
    } else if (itemType === 'mainAlgorithm' && !originalItemSection) {
        originalItemSection = 'main';
    } else if (itemType === 'sedoTypeSection' && !originalItemSection) {
        originalItemSection = 'sedoTypes';
    }

    if (!originalItemSection) {
        console.error(`handleFavoriteActionClick: CRITICAL - originalItemSection could not be determined for ${itemType}:${originalItemId}.`);
        showNotification("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª —ç–ª–µ–º–µ–Ω—Ç–∞.", "error");
        return;
    }

    console.log(`Favorite button clicked (Capturing Phase Logic Active): ID=${originalItemId}, Type=${itemType}, Section=${originalItemSection}`);
    await toggleFavorite(originalItemId, itemType, originalItemSection, title, description, button);
}


function isFavorite(itemType, originalItemId) {
    if (!currentFavoritesCache) return false;
    return currentFavoritesCache.some(fav => fav.itemType === itemType && String(fav.originalItemId) === String(originalItemId));
}


async function refreshAllFavoritableSectionsUI() {
    console.log("Refreshing UI for all sections that can contain favorites...");
    try {
        if (typeof renderAllAlgorithms === 'function') {
            renderAllAlgorithms();
            console.log("Refreshed: All algorithm sections.");
        }

        if (typeof loadBookmarks === 'function') {
            await loadBookmarks();
            console.log("Refreshed: Bookmarks section.");
        }

        if (typeof loadExtLinks === 'function') {
            await loadExtLinks();
            console.log("Refreshed: External Links section.");
        }

        const reglamentsListDiv = document.getElementById('reglamentsList');
        const categoryGrid = document.getElementById('reglamentCategoryGrid');
        if (reglamentsListDiv && categoryGrid && typeof renderReglamentCategories === 'function') {
            reglamentsListDiv.classList.add('hidden');
            delete reglamentsListDiv.dataset.currentCategory;
            categoryGrid.classList.remove('hidden');
            renderReglamentCategories();
            console.log("Refreshed: Reglaments section (reset to categories view).");
        }

        const showFavoritesHeaderButton = document.getElementById('showFavoritesHeaderBtn');
        if (showFavoritesHeaderButton) {
            showFavoritesHeaderButton.classList.remove('text-primary');
        }

        console.log("UI refresh for favoritable items complete.");
    } catch (error) {
        console.error("Error during UI refresh of favoritable sections:", error);
        if (typeof showNotification === 'function') {
            showNotification("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.", "error");
        }
    }
}


document.addEventListener('click', handleFavoriteActionClick);
const favoritesContainer = document.getElementById('favoritesContainer');
if (favoritesContainer) {
    favoritesContainer.removeEventListener('click', handleFavoriteContainerClick);
    favoritesContainer.addEventListener('click', handleFavoriteContainerClick);
}

const showFavoritesHeaderBtn = document.getElementById('showFavoritesHeaderBtn');
if (showFavoritesHeaderBtn) {
    showFavoritesHeaderBtn.addEventListener('click', () => setActiveTab('favorites'));
}


const clearFavoritesBtn = document.getElementById('clearFavoritesBtn');
if (clearFavoritesBtn) {
    clearFavoritesBtn.addEventListener('click', async () => {
        if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–Å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.")) {
            if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.createAndShow) {
                loadingOverlayManager.createAndShow();
                loadingOverlayManager.updateProgress(50, "–û—á–∏—Å—Ç–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...");
            }

            const success = await clearAllFavoritesDB();

            if (success) {
                await refreshAllFavoritableSectionsUI();
                await renderFavoritesPage();

                if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.hideAndDestroy) {
                    loadingOverlayManager.updateProgress(100, "–ì–æ—Ç–æ–≤–æ");
                    setTimeout(() => loadingOverlayManager.hideAndDestroy(), 500);
                }
                showNotification("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ.", "success");
            } else {
                if (typeof loadingOverlayManager !== 'undefined' && loadingOverlayManager.hideAndDestroy) {
                    loadingOverlayManager.hideAndDestroy();
                }
                showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.", "error");
            }
        }
    });
}


async function isInnBlacklisted(inn) {
    const LOG_PREFIX = "[isInnBlacklisted]";
    console.log(`${LOG_PREFIX} –ó–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ò–ù–ù: ${inn}`);

    if (!db) {
        console.warn(`${LOG_PREFIX} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º false.`);
        return false;
    }
    try {
        const count = await performDBOperation('blacklistedClients', 'readonly', store => {
            const index = store.index('inn');
            return index.count(inn);
        });
        console.log(`${LOG_PREFIX} –†–µ–∑—É–ª—å—Ç–∞—Ç count() –¥–ª—è –ò–ù–ù ${inn}: ${count}.`);
        return count > 0;
    } catch (error) {
        console.error(`${LOG_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ performDBOperation –¥–ª—è –ò–ù–ù ${inn}:`, error);
        return false;
    }
}


async function checkForBlacklistedInn(text) {
    const LOG_PREFIX = "[CheckINN_V8_Final_DismissAndReadd]";
    const lastLine = text.trim().split('\n').pop() || '';
    console.log(`${LOG_PREFIX} –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞: "${lastLine}"`);

    if (!db) {
        console.warn(`${LOG_PREFIX} –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞.`);
        return;
    }

    try {
        const innRegex = /\b(\d{10}|\d{12})\b/g;
        const currentInnsList = lastLine.match(innRegex) || [];

        const currentInnCounts = new Map();
        for (const inn of currentInnsList) {
            currentInnCounts.set(inn, (currentInnCounts.get(inn) || 0) + 1);
        }

        const innsToCheckForNotification = new Set();
        for (const [inn, currentCount] of currentInnCounts.entries()) {
            const lastCount = lastKnownInnCounts.get(inn) || 0;
            if (currentCount > lastCount) {
                innsToCheckForNotification.add(inn);
            }
        }

        const innsToRemoveNotification = new Set();
        for (const inn of lastKnownInnCounts.keys()) {
            if (!currentInnCounts.has(inn)) {
                innsToRemoveNotification.add(inn);
            }
        }

        for (const inn of innsToCheckForNotification) {
            const isBlacklisted = await isInnBlacklisted(inn);
            if (isBlacklisted) {
                const entries = await getBlacklistEntriesByInn(inn);
                if (entries.length > 0) {
                    const entry = entries[0];
                    const level = entry.level || 1;
                    const notificationId = level === 3 ? `hyper-toad-warning-${inn}` : `blacklist-warning-${inn}`;
                    const message = level === 3
                        ? `–û–ë–ù–ê–†–£–ñ–ï–ù–ê –ì–ò–ü–ï–†–ñ–ê–ë–ê (–ò–ù–ù: ${inn}), –¢–†–ï–í–û–ì–ê! –ê–õ–Ø–†–ú–ê!`
                        : `–í–ù–ò–ú–ê–ù–ò–ï, –ü–û –ò–ù–ù ${inn} –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ñ–ê–ë–ê (–£—Ä–æ–≤–µ–Ω—å ${level}), –ë–£–î–¨–¢–ï –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–´!`;
                    const type = level === 3 ? 'hyper-alert' : 'error';

                    if (activeToadNotifications.has(inn)) {
                        const existingId = activeToadNotifications.get(inn);
                        console.log(`${LOG_PREFIX} –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –ò–ù–ù ${inn}. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (ID: ${existingId}).`);
                        NotificationService.dismissImportant(existingId);
                        await new Promise(resolve => requestAnimationFrame(resolve));
                    }

                    console.log(`%c${LOG_PREFIX} –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ñ–ê–ë–ê! –ü–æ–∫–∞–∑/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ò–ù–ù: ${inn}, –£—Ä–æ–≤–µ–Ω—å: ${level}`, 'color: red; font-weight: bold; font-size: 16px;');

                    NotificationService.add(message, type, {
                        id: notificationId,
                        important: true,
                        isDismissible: true,
                        autoDismissDelay: level < 3 ? 30000 : 0,
                        onClick: () => {
                            setActiveTab('blacklistedClients');
                            const searchInput = document.getElementById('blacklistSearchInput');
                            if (searchInput) {
                                searchInput.value = inn;
                                searchInput.dispatchEvent(new Event('input', { bubbles: true }));
                            }
                        }
                    });
                    activeToadNotifications.set(inn, notificationId);
                }
            }
        }

        for (const inn of innsToRemoveNotification) {
            if (activeToadNotifications.has(inn)) {
                const notificationId = activeToadNotifications.get(inn);
                console.log(`${LOG_PREFIX} –ò–ù–ù ${inn} —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID: ${notificationId}.`);
                NotificationService.dismissImportant(notificationId);
                activeToadNotifications.delete(inn);
            }
        }

        lastKnownInnCounts = new Map(currentInnCounts);

    } catch (error) {
        console.error(`${LOG_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù:`, error);
        NotificationService.add("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.", "warning");
    }
}


function sortAndRenderBlacklist() {
    let entriesToRender = [...allBlacklistEntriesCache];

    const query = (document.getElementById('blacklistSearchInput')?.value || '').trim().toLowerCase();
    if (query) {
        entriesToRender = entriesToRender.filter(entry => {
            const orgNameMatch = entry.organizationNameLc && entry.organizationNameLc.includes(query);
            const innMatch = entry.inn && entry.inn.includes(query);
            const phoneMatch = entry.phone && entry.phone.includes(query);
            const notesMatch = entry.notes && entry.notes.toLowerCase().includes(query);
            return orgNameMatch || innMatch || phoneMatch || notesMatch;
        });
    }

    entriesToRender.sort((a, b) => {
        const directionMultiplier = currentBlacklistSort.direction === 'desc' ? -1 : 1;

        const levelA = a.level || 1;
        const levelB = b.level || 1;
        const dateA = new Date(a.dateAdded || 0).getTime();
        const dateB = new Date(b.dateAdded || 0).getTime();

        if (currentBlacklistSort.criteria === 'level') {
            const levelDifference = levelA - levelB;
            if (levelDifference !== 0) {
                return levelDifference * directionMultiplier;
            }
            return dateB - dateA;
        }

        if (currentBlacklistSort.criteria === 'date') {
            const dateDifference = dateA - dateB;
            if (dateDifference !== 0) {
                return dateDifference * directionMultiplier;
            }
            return levelB - levelA;
        }
        return dateB - dateA;
    });

    renderBlacklistTable(entriesToRender);
}


function renderBlacklistEntries(entries) {
    const container = document.getElementById('blacklistTableContainer');
    if (!container) {
        console.error("renderBlacklistEntries: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #blacklistTableContainer –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    container.innerHTML = '';

    if (!entries || entries.length === 0) {
        const query = document.getElementById('blacklistSearchInput')?.value || '';
        if (query.trim()) {
            container.innerHTML = `<div class="p-4 text-center text-gray-500 dark:text-gray-400">–ü–æ –∑–∞–ø—Ä–æ—Å—É "${escapeHtml(query)}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</div>`;
        } else {
            container.innerHTML = '<div class="p-4 text-center text-gray-500 dark:text-gray-400">–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.</div>';
        }
        return;
    }

    const fragment = document.createDocumentFragment();
    const highlight = (text) => {
        const query = document.getElementById('blacklistSearchInput')?.value.trim().toLowerCase();
        if (!text || !query) return escapeHtml(text);
        const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
        return escapeHtml(text).replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-600 rounded-sm px-0.5">$1</mark>');
    };

    entries.forEach(entry => {
        const card = document.createElement('div');
        card.className = 'blacklist-entry-card bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-2 transition-all duration-200';
        card.dataset.entryId = entry.id;

        const level = entry.level || 1;
        let levelHtml = '', levelText = '–ù–∏–∑–∫–∏–π', levelColorClass = 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100';
        switch (level) {
            case 2: levelText = '–°—Ä–µ–¥–Ω–∏–π'; levelColorClass = 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100'; break;
            case 3: levelText = '–í—ã—Å–æ–∫–∏–π'; levelColorClass = 'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100'; break;
        }
        levelHtml = `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${levelColorClass}" title="–£—Ä–æ–≤–µ–Ω—å ${level}: ${levelText}">${level}</span>`;

        const dateAddedStr = entry.dateAdded ? new Date(entry.dateAdded).toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        card.innerHTML = `
            <div class="card-header grid grid-cols-[1fr,auto,auto] gap-4 items-center p-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700/50">
                <div class="font-medium text-gray-900 dark:text-gray-100 truncate" title="${escapeHtml(entry.organizationName)}">${highlight(entry.organizationName)}</div>
                <div class="text-center">${levelHtml}</div>
                <div class="text-sm text-gray-500 dark:text-gray-400 text-right">${dateAddedStr}</div>
            </div>
            <div class="card-details hidden p-4 border-t border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-800/50">
                <dl class="grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-2 text-sm">
                    <div class="sm:col-span-1">
                        <dt class="font-medium text-gray-500 dark:text-gray-400">–ò–ù–ù</dt>
                        <dd class="mt-1 text-gray-900 dark:text-gray-200">${highlight(entry.inn || '-')}</dd>
                    </div>
                    <div class="sm:col-span-1">
                        <dt class="font-medium text-gray-500 dark:text-gray-400">–¢–µ–ª–µ—Ñ–æ–Ω</dt>
                        <dd class="mt-1 text-gray-900 dark:text-gray-200">${highlight(entry.phone || '-')}</dd>
                    </div>
                    <div class="sm:col-span-2">
                        <dt class="font-medium text-gray-500 dark:text-gray-400">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</dt>
                        <dd class="mt-1 text-gray-900 dark:text-gray-200 whitespace-pre-wrap">${highlight(entry.notes || '-')}</dd>
                    </div>
                </dl>
                <div class="mt-4 text-right">
                    <button class="text-primary hover:text-secondary p-1" data-action="edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"><i class="fas fa-edit"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button class="text-red-600 hover:text-red-800 p-1 ml-4" data-action="delete" title="–£–¥–∞–ª–∏—Ç—å"><i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;

        card.querySelector('.card-header').addEventListener('click', (e) => {
            if (e.target.closest('button')) return;
            card.classList.toggle('is-expanded');
            card.querySelector('.card-details').classList.toggle('hidden');
        });

        fragment.appendChild(card);
    });

    container.appendChild(fragment);
}


function initGoogleDocSections() {
    const appContent = document.getElementById('appContent');
    if (!appContent) {
        console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê (initGoogleDocSections): –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä #appContent –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    let mainContentArea = appContent.querySelector('main');
    if (!mainContentArea) {
        console.warn("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï (initGoogleDocSections): –¢–µ–≥ <main> –≤–Ω—É—Ç—Ä–∏ #appContent –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –µ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏.");
        mainContentArea = document.createElement('main');
        mainContentArea.className = 'flex-grow p-4 overflow-y-auto custom-scrollbar';
        const tabNavContainer = appContent.querySelector('.border-b.border-gray-200');
        if (tabNavContainer && tabNavContainer.nextSibling) {
            tabNavContainer.parentNode.insertBefore(mainContentArea, tabNavContainer.nextSibling);
        } else {
            appContent.appendChild(mainContentArea);
        }
        const tabContents = appContent.querySelectorAll('.tab-content');
        tabContents.forEach(content => mainContentArea.appendChild(content));
    }

    const sections = [
        { id: 'telefony', docId: '1lDCKpFcBIB4gRCI7_Ppsepy140YWdFtziut67xr6GTw', title: '–¢–µ–ª–µ—Ñ–æ–Ω—ã' },
        { id: 'shablony', docId: '1YIAViw2kOVh4UzLw8VjNns0PHD29lHLr_QaQs3jCGX4', title: '–®–∞–±–ª–æ–Ω—ã' }
    ];

    sections.forEach(section => {
        if (!document.getElementById(`${section.id}Content`)) {
            const tabContentDiv = document.createElement('div');
            tabContentDiv.id = `${section.id}Content`;
            tabContentDiv.className = 'tab-content hidden h-full';
            tabContentDiv.innerHTML = `
                <div class="p-4 bg-gray-100 dark:bg-gray-800 h-full flex flex-col">
                    <div class="flex-shrink-0 flex flex-wrap gap-y-2 justify-between items-center mb-4">
                         <h2 class="text-2xl font-bold text-gray-800 dark:text-gray-200">${section.title}</h2>
                         <div class="flex items-center gap-2">
                             <button id="force-refresh-${section.id}-btn" class="px-3 py-1.5 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors" title="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞">
                                 <i class="fas fa-sync-alt mr-2"></i>–û–±–Ω–æ–≤–∏—Ç—å<span class="update-timestamp ml-1"></span>
                             </button>
                         </div>
                    </div>
                    <div class="relative mb-4 flex-shrink-0">
                        <input type="text" id="${section.id}-search-input" placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–¥–µ–ª—É..." class="w-full pl-4 pr-10 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary text-gray-900 dark:text-gray-100">
                        <button id="${section.id}-search-clear-btn" class="absolute inset-y-0 right-0 px-3 text-gray-500 hover:text-white-700 hidden" title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div id="doc-content-${section.id}" class="flex-grow overflow-y-auto bg-white dark:bg-gray-900 rounded-lg shadow p-4 custom-scrollbar">
                        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google-–¥–æ–∫–∞...
                    </div>
                </div>
            `;
            mainContentArea.appendChild(tabContentDiv);

            const refreshButton = document.getElementById(`force-refresh-${section.id}-btn`);
            if (refreshButton) {
                refreshButton.addEventListener('click', () => {
                    console.log(`–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '${section.id}'. –ó–∞–ø—Ä–æ—Å —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...`);
                    if (typeof loadAndRenderGoogleDoc === 'function') {
                        loadAndRenderGoogleDoc(section.docId, `doc-content-${section.id}`, true);
                    } else {
                        console.error(`–§—É–Ω–∫—Ü–∏—è loadAndRenderGoogleDoc –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '${section.id}'.`);
                    }
                });
            }

            const searchInput = document.getElementById(`${section.id}-search-input`);
            const clearBtn = document.getElementById(`${section.id}-search-clear-btn`);
            const searchHandler = section.id === 'telefony' ? handleTelefonySearch : handleShablonySearch;

            searchInput.addEventListener('input', debounce(searchHandler, 300));
            clearBtn.addEventListener('click', () => {
                searchInput.value = '';
                searchHandler();
            });

            if (section.id === 'shablony') {
                const docContainer = document.getElementById(`doc-content-${section.id}`);
                if (docContainer) {
                    docContainer.addEventListener('click', (event) => {
                        const block = event.target.closest('.shablony-block.copyable-block');
                        if (!block) return;

                        if (event.target.closest('a')) {
                            return;
                        }

                        const textToCopy = block.innerText;
                        if (textToCopy && typeof copyToClipboard === 'function') {
                            copyToClipboard(textToCopy, '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!');
                        }
                    });
                }
            }

            if (typeof loadAndRenderGoogleDoc === 'function') {
                console.log(`–ò–Ω–∏—Ü–∏–∏—Ä—É—é –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '${section.id}'.`);
                loadAndRenderGoogleDoc(section.docId, `doc-content-${section.id}`, false)
                    .catch(err => console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ ${section.id}:`, err));
            }
        }
    });
    startTimestampUpdater();
    console.log("[initGoogleDocSections] –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞, —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω.");
}


function startTimestampUpdater() {
    if (timestampUpdateInterval) {
        console.log("–¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.");
        return;
    }

    console.log("–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ '–û–±–Ω–æ–≤–∏—Ç—å'.");
    timestampUpdateInterval = setInterval(updateRefreshButtonTimestamps, 60000);
}


function updateRefreshButtonTimestamps() {
    const sections = [
        { id: 'telefony', docId: '1lDCKpFcBIB4gRCI7_Ppsepy140YWdFtziut67xr6GTw' },
        { id: 'shablony', docId: '1YIAViw2kOVh4UzLw8VjNns0PHD29lHLr_QaQs3jCGX4' }
    ];

    sections.forEach(section => {
        const refreshButton = document.getElementById(`force-refresh-${section.id}-btn`);
        if (!refreshButton) return;

        const timestampSpan = refreshButton.querySelector('.update-timestamp');
        if (!timestampSpan) return;

        const lastUpdateTime = googleDocTimestamps.get(section.docId);
        if (lastUpdateTime) {
            const minutesAgo = Math.floor((Date.now() - lastUpdateTime) / 60000);
            if (minutesAgo < 1) {
                timestampSpan.textContent = '(—Ç–æ–ª—å–∫–æ —á—Ç–æ)';
            } else if (minutesAgo === 1) {
                timestampSpan.textContent = `(1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥)`;
            } else if (minutesAgo < 5) {
                timestampSpan.textContent = `(${minutesAgo} –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥)`;
            } else {
                timestampSpan.textContent = `(${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)`;
            }
        } else {
            timestampSpan.textContent = '';
        }
    });
}


async function loadAndRenderGoogleDoc(docId, targetContainerId, force = false) {
    const docContainer = document.getElementById(targetContainerId);
    if (!docContainer) {
        console.error(`–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: HTML-—ç–ª–µ–º–µ–Ω—Ç #${targetContainerId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
    }

    docContainer.innerHTML = '<div class="text-center text-gray-500"><i class="fas fa-spinner fa-spin mr-2"></i>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google-–¥–æ–∫–∞...</div>';
    console.log(`[–®–ê–ì 1] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è... –ó–∞–ø—Ä–æ—Å –¥–ª—è ID: ${docId}. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${force}`);

    try {
        const results = await fetchGoogleDocs([docId], force);
        if (!results || results.length === 0) {
            throw new Error("API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.");
        }

        const resultData = results[0]?.content?.data || [];

        if (targetContainerId === 'doc-content-telefony') {
            originalTelefonyData = resultData;
        } else if (targetContainerId === 'doc-content-shablony') {
            originalShablonyData = resultData;
        }

        renderGoogleDocContent(results, docContainer, targetContainerId);
        docContainer.dataset.loaded = 'true';

        googleDocTimestamps.set(docId, Date.now());
        updateRefreshButtonTimestamps();

        console.log(`%c–£–°–ü–ï–•: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Google Doc (ID: ${docId}) –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –≤ #${targetContainerId}.`, "color: #00DD00; font-weight: bold;");

        if (typeof updateSearchIndex === 'function') {
            if (docId === TELEFONY_DOC_ID) {
                console.log(`[–ò–ù–î–ï–ö–°–ê–¶–ò–Ø] –ó–∞–ø—É—Å–∫ updateSearchIndex –¥–ª—è telefony (ID: ${docId}) –ø–æ —Å—ã—Ä—ã–º –¥–∞–Ω–Ω—ã–º.`);
                await updateSearchIndex('telefony', docId, resultData, 'update');
            } else if (docId === SHABLONY_DOC_ID) {
                console.log(`[–ò–ù–î–ï–ö–°–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–û] –ó–∞–ø—É—Å–∫ updateSearchIndex –¥–ª—è shablony (ID: ${docId}) –ø–æ —Å—ã—Ä—ã–º –¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ parseShablonyContent.`);
                const blocks = parseShablonyContent(resultData);
                await updateSearchIndex('shablony', docId, blocks, 'update');
            }
        }

    } catch (error) {
        console.error(`%c–û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –¥–ª—è ${targetContainerId}:`, "color: red; font-weight: bold;", error);
        docContainer.innerHTML = `<div style="color: red; border: 1px solid red; padding: 10px;"><b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b> ${escapeHtml(error.message)}</div>`;
        delete docContainer.dataset.loaded;
    }
}


async function fetchGoogleDocs(docIds, force = false) {
    if (!Array.isArray(docIds) || docIds.length === 0) {
        console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í —Ñ—É–Ω–∫—Ü–∏—é fetchGoogleDocs –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –º–∞—Å—Å–∏–≤ ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.");
        throw new Error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.");
    }

    const BASE_URL = 'https://script.google.com/macros/s/AKfycby5ak0hPZF7_YJnhqYD8g1M2Ck6grzq11mpKqPFIWaX9_phJe5H_97cXmnClXKg1Nrl/exec';
    const params = new URLSearchParams();
    params.append('docIds', docIds.join(','));
    params.append('v', new Date().getTime());
    if (force) {
        params.append('nocache', 'true');
    }

    const requestUrl = `${BASE_URL}?${params.toString()}`;
    console.log("URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:", requestUrl);

    const response = await fetch(requestUrl);
    if (!response.ok) {
        throw new Error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å ${response.status}`);
    }

    const results = await response.json();
    if (results.error) {
        throw new Error(`–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞: ${results.message}`);
    }
    return results;
}


function renderGoogleDocContent(results, container, parentContainerId) {
    container.innerHTML = '';
    const fragment = document.createDocumentFragment();

    for (const result of results) {
        const contentDiv = document.createElement('div');
        if (result.status === 'success') {
            const contentType = result.content.type;
            const contentData = result.content.data;

            if (parentContainerId === 'doc-content-telefony') {
                console.log(`[renderGoogleDocContent CORRECTED] –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π: —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä.`);
                renderPhoneDirectoryTable(contentDiv, contentData);
            } else if (parentContainerId === 'doc-content-shablony') {
                console.log(`[renderGoogleDocContent CORRECTED] –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π: —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ "–®–∞–±–ª–æ–Ω—ã". –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä—Å–µ—Ä —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤.`);
                renderStyledParagraphs(contentDiv, contentData);
            } else {
                console.log(`[renderGoogleDocContent] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è ${parentContainerId}. –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${contentType}`);
                if (contentType === 'paragraphs') {
                    renderParagraphs(contentDiv, contentData);
                } else if (contentType === 'table') {
                    renderTable(contentDiv, contentData);
                } else {
                    contentDiv.innerHTML = `<p style="color: orange;">–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${escapeHtml(contentType)}</p>`;
                }
            }
        } else {
            contentDiv.innerHTML = `<div style="color: red; border: 1px solid red; padding: 10px;"><b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:</b> ${escapeHtml(result.message)}</div>`;
        }
        fragment.appendChild(contentDiv);
    }
    container.appendChild(fragment);
}


function renderTable(container, data) {
    if (!data || data.length === 0) {
        container.innerHTML = '<p>–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.</p>';
        return;
    }
    const headers = Object.keys(data[0]);
    const headerHtml = `<thead><tr>${headers.map(h => `<th>${escapeHtml(h)}</th>`).join('')}</tr></thead>`;
    const bodyHtml = `<tbody>${data.map(row => {
        const cells = headers.map(header => `<td>${escapeHtml(String(row[header] || ''))}</td>`).join('');
        return `<tr>${cells}</tr>`;
    }).join('')}</tbody>`;
    container.innerHTML = `<table class="google-doc-table w-full text-sm text-left text-gray-500 dark:text-gray-400" style="border-collapse: collapse;">${headerHtml}${bodyHtml}</table>`;
}


function renderParagraphs(container, data) {
    if (!data || data.length === 0) {
        container.innerHTML = '<p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>';
        return;
    }
    container.innerHTML = data.map(p => `<div>${escapeHtml(p)}</div>`).join('');
}


function renderPhoneDirectoryTable(container, data, options = {}) {
    const LOG_PREFIX = '[Phone Table Parser v7 ROBUST-STYLING-WITH-INDEX]';
    console.log(`%c${LOG_PREFIX} –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.`, "color: blue; font-weight: bold;");

    const { scale = 1.0, fontScale = 1.0, searchQuery = '' } = options;
    const highlight = (text) => {
        if (!text || typeof text !== 'string') return '';
        if (!searchQuery) return escapeHtml(text);
        if (typeof highlightTextInString === 'function') {
            return highlightTextInString(text, searchQuery);
        }
        return escapeHtml(text);
    };

    if (!container || typeof container.appendChild !== 'function') {
        console.error(`${LOG_PREFIX} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–¥–∞–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.`);
        return;
    }

    if (!data || !Array.isArray(data) || data.length === 0) {
        if (searchQuery) {
            container.innerHTML = `<p class="p-4 text-center text-gray-500">–ü–æ –∑–∞–ø—Ä–æ—Å—É "${escapeHtml(searchQuery)}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>`;
        } else {
            container.innerHTML = '<p class="p-4 text-center text-gray-500">–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</p>';
        }
        return;
    }

    const headers = Object.keys(data.find(item => typeof item === 'object' && item !== null && Object.keys(item).length > 0) || {});
    if (headers.length === 0) {
        console.warn(`${LOG_PREFIX} –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏.`);
        container.innerHTML = '<p class="p-4 text-center text-gray-500">–û—à–∏–±–∫–∞: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.</p>';
        return;
    }

    const table = document.createElement('table');
    table.className = "google-doc-table text-sm text-left text-gray-500 dark:text-gray-400 border-collapse w-full";
    table.style.fontSize = `${100 * fontScale}%`;

    const thead = document.createElement('thead');
    const headerRow = document.createElement('tr');
    headers.forEach(headerText => {
        const th = document.createElement('th');
        th.className = "px-4 py-3 bg-gray-100 dark:bg-slate-700 dark:text-gray-300 border border-gray-300 dark:border-slate-600 font-semibold sticky top-0 z-10";
        th.scope = "col";
        th.textContent = headerText;
        headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);
    table.appendChild(thead);

    const tbody = document.createElement('tbody');
    data.forEach((item, index) => {
        const tr = document.createElement('tr');
        tr.className = "bg-white dark:bg-slate-800 hover:bg-gray-50 dark:hover:bg-slate-700 transition-colors duration-150";
        tr.dataset.rowIndex = index;

        const firstColumnKey = headers[0];
        const otherColumnKeys = headers.slice(1);
        const isSectionHeader = item[firstColumnKey] && otherColumnKeys.every(key => !item[key]);

        if (isSectionHeader) {
            const td = document.createElement('td');
            td.colSpan = headers.length;
            td.className = "px-4 py-2 font-bold text-gray-800 dark:text-white bg-gray-200 dark:bg-slate-600 border border-gray-300 dark:border-slate-500 text-center";
            td.innerHTML = highlight(item[firstColumnKey]);
            tr.appendChild(td);
        } else {
            headers.forEach(headerKey => {
                const td = document.createElement('td');
                td.className = "px-4 py-4 whitespace-pre-wrap break-word border border-gray-300 dark:border-slate-600 align-top";
                td.innerHTML = highlight(item[headerKey] || '');
                tr.appendChild(td);
            });
        }
        tbody.appendChild(tr);
    });
    table.appendChild(tbody);
    container.innerHTML = '';
    container.appendChild(table);
}


function renderStyledParagraphs(container, data, searchQuery = '') {
    if (!container) {
        console.error("renderStyledParagraphs: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.");
        return;
    }
    const highlight = (text) => {
        if (!text || typeof text !== 'string') return '';
        if (!searchQuery) {
            return linkify(text);
        }
        return linkify(highlightTextInString(text, searchQuery).replace(/<mark[^>]*>/g, '##MARK_START##').replace(/<\/mark>/g, '##MARK_END##')).replace(/##MARK_START##/g, '<mark class="search-term-highlight">').replace(/##MARK_END##/g, '</mark>');
    };

    if (!data || data.length === 0) {
        if (searchQuery) {
            container.innerHTML = `<p class="text-gray-500">–ü–æ –∑–∞–ø—Ä–æ—Å—É "${escapeHtml(searchQuery)}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>`;
        } else {
            container.innerHTML = '<p class="text-gray-500">–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>';
        }
        return;
    }

    const fragment = document.createDocumentFragment();
    let currentBlockWrapper = null;
    let blockIndex = -1;

    const createBlockWrapper = (index, level) => {
        const wrapper = document.createElement('div');
        wrapper.className = 'shablony-block p-3 rounded-lg';
        wrapper.dataset.blockIndex = index;

        if (level === 2) {
            wrapper.classList.add(
                'transition-colors', 'duration-200', 'hover:bg-gray-100',
                'dark:hover:bg-gray-800/50', 'copyable-block', 'group'
            );
            wrapper.title = '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞';
            wrapper.style.cursor = 'pointer';
        }

        return wrapper;
    };

    data.forEach(p => {
        const trimmedP = p.trim();
        if (trimmedP === '') return;

        let level = 0;
        if (trimmedP.startsWith('‚è©')) level = 1;
        else if (trimmedP.startsWith('‚ûß')) level = 2;
        else if (trimmedP.startsWith('‚ñ∏')) level = 3;

        if (level > 0) {
            blockIndex++;
            currentBlockWrapper = createBlockWrapper(blockIndex, level);

            const headerTag = `h${level + 1}`;
            const header = document.createElement(headerTag);

            const classMap = {
                'h2': 'text-2xl font-bold text-gray-900 dark:text-gray-100 mt-6 mb-4 pb-2 border-gray-300 dark:border-gray-600 text-center',
                'h3': 'text-xl font-bold text-gray-800 dark:text-gray-200 mt-5 mb-3',
                'h4': 'text-lg font-semibold text-gray-800 dark:text-gray-200 mt-4 mb-2'
            };

            header.className = classMap[headerTag];
            header.innerHTML = highlight(trimmedP.slice(1).trim());
            currentBlockWrapper.appendChild(header);
            fragment.appendChild(currentBlockWrapper);
        } else if (currentBlockWrapper) {
            if (trimmedP.startsWith('‚Ä¢') || trimmedP.startsWith('* ') || trimmedP.startsWith('- ')) {
                let list = currentBlockWrapper.querySelector('ul');
                if (!list) {
                    list = document.createElement('ul');
                    list.className = 'list-disc list-inside space-y-1 mb-2 pl-4';
                    currentBlockWrapper.appendChild(list);
                }
                const li = document.createElement('li');
                li.innerHTML = highlight(trimmedP.slice(1).trim());
                list.appendChild(li);
            } else {
                const pElem = document.createElement('p');
                pElem.className = 'mb-2';
                pElem.innerHTML = highlight(trimmedP.replace(/\*(.*?)\*/g, '<strong>$1</strong>'));
                currentBlockWrapper.appendChild(pElem);
            }
        }
    });

    container.innerHTML = '';
    container.appendChild(fragment);

    const createSeparator = () => {
        const separator = document.createElement('div');
        separator.className = 'w-full h-px bg-gray-200 dark:bg-gray-700 my-4';
        return separator;
    };

    const blocksToSeparate = container.querySelectorAll('.shablony-block');

    blocksToSeparate.forEach((block, index) => {
        if (index < blocksToSeparate.length - 1) {
            block.after(createSeparator());
        }
    });
}


let originalTelefonyData = [];
let originalShablonyData = [];

function handleTelefonySearch() {
    const searchInput = document.getElementById('telefony-search-input');
    const clearBtn = document.getElementById('telefony-search-clear-btn');
    const container = document.getElementById('doc-content-telefony');

    if (!searchInput || !container || !clearBtn) return;

    const query = searchInput.value.trim().toLowerCase();
    clearBtn.classList.toggle('hidden', !query);

    const filteredData = filterTelefonyData(query, originalTelefonyData);
    renderPhoneDirectoryTable(container, filteredData, { searchQuery: query });
}


function filterTelefonyData(query, originalData) {
    if (!query) {
        return originalData;
    }

    if (!Array.isArray(originalData) || originalData.length === 0) {
        return [];
    }

    const lowerCaseQuery = query.toLowerCase();
    const filteredResults = [];

    const headers = Object.keys(originalData.find(item => typeof item === 'object' && item !== null && Object.keys(item).length > 0) || {});
    if (headers.length === 0) {
        console.warn("[filterTelefonyData] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏) –¥–∞–Ω–Ω—ã—Ö. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
        return [];
    }
    const firstColumnKey = headers[0];

    let currentSectionHeader = null;
    let currentHeaderAdded = false;

    for (const item of originalData) {
        const isPotentialHeader = item[firstColumnKey] &&
            (item[firstColumnKey].includes('–¥–æ–±. 7005 —Å–µ–∫—Ä–µ—Ç–∞—Ä—å') ||
                Object.keys(item).slice(1).every(key => !/[a-zA-Z0-9]/.test(item[key])));

        if (isPotentialHeader) {
            currentSectionHeader = item;
            currentHeaderAdded = false;
        }

        const matches = Object.values(item).some(value =>
            String(value).toLowerCase().includes(lowerCaseQuery)
        );

        if (matches) {
            if (currentSectionHeader && !currentHeaderAdded) {
                filteredResults.push(currentSectionHeader);
                currentHeaderAdded = true;
            }

            if (item !== currentSectionHeader) {
                filteredResults.push(item);
            }
        }
    }

    return filteredResults;
}


function handleShablonySearch() {
    const searchInput = document.getElementById('shablony-search-input');
    const clearBtn = document.getElementById('shablony-search-clear-btn');
    const container = document.getElementById('doc-content-shablony');

    if (!searchInput || !container || !clearBtn) return;

    const query = searchInput.value.trim().toLowerCase();
    clearBtn.classList.toggle('hidden', !query);

    const filteredData = filterShablonyData(query, originalShablonyData);
    renderStyledParagraphs(container, filteredData, query);
}


function filterShablonyData(query, originalData) {
    if (!query) {
        return originalData;
    }
    if (!Array.isArray(originalData)) {
        return [];
    }

    const blocks = parseShablonyContent(originalData);

    const filteredBlocks = blocks.filter(block => {
        const titleMatch = block.title.toLowerCase().includes(query);
        const contentMatch = block.content.toLowerCase().includes(query);
        return titleMatch || contentMatch;
    });

    if (filteredBlocks.length > 0) {
        const resultData = [];
        filteredBlocks.forEach(block => {
            let headerMarker = '‚ñ∏';
            if (block.level === 1) headerMarker = '‚è©';
            if (block.level === 2) headerMarker = '‚ûß';

            resultData.push(`${headerMarker} ${block.title}`);

            const contentLines = block.content.split('\n').filter(line => line.trim() !== '');

            const originalFirstLine = originalData.find(p => p.trim().slice(1).trim() === block.content.split('\n')[0].trim());
            const isList = originalFirstLine && (originalFirstLine.trim().startsWith('‚Ä¢') || originalFirstLine.trim().startsWith('* ') || originalFirstLine.trim().startsWith('- '));

            if (isList) {
                contentLines.forEach(line => resultData.push(`‚Ä¢ ${line}`));
            } else {
                resultData.push(...contentLines);
            }
        });
        return resultData;
    }
    return [];
}


function parseShablonyContent(data) {
    if (!Array.isArray(data)) return [];

    const blocks = [];
    let currentBlock = null;

    const getHeaderLevel = (text) => {
        if (text.startsWith('‚è©')) return 1;
        if (text.startsWith('‚ûß')) return 2;
        if (text.startsWith('‚ñ∏')) return 3;
        return 0;
    };

    data.forEach(p => {
        const trimmedP = p.trim();
        if (trimmedP === '') return;

        const level = getHeaderLevel(trimmedP);

        if (level > 0) {
            if (currentBlock) {
                currentBlock.content = currentBlock.content.trim();
                blocks.push(currentBlock);
            }
            currentBlock = {
                title: trimmedP.slice(1).trim(),
                content: '',
                level: level,
                originalIndex: blocks.length
            };
        } else if (currentBlock) {
            currentBlock.content += trimmedP + '\n';
        }
    });

    if (currentBlock) {
        currentBlock.content = currentBlock.content.trim();
        blocks.push(currentBlock);
    }

    return blocks;
}


function applyCustomBackgroundImage(dataUrl) {
    if (dataUrl && typeof dataUrl === 'string') {
        document.documentElement.style.setProperty('--custom-background-image', `url(${dataUrl})`);
        document.body.classList.add('custom-bg-image-active');

        const preview = document.getElementById('backgroundImagePreview');
        const previewText = document.getElementById('backgroundImagePreviewText');
        const removeBtn = document.getElementById('backgroundImageRemoveBtn');

        if (preview) {
            preview.style.backgroundImage = `url(${dataUrl})`;
        }
        if (previewText) {
            previewText.classList.add('hidden');
        }
        if (removeBtn) {
            removeBtn.classList.remove('hidden');
        }
    }
}


function removeCustomBackgroundImage() {
    document.documentElement.style.removeProperty('--custom-background-image');
    document.body.classList.remove('custom-bg-image-active');

    const preview = document.getElementById('backgroundImagePreview');
    const previewText = document.getElementById('backgroundImagePreviewText');
    const removeBtn = document.getElementById('backgroundImageRemoveBtn');

    if (preview) {
        preview.style.backgroundImage = 'none';
    }
    if (previewText) {
        previewText.classList.remove('hidden');
    }
    if (removeBtn) {
        removeBtn.classList.add('hidden');
    }
}


function setupBackgroundImageControls() {
    const uploadBtn = document.getElementById('backgroundImageUploadBtn');
    const removeBtn = document.getElementById('backgroundImageRemoveBtn');
    const fileInput = document.getElementById('backgroundImageInput');

    if (!uploadBtn || !removeBtn || !fileInput) {
        console.warn("setupBackgroundImageControls: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        return;
    }

    const uploadBtnOriginalText = uploadBtn.innerHTML;

    uploadBtn.addEventListener('click', () => fileInput.click());

    removeBtn.addEventListener('click', async () => {
        if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?")) {
            try {
                await deleteFromIndexedDB('preferences', 'customBackgroundImage');
                removeCustomBackgroundImage();
                showNotification("–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", "info");
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ DB:", error);
                showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–∞.", "error");
            }
        }
    });

    fileInput.addEventListener('change', async (event) => {
        const file = event.target.files[0];
        if (!file) return;

        const MAX_FILE_SIZE = 5 * 1024 * 1024;
        if (file.size > MAX_FILE_SIZE) {
            showNotification(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${MAX_FILE_SIZE / 1024 / 1024} –ú–ë.`, "error");
            fileInput.value = '';
            return;
        }

        uploadBtn.disabled = true;
        uploadBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>–û–±—Ä–∞–±–æ—Ç–∫–∞...';

        try {
            const processedBlob = await processImageFile(file);
            const reader = new FileReader();
            reader.onloadend = async () => {
                const dataUrl = reader.result;
                try {
                    await saveToIndexedDB('preferences', { id: 'customBackgroundImage', value: dataUrl });
                    applyCustomBackgroundImage(dataUrl);
                    showNotification("–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", "success");
                } catch (dbError) {
                    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ–Ω–∞ –≤ DB:", dbError);
                    showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ–Ω.", "error");
                } finally {
                    uploadBtn.disabled = false;
                    uploadBtn.innerHTML = uploadBtnOriginalText;
                    fileInput.value = '';
                }
            };
            reader.readAsDataURL(processedBlob);
        } catch (processError) {
            console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", processError);
            showNotification("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", "error");
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = uploadBtnOriginalText;
            fileInput.value = '';
        }
    });
}
